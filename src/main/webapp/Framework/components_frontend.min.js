(function () {
	var z = window.Zving,
	DataCollection = z.DataCollection,
	CONTEXTPATH = z.CONTEXTPATH,
	encodeURL = z.String.encodeURL,
	htmlEncode = z.String.htmlEncode,
	Server = {};
	Server.ContextPath = z.CONTEXTPATH;
	Server.RequestMap = {};
	Server.MainServletURL = "/MainServlet.action";
	Server.Pool = [];
	Server.getXMLHttpRequest = function () {
		var i;
		for (i = 0; i < Server.Pool.length; i++) {
			if (Server.Pool[i][1] == "0") {
				Server.Pool[i][1] = "1";
				return Server.Pool[i][0]
			}
		}
		var request;
		if (window.XMLHttpRequest) {
			request = new XMLHttpRequest()
		} else {
			if (window.ActiveXObject) {
				for (i = 5; i > 1; i--) {
					try {
						if (i === 2) {
							request = new ActiveXObject("Microsoft.XMLHTTP")
						} else {
							request = new ActiveXObject("Msxml2.XMLHTTP." + i + ".0")
						}
					} catch (ex) {}

				}
			}
		}
		Server.Pool.push([request, "1"]);
		return request
	};
	Server.loadURL = function (url, func, onErrorFunc, timeout) {
		var Request = Server.getXMLHttpRequest();
		var timeoutHandler;
		Request.open("POST", CONTEXTPATH + url, true);
		Request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		Request.onreadystatechange = function () {
			if (Request.readyState == 4) {
				clearTimeout(timeoutHandler);
				if (Request.status >= 200 && Request.status < 300) {
					if (func) {
						func(Request.responseText)
					}
				} else {
					if (onErrorFunc) {
						onErrorFunc(Request.status)
					}
				}
				for (var i = 0; i < Server.Pool.length; i++) {
					if (Server.Pool[i][0] == Request) {
						Server.Pool[i][1] = "0";
						break
					}
				}
				Request.onreadystatechange = z.noopFn;
				Request = null;
				func = null;
				onErrorFunc = null
			}
		};
		if (onErrorFunc) {
			var checkForTimeout = function () {
				if (Request.readyState != 4) {
					Request.abort();
					onErrorFunc()
				}
			};
			timeoutHandler = setTimeout(checkForTimeout, timeout || 30000)
		}
		if (/^file:\/\/\//.test(location.href)) {
			clearTimeout(timeoutHandler);
			z.Console.error("AJAX不能在本地文件系统中使用，请通过http访问本页面。")
		} else {
			Request.send(null)
		}
	};
	Server.getOneValue = function (methodName, dc, func) {
		if (dc && dc.prototype === DataCollection.prototype) {
			Server.sendRequest(methodName, dc, func)
		} else {
			var dc1 = new DataCollection();
			dc1.add("_Param0", dc);
			Server.sendRequest(methodName, dc1, func)
		}
	};
	Server.sendRequest = function (destUrl, dataCollection, func) {
		var timeout = 30000;
		var Request = Server.getXMLHttpRequest();
		Request.open("POST", CONTEXTPATH + destUrl, true);
		Request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		var url = "_SEND_DATA=";
		if (typeof dataCollection == "string") {
			url += encodeURL(htmlEncode(dataCollection))
		} else {
			if (typeof dataCollection == "object") {
				url += z.isEmpty(dataCollection) ? "" : JSON.stringify(dataCollection)
			}
		}
		Server._ResponseDC = null;
		Request.onreadystatechange = function () {
			Server.onRequestComplete(Request, func)
		};
		var checkForTimeout = function () {
			if (Request.readyState != 4) {
				Request.abort();
				var dc = new DataCollection();
				dc.Status = 0;
				dc.Message = "连接超时!";
				func(dc)
			}
		};
		if (func) {
			func._timeoutHandler = window.setTimeout(checkForTimeout, 30000)
		}
		if (/^file:\/\/\//.test(location.href)) {
			z.Console.error("AJAX不能在本地文件系统中使用，请通过http访问本页面。")
		} else {
			Request.send(url)
		}
	}
	Server.onRequestComplete = function (Request, func) {
		if (Request.readyState == 4) {
			if (func && func._timeoutHandler) {
				clearTimeout(func._timeoutHandler);
				func._timeoutHandler = null
			}
			var dc = new DataCollection();
			if (Request.status >= 200 && Request.status < 300) {
				var xmlDoc = Request.responseText;
				if(xmlDoc){
					if(dc.parseJson(xmlDoc)){
						dc.Status = dc.get("Status");
						dc.Message = dc.get("Message");
					}
					Server._ResponseDC = dc;
					xmlDoc = null
				}else {
					dc.Status = 0;
					dc.Message = "服务器发生异常，未获取到数据!"
				}
			} else {
				dc.Status = 0;
				dc.Message = "服务器发生" + Request.status + "异常，未获取到数据!"
			}
			if (func) {
				func(dc)
			}
			Request = null;
			func = null
		}
	};
	Server.loadData = function (url, dataCollection, func) {
		var timeout = 30000;
		var Request = Server.getXMLHttpRequest();
		Request.open("POST", CONTEXTPATH + url, true);
		Request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		var url = "_SEND_DATA=";
		if (typeof dataCollection == "string") {
			url += encodeURL(htmlEncode(dataCollection))
		} else {
			if (typeof dataCollection == "object") {
				url += z.isEmpty(dataCollection) ? "" : dataCollection.toJson()
			}
		}
		Server._ResponseDC = null;
		Request.onreadystatechange = function () {
			if (Request.readyState == 4) {
				clearTimeout(func.timeoutHandler);
				if (Request.status >= 200 && Request.status < 300) {
					if (func) {
						func(Request.responseText)
					}
				} else {
					if (onErrorFunc) {
						onErrorFunc(Request.status)
					}
				}
				for (var i = 0; i < Server.Pool.length; i++) {
					if (Server.Pool[i][0] == Request) {
						Server.Pool[i][1] = "0";
						break
					}
				}
				Request.onreadystatechange = z.noopFn;
				Request = null;
				func = null;
				onErrorFunc = null
			}
		};
		var checkForTimeout = function () {
			if (Request.readyState != 4) {
				Request.abort();
				var dc = new DataCollection();
				dc.Status = 0;
				dc.Message = "连接超时!";
				func(dc)
			}
		};
		if (func) {
			func._timeoutHandler = window.setTimeout(checkForTimeout, 30000)
		}
		if (/^file:\/\/\//.test(location.href)) {
			z.Console.error("AJAX不能在本地文件系统中使用，请通过http访问本页面。")
		} else {
			Request.send(url)
		}
	};
	Server.getResponse = function () {
		return Server._ResponseDC
	};
	Server.Events = {};
	Server.bindEvent = function (methodName, func) {
		var arr = Server.Events[methodName];
		if (!arr) {
			arr = []
		}
		arr.push(func)
	};
	Server.fireEvent = function (methodName) {
		var args = z.toArray(arguments);
		var arr = Server.Events[methodName];
		if (!arr) {
			return true
		}
		var i;
		for (i = 0; i < arr.length; i++) {
			if (!arr[i].apply(null, args.push(args.shift()))) {
				return false
			}
		}
		return true
	};
	$(window).on("unload", function () {
		Server.Pool = Server.RequestMap = Server._ResponseDC = null
	});
	z.Server = Server
})();
(function () {
	var b = window.Zving,
	c = b.isIE6,
	a = {};
	a.initCtrl = function (e, d) {
		e = b.getDom(e);
		if (e._ctrl_style_attached_) {
			return
		}
		var f = e.type;
		switch (f) {
		case "textarea":
			if (c && e.disabled === true) {
				b.Node.addClass(e, "disabled")
			}
			break;
		case "text":
		case "":
			if (e.getAttribute("placeholder") && !b.support.placeholder) {
				a.placeholder(e)
			}
			if (e.getAttribute("suggest") && b.Suggest) {
				b.Suggest(e)
			}
			break;
		case "password":
			if (c && e.className === "") {
				b.Node.addClass(e, "inputText")
			}
			if (c && e.disabled === true) {
				b.Node.addClass(e, "disabled")
			}
			break;
		case "submit":
		case "reset":
		case "button":
			if (c && e.className === "" && !(/border|background/).test(e.style.cssText)) {
				b.Node.addClass(e, "inputButton")
			}
			if (c && e.disabled === true) {
				b.Node.addClass(e, "disabled")
			}
			break;
		case "checkbox":
			break;
		case "radio":
			break;
		case "file":
			break;
		case "image":
			break;
		default:
		}
		e._ctrl_style_attached_ = true
	};
	a.placeholder = function (d) {
		$(d).focus(function () {
			if (this.value == this.getAttribute("placeholder")) {
				this.value = ""
			}
			$(this).removeClass("placeholder")
		});
		$(d).blur(function () {
			if (this.value === "" || this.value == this.getAttribute("placeholder")) {
				$(this).addClass("placeholder");
				this.value = this.getAttribute("placeholder")
			}
		});
		if (d.value === "" || d.value == d.getAttribute("placeholder")) {
			$(d).addClass("placeholder");
			d.value = d.getAttribute("placeholder")
		}
	};
	b.UI = a
})();
(function () {
	var z = window.Zving,
	Cookie = z.Cookie,
	Console = {};
	var getDebugModeValue = Cookie.get("console_debug");
	if (getDebugModeValue === "true" || /^(file:\/\/\/|http:\/\/localhost)/.test(location.href)) {
		Console.debug = true;
		Console.silence = false
	} else {
		Console.debug = false
	}
	var timer;
	Console.cache = [];
	Console.history = [];
	Console.queue = [];
	Console.counters = {
		error : 0,
		warn : 0,
		info : 0,
		log : 0
	};
	Console.status = true;
	Console.max = 100;
	Console.historyIndex = null;
	Console.debugWindowError = false;
	Console.useBrowerConsole = false;
	Console.constr = function (value, inObject, inArray, link) {
		var isArray = false,
		isHash,
		isElement = false,
		vtype = typeof value,
		result = [];
		if (vtype === "object") {
			if (Object.prototype.toString.call(value) === "[object Date]") {
				vtype = "date"
			} else {
				if (Object.prototype.toString.call(value) === "[object String]") {
					vtype = "string"
				} else {
					if (Object.prototype.toString.call(value) === "[object Boolean]") {
						vtype = "boolean"
					} else {
						if (Object.prototype.toString.call(value) === "[object RegExp]") {
							vtype = "regexp"
						}
					}
				}
			}
		}
		try {
			var i,
			len;
			if (value instanceof Array && typeof _object !== "function") {
				isArray = true
			}
			if (typeof value === "object" && (value == window || value instanceof Object) && !value.nodeName) {
				isHash = true
			}
			if (value !== undefined && Boolean(value.nodeName) && Boolean(value.nodeType)) {
				isElement = true
			}
			if (value === null || value === undefined || vtype === "number" || vtype === "string" || vtype === "boolean" || (vtype === "function" && value.nodeName !== "OBJECT") || vtype === "regexp" || vtype === "date") {
				if (value === null) {
					result.push("<span style='color:#999'>null</span>")
				} else {
					if (value === undefined) {
						result.push("<span style='color:#999'>undefined</span>")
					} else {
						if (vtype === "regexp") {
							result.push("<span style='color:#360'>" + value + "</span>")
						} else {
							if (vtype === "date") {
								result.push("<span style='color:#060;'>'" + value + "'</span>")
							} else {
								if (vtype === "number") {
									result.push("<span style='color:#009'>" + value + "</span>")
								} else {
									if (vtype === "boolean") {
										result.push("<span style='color:#00c'>" + value + "</span>")
									} else {
										if (vtype === "function") {
											if (inObject || inArray) {
												result.push("<span style='color:#696; text-decoration:underline; cursor:pointer;' onclick='Zving.Console.log(Zving.Console.cache[" + (Console.cache.push(value) - 1) + "])'>function()</span>")
											} else {
												result.push("<span style='color:#090'>" + value.toString().substring(0, 100) + (value.toString().length > 100 ? " ..." : "") + "</span>")
											}
										} else {
											result.push("<span style='color:#e22'>" + (!inObject && !inArray ? value : '"' + value.substring(0, 100) + (value.length > 100 ? " ..." : "") + '"').replace(/\n/g, "\\n").replace(/\s/g, "&nbsp;").replace(/>/g, "&#62;").replace(/</g, "&#60;") + "</span>")
										}
									}
								}
							}
						}
					}
				}
			} else {
				if (isElement) {
					if (value.nodeType === 3) {
						result.push(Console.constr(value.nodeValue))
					} else {
						if (inObject) {
							result.push("<span style='color:#999'>" + value.nodeName.toLowerCase() + "</span>")
						} else {
							result.push("<span style='color:#00f;" + (!inObject && !inArray ? "'" : "text-decoration:underline; cursor:pointer;' onclick='Zving.Console.log(Zving.Console.cache[" + (Console.cache.push(value) - 1) + "])'") + "'>");
							if (inArray) {
								result.push(value.nodeName.toLowerCase());
								if (value.getAttribute) {
									if (value.getAttribute && value.getAttribute("id")) {
										result.push("<span style='color:#009'>#" + value.getAttribute("id") + "</span>")
									}
									var elClass = value.getAttribute(document.all ? "className" : "class") || "";
									result.push(!elClass ? "" : "<span style='color:#f00'>." + elClass.split(" ")[0] + "</span>")
								}
								result.push("</span>")
							} else {
								result.push("<span style='color:#009'>&#60;<span style='color:#00f'>" + value.nodeName.toLowerCase());
								if (value.attributes) {
									for (i = 0, len = value.attributes.length; i < len; i++) {
										var item = value.attributes[i];
										if (!document.all || (item.nodeValue && typeof item.nodeValue !== "function")) {
											result.push(" <span style='color:#009'>" + item.nodeName + "=\"<span style='color:#f00'>" + item.nodeValue + '</span>"</span>')
										}
									}
								}
								result.push("</span>&#62;</span>")
							}
						}
					}
				} else {
					if (isArray || isHash) {
						if (isArray) {
							if (inObject) {
								result.push("<span style='color:#999;text-decoration:underline; cursor:pointer;' onclick='Zving.Console.log(Zving.Console.cache[" + (Console.cache.push(value) - 1) + "])'>[" + value.length + "]</span>")
							} else {
								result.push("<span style='font-weight:normal'>[ ");
								for (i = 0, len = value.length; i < len; i++) {
									if ((inObject || inArray) && i > 3) {
										result.push(", <span style='color:#999;font-weight:bold'>" + (len - 4) + " More...</span>");
										break
									}
									result.push((i > 0 ? ", " : "") + Console.constr(value[i], false, true, true))
								}
								result.push(" ]</span>")
							}
						} else {
							if (inObject) {
								result.push("<span  style='color:#009; text-decoration:underline; cursor:pointer;' onclick='Zving.Console.log(Zving.Console.cache[" + (Console.cache.push(value) - 1) + "])'>Object</span>")
							} else {
								result.push("<span  style='color:#060;font-weight:normal;" + (!inObject && !inArray ? "'" : " text-decoration:underline; cursor:pointer;' onclick='Zving.Console.log(Zving.Console.cache[" + (Console.cache.push(value) - 1) + "])'") + ">Object");
								i = 0;
								for (var key in value) {
									var val = value[key];
									if ((inObject || inArray) && i > 3) {
										result.push(" <span style='color:#999;font-weight:bold;'>More...</span>");
										break
									}
									result.push(" " + key + "=" + Console.constr(val, true));
									i++
								}
								result.push("</span>")
							}
						}
					} else {
						result.push(["<span style='color:#999;'>" + value + "</span>"])
					}
				}
			}
		} catch (e) {
			result.push("..")
		}
		return result.join("")
	};
	Console.inputKeydown = function (evt) {
		evt = window.event || evt;
		var consoleInput = z.getDom("_ConsoleInput");
		if (evt.keyCode === 13) {
			Console.evaluate(consoleInput.value.replace(/(^\s*)|(\s*$)/g, ""))
		} else {
			if (evt.keyCode === 40) {
				if (Console.history[Console.historyIndex + 1]) {
					Console.historyIndex += 1;
					consoleInput.value = Console.history[Console.historyIndex]
				}
			} else {
				if (evt.keyCode === 38) {
					if (Console.history[Console.historyIndex - 1]) {
						Console.historyIndex -= 1;
						consoleInput.value = Console.history[Console.historyIndex]
					}
				}
			}
		}
	};
	Console.evaluate = function (cmd) {
		var result;
		if (cmd.length === 0) {
			return
		}
		z.getDom("_ConsoleInput").value = "";
		Console.historyIndex = Console.history.push(cmd);
		try {
			result = eval.call(window, cmd);
			if (cmd.substr(0, 7) !== "Console") {
				Console.log(">> " + cmd);
				Console.log(result)
			}
		} catch (e) {
			Console.log(e)
		}
	};
	Console.getConsoleDiv = function () {
		var consoleWrapDiv = z.getDom("_Console");
		if (!consoleWrapDiv) {
			consoleWrapDiv = document.createElement("div");
			consoleWrapDiv.id = "_Console";
			consoleWrapDiv.className = "console-warp";
			consoleWrapDiv.style.cssText = "position:absolute; z-index:9999; left:0%;top:" + Math.max(document.documentElement.scrollTop, document.body.scrollTop) + "px; width:62%; background-color:#fff; border:1px solid #359; opacity:0.9; filter:alpha(opacity=90); padding:4px;";
			consoleWrapDiv.innerHTML = '<div id="_ConsoleHead"; style="background-color:#cde; height:20px; color:#000; font-size:12px; line-height:20px; cursor:move;"><a style="color:#123; float:right; text-decoration:none; margin:1px 2px 0;" href="javascript:Zving.Console.hide();void(0);">[隐藏]</a><a style="color:#123; float:right; text-decoration:none; margin:1px 2px 0;" href="javascript:Zving.Console.clear();void(0);">[清空]</a><a style="color:#123; float:right; text-decoration:none; margin:1px 2px 0;" href="javascript:void(0);" onclick="javascript:this.innerHTML=Zving.Console.switchDebugMode()?\'[调试模式:开]\':\'[调试模式:关]\';void(0);">[' + (Console.debug ? "调试模式:开" : "调试模式:关") + ']</a></div><div id="_ConsoleBody"; style="font-size:12px; line-height:1.2;color:#333; width:100%; max-height:200px; overflow:auto;"></div><div id="_ConsoleFoot" style="font-size:12px; line-height:2; color:#333; border-top:1px solid #ccc">&gt;&gt; <input type="text" id="_ConsoleInput" style="width:94%" /></div>';
			document.body.appendChild(consoleWrapDiv);
			var consoleDivHead = z.getDom("_ConsoleHead");
			var consoleDivBody = z.getDom("_ConsoleBody");
			if (z.isIE6) {
				consoleDivBody.style.height = "200px"
			}
			var consoleDivFoot = z.getDom("_ConsoleFoot");
			if (z.SimpleDrag) {
				new z.SimpleDrag({
					dragEl : consoleWrapDiv,
					handleEl : consoleDivHead
				})
			}
			z.getDom("_ConsoleInput").onkeydown = Console.inputKeydown;
			Console.consoleDiv = consoleWrapDiv;
			Console.consoleDivBody = consoleDivBody
		}
		return Console.consoleDiv
	};
	Console.formatArgs = function () {
		var content = [];
		for (var i = 0, len = arguments.length; i < len; i++) {
			content.push(Console.constr(arguments[i], false, false, true))
		}
		return content.join(" ")
	};
	Console.addLine = function (html) {
		var newItem = document.createElement("div");
		newItem.style.cssText = "border-top:1px solid #cde; padding:3px;font-family:'Courier New'; font-size:13px; background-color:#fff";
		newItem.innerHTML = html;
		var consoleWrapDiv = Console.getConsoleDiv();
		var consoleDivBody = Console.consoleDivBody;
		while (consoleDivBody.childNodes.length > Console.max) {
			consoleDivBody.removeChild(firstChild)
		}
		consoleDivBody.appendChild(newItem);
		return newItem
	};
	Console.scroll = function () {
		if (!Console.debug) {
			return false
		}
		var consoleWrapDiv = Console.getConsoleDiv();
		consoleWrapDiv.style.display = "";
		var ConsoleDivTop = parseInt(consoleWrapDiv.style.top.replace(/\D/gi, ""), 10) || 0;
		if (ConsoleDivTop < Math.max(document.documentElement.scrollTop, document.body.scrollTop) || ConsoleDivTop > Math.max(document.documentElement.scrollTop, document.body.scrollTop) + (document.compatMode === "BackCompat" ? document.body.clientHeight : document.documentElement.clientHeight)) {
			consoleWrapDiv.style.top = Math.max(document.documentElement.scrollTop, document.body.scrollTop) + "px"
		}
		var consoleDivBody = Console.consoleDivBody;
		consoleDivBody.scrollTop = 9999
	};
	Console.stack = function (level, agrs) {
		if (Console.queue.length >= Console.max) {
			Console.queue.splice(0, Console.queue.length - 3 * Math.floor(Console.max / 4))
		}
		Console.queue.push({
			level : level,
			agrs : agrs
		});
		++Console.counters[level]
	};
	Console.log = function () {
		if (!Console.debug) {
			return
		}
		if (Console.silence || !document.body || Console.getConsoleDiv().style.display === "none") {
			Console.stack("log", arguments)
		} else {
			var html = Console.formatArgs.apply(window, arguments);
			var newItem = Console.addLine(html);
			Console.scroll()
		}
	};
	Console.warn = function () {
		if (!Console.debug) {
			return
		}
		if (Console.silence || !document.body || Console.getConsoleDiv().style.display === "none") {
			Console.stack("warn", arguments)
		} else {
			var html = Console.formatArgs.apply(window, arguments);
			var newItem = Console.addLine(html);
			newItem.style.backgroundColor = "#DDFFFF";
			Console.scroll()
		}
	};
	Console.error = function () {
		if (!Console.debug) {
			return
		}
		if (Console.silence || !document.body || Console.getConsoleDiv().style.display === "none") {
			Console.stack("error", arguments)
		} else {
			var html = Console.formatArgs.apply(window, arguments);
			var newItem = Console.addLine(html);
			newItem.style.backgroundColor = "#FFFFDD";
			Console.scroll()
		}
	};
	Console.info = function () {
		if (!Console.debug) {
			return
		}
		if (Console.silence || !document.body || Console.getConsoleDiv().style.display === "none") {
			Console.stack("info", arguments)
		} else {
			var html = Console.formatArgs.apply(window, arguments);
			var newItem = Console.addLine(html);
			Console.scroll()
		}
	};
	Console.show = function () {
		Console.silence = false;
		var consoleWrapDiv = Console.getConsoleDiv();
		consoleWrapDiv.style.display = "";
		while (Console.queue.length > 0) {
			Console[Console.queue[0].level].apply(window, Console.queue[0].agrs);
			Console.queue.shift()
		}
		Console.queue.length = 0;
		var consoleInput = z.getDom("_ConsoleInput");
		consoleInput.focus()
	};
	Console.hide = function () {
		Console.silence = true;
		z.getDom("_Console").style.display = "none"
	};
	Console.clear = function () {
		z.getDom("_ConsoleBody").innerHTML = "";
		Console.cache.length = 0;
		Console.queue.length = 0
	};
	Console.switchDebugMode = function (status) {
		if (status === undefined) {
			Console.debug = !Console.debug
		} else {
			Console.debug = status
		}
		if (Console.debug) {
			Cookie.set("console_debug", "true", 60 * 60 * 24 * 100);
			Console.log("调试模式开启。")
		} else {
			Cookie.set("console_debug", "false", 60 * 60 * 24 * 100);
			Console.addLine("调试模式关闭。");
			Console.scroll();
			window.setTimeout(function () {
				Console.hide();
				Console.clear()
			}, 1000)
		}
		return Console.debug
	};
	Console.toggleVisible = function () {
		if (z.getDom("_Console") && z.getDom("_Console").style.display !== "none") {
			Console.hide()
		} else {
			Console.show()
		}
	};
	Console.attachOnkeyup = function (event) {
		if (event.altKey && event.shiftKey && event.ctrlKey) {
			if (event.keyCode === 68) {
				Console.toggleVisible()
			}
		}
	};
	Console.notify = function () {
		var counters = Console.counters;
		if (counters.error + counters.warn + counters.info + counters.log) {
			var msg = ["Logged Errors:", counters.error, "Warnings:", counters.warn, "Info:", counters.info, "Log:", counters.log].join(" ");
			if (counters.error) {
				msg = "*** " + msg
			}
			Zving.rootWin.status = msg
		}
		if (Console.status === false && timer) {
			window.clearInterval(timer);
			timer = null
		}
	};
	timer = window.setInterval(Console.notify, 1000);
	if (window.console && window.console.log && Console.useBrowerConsole === true) {
		Console = window.console
	} else {
		if (Console.debug && Console.debugWindowError) {
			window.onerror = function (message, file, line) {
				if (z.getDom("_Console") && z.getDom("_Console").style.display === "none") {
					return
				}
				Console.error("脚本错误：行:" + line + "  错误:" + message + "  文件:" + file)
			}
		}
		$(document).on("keyup", Console.attachOnkeyup);
		$(window).on("unload", function () {
			$(document).off("keyup", Console.attachOnkeyup)
		})
	}
	z.Console = Console
})();
(function () {
	var c = window.Zving,
	a = {};
	a.Supported = "en,zh-cn,zh-tw";
	a.DefaultLanguage = "zh-cn";
	a.Map = {};
	a.get = function (d) {
		return a.Map[d]
	};
	a.getCurrentLang = function () {
		var d = c.Cookie.get("_ZVING_LANGUAGE");
		if (d) {
			return d
		}
		d = navigator.language ? navigator.language : navigator.browserLanguage;
		d = d ? d : navigator.systemLanguage;
		if (d) {
			d = d.replace("_", "-").toLowerCase();
			if (d.startsWith("en-")) {
				d = "en"
			}
			if (d.startsWith("ar-")) {
				d = "ar"
			}
			if (d.startsWith("de-")) {
				d = "de"
			}
			if (d.startsWith("es-")) {
				d = "es"
			}
			if (d.startsWith("fr-")) {
				d = "fr"
			}
			if (d.startsWith("pt-")) {
				d = "pt"
			}
			if (d.startsWith("ru-")) {
				d = "ru"
			}
			if (d.startsWith("ja-")) {
				d = "ja"
			}
			if (d.startsWith("ko-")) {
				d = "ko"
			}
			if (d.startsWith("it-")) {
				d = "it"
			}
			if (d.startsWith("zh-")) {
				if (d != "zh-cn") {
					d = "zh-tw"
				} else {
					d = "zh-cn"
				}
			}
			return d
		}
		return a.DefaultLanguage
	};
	a.onLangButtonClick = function (f) {
		var e = new Dialog({
				title : a.get("LangDialog.Title"),
				url : c.CONTEXTPATH + "Framework/Components/LangEditDialog.zhtml?ID=" + f,
				width : 710,
				height : 200,
				onOk : function () {
					c.Node.setValue(f + "_I18N", $DW.getLangString());
					c.Node.setValue(f, $DW.getCurrentLangValue());
					$D.close()
				}
			});
		e.show()
	};
	var b = a.getCurrentLang();
	if (("," + a.Supported + ",").indexOf("," + b + ",") < 0) {
		c.Console.log("Zving Frmaework can't support language:" + b);
		b = a.DefaultLanguage
	}
	c.Lang = a;
	c.importCss("Lang/" + b + ".css");
	if (window == c.rootWin) {
		c.importJs("Lang/" + b + ".js")
	} else {
		c.Lang.Map = c.rootWin.Zving.Lang.Map
	}
})();
(function () {
	var f = window.Zving,
	a = f.elCache,
	b = {},
	e;
	b.idSeed = {};
	e = new f.DataCollection();
	b.add = b.register = function (h, g) {
		if (g && typeof(h) == "string") {
			e.add(h, g)
		} else {
			e.add(h.id, h)
		}
	};
	b.remove = b.unregister = function (g) {
		e.remove(g)
	};
	b.getById = b.get = function (g) {
		return e.get(g)
	};
	b.getByDom = function (j, g) {
		var h,
		k = g ? (g.tagName ? g : g.el) : document.body;
		while (j !== k) {
			if (j.compId) {
				h = b.get(j.compId);
				if (h && !h.delegated) {
					if (g) {
						if (h.container === g) {
							return h
						}
					} else {
						return h
					}
				}
			}
			j = j.parentNode
		}
		return null
	};
	b._unload = function () {
		var h,
		g;
		for (h in e.map) {
			g = e.map[h];
			if (g && g.destroy && !g.isDestroyed) {
				g.destroy()
			}
			e.remove(h)
		}
	};
	b.initComponent = function (h, g) {
		g = g || h.getAttribute("ztype");
		if (!g) {
			return
		}
		switch (g.toLowerCase()) {
		case "input":
			if (f.UI) {
				f.UI.initCtrl(h)
			}
			break;
		case "verify":
			if (f.Verify) {
				f.Verify.initCtrl(h)
			}
			break;
		case "date":
		case "time":
		case "datetime":
			if (f.DateTime) {
				f.DateTime.initCtrl(h)
			}
			break;
		case "select":
			if (f.Selector) {
				f.Selector.initCtrl(h)
			}
			break;
		default:
		}
	};
	b.initChildren = function (m) {
		m = f.getDom(m);
		var j,
		h,
		k,
		l;
		j = m.getElementsByTagName("input");
		h = m.getElementsByTagName("textarea");
		var n;
		for (k = 0, len = j.length; k < len; k++) {
			l = j[k];
			if (f.UI) {
				f.UI.initCtrl(l)
			}
			var g = l.getAttribute("ztype");
			if (g) {
				b.initComponent(l, g)
			}
			n = l.getAttribute("verify");
			if (n) {
				b.initComponent(l, "verify")
			}
		}
		for (k = 0, len = h.length; k < len; k++) {
			l = h[k];
			if (f.UI) {
				f.UI.initCtrl(l)
			}
			n = l.getAttribute("verify");
			if (n) {
				b.initComponent(l, "verify")
			}
		}
	};
	var d = {};
	var c = {};
	f.PluginManager = {
		registerPlugin : function (h, g) {
			c[h] = g;
			g.ptype = h
		},
		createPlugin : function (h, j) {
			var g = c[h.ptype || j];
			if (g.init) {
				return g
			} else {
				return new g(h)
			}
		}
	};
	f.Page.onReady(function () {
		b.initChildren(document.body)
	}, 1);
	f.ComponentManager = b;
	f.compCache = e
})();
(function () {
	var a = window.Zving;
	a.UICompBase = function (c) {
		this.defaultConfig = this.defaultConfig || {
			dom : {},
			bubbleEvents : []
		};
		c = c || {};
		if (a.isElement(c) || a.isElement(c.dom) || typeof c == "string") {
			c = this.htmlParser(c)
		}
		this.initialConfig = this.initialConfig || c;
		a.extra(this, c, this.defaultConfig);
		if (c.el) {
			this.el = a.getDom(c.el);
			this.ownerDocument = this.el.ownerDocument;
			this.ownerWindow = this.ownerDocument.parentWindow;
			this.$el = $(this.el);
			if (!this.el) {
				a.Console.error(this.ctype + "- 找不到参数" + c.el + "对应的页面元素！")
			}
			this.el.compId = this.id = a.id(this.el);
			this.rendered = true
		}
		this.getId();
		a.Observable(this);
		this.addEvents("disable", "enable", "beforeshow", "show", "beforehide", "hide", "beforerender", "render", "afterrender", "beforedestroy", "destroy", "resize", "move");
		if (this.statable) {
			a.Statable(this)
		}
		this.initComponent();
		if (this.plugins) {
			if (a.isArray(this.plugins)) {
				for (var d = 0, b = this.plugins.length; d < b; d++) {
					this.plugins[d] = this.initPlugin(this.plugins[d])
				}
			} else {
				this.plugins = this.initPlugin(this.plugins)
			}
		}
		if (this.renderTo) {
			this.render(this.renderTo);
			delete this.renderTo
		}
		a.ComponentManager.register(this);
		if (this.autoShow) {
			this.show()
		}
	};
	a.UICompBase.prototype = {
		ctype : "UICompBase",
		id : null,
		disabled : false,
		hidden : false,
		floating : false,
		autoShow : false,
		rendered : false,
		cls : "",
		style : null,
		autoEl : {
			tag : "div"
		},
		disabledClass : "z-disabled",
		hiddenClass : "z-hidden",
		renderTpl : '<div id="{id}-body"></div>',
		tpl : null,
		ctCls : null,
		baseCls : null,
		cmpCls : null,
		statable : false,
		initPlugin : function (b) {
			if (b.ptype && !a.isFunction(b.init)) {
				b = a.PluginManager.createPlugin(b)
			} else {
				if (a.isString(b)) {
					b = a.PluginManager.createPlugin({
							ptype : b
						})
				}
			}
			b.init(this);
			return b
		},
		initComponent : function () {
			if (this.listeners) {
				this.on(this.listeners);
				delete this.listeners
			}
			if (this.bubbleEvents) {
				this.enableBubble(this.bubbleEvents);
				delete this.bubbleEvents
			}
		},
		htmlParser : function (b) {
			return {
				el : b
			}
		},
		beforerender : function () {},
		render : function (c, b) {
			c = a.getDom(c);
			var d = this;
			this.beforerender();
			if (this.rendered || this.fireEvent("beforerender", this) === false) {
				return this
			}
			if (!c) {
				if (this.el) {
					c = this.el.parentNode
				} else {
					c = this.container || this.parentEl || document.body
				}
			}
			this.ownerDocument = c.ownerDocument;
			this.ownerWindow = c.ownerDocument.parentWindow;
			this.container = this.ownerWindow.Zving.getDom(c);
			if (this.ctCls) {
				a.Node.addClass(this.container, this.ctCls);
				delete this.ctCls
			}
			this.onRender(this.container, b);
			this.rendered = true;
			if (this.autoShow) {
				a.Node.removeClass(this.el, this.hiddenClass)
			}
			if (this.cls) {
				a.Node.addClass(this.el, this.cls);
				delete this.cls
			}
			if (this.overCls) {
				a.Node.hover(this.el, function (e) {
					if (!e.disabled) {
						a.Node.addClass(e, this.overCls)
					}
				}, function (e) {
					a.Node.removeClass(e, this.overCls)
				})
			}
			this.fireEvent("render", this);
			this.initContent();
			this.afterRender(this.container);
			this.fireEvent("afterrender", this);
			if (this.hidden) {
				a.Node.addClass(this.el, this.hiddenClass)
			}
			if (this.disabled) {
				this.disable(true)
			}
			return this
		},
		updateContent : function (c, e, b) {
			var d = this.getContentEl();
			if (this.tpl && typeof c !== "string") {
				d.innerHTML = a.String.tmpl(this.tpl, c || {})
			} else {
				var f = a.isObject(c) ? a.Dom.createHtml(c) : c;
				a.Node.update(d, f, e, b)
			}
		},
		applyToMarkup : function (b) {
			this.el = a.getDom(b);
			this.container = this.el.parentNode;
			this.ownerDocument = this.container.ownerDocument;
			this.ownerWindow = this.ownerDocument.parentWindow;
			this.$el = this.ownerWindow.$(this.el);
			this.render(this.el.parentNode)
		},
		onRender : function (d, b) {
			var h,
			e;
			if (!d) {
				d = this.container || document.body
			} else {
				this.ownerDocument = d.ownerDocument;
				this.ownerWindow = d.ownerDocument.parentWindow
			}
			var g = this.ownerDocument,
			f = this.ownerWindow;
			if (b !== undefined && b !== null) {
				if (a.isNumber(b)) {
					b = d.childNodes[b]
				} else {
					b = this.ownerWindow.Zving.getDom(b)
				}
			}
			if (!this.el && this.autoEl) {
				if (this.autoEl) {
					if (typeof this.autoEl == "string" && !/<|&#?\w+;/.test(this.autoEl)) {
						this.el = g.createElement(this.autoEl)
					} else {
						h = g.createElement("div");
						e = this.initRenderData();
						var c = typeof this.autoEl == "string" ? this.autoEl : a.Dom.createHtml(this.autoEl);
						h.innerHTML = a.String.tmpl(c, e);
						this.el = h.firstChild
					}
				}
				if (!this.el.id) {
					this.el.compId = this.el.id = this.getId()
				}
			}
			if (this.el) {
				if (b) {
					d.insertBefore(this.el, b)
				} else {
					d.appendChild(this.el)
				}
				if (h) {
					a.Dom.removeNode(h);
					h = null
				}
			}
			this.$el = this.ownerWindow.$(this.el);
			if (this.baseCls) {
				a.Node.addClass(this.el, this.baseCls)
			}
			if (this.cmpCls) {
				a.Node.addClass(this.el, this.cmpCls);
				delete this.cmpCls
			}
			if (this.style) {
				if (typeof this.style == "string") {
					this.el.style.cssText = this.style
				} else {
					a.extra(this.el.style, this.style)
				}
				delete this.style
			}
			if (this.renderTpl) {
				e = this.initRenderData();
				this.el.innerHTML = a.String.tmpl(this.renderTpl, e)
			}
		},
		initContent : function () {
			var b = this.getContentEl();
			if (this.html) {
				b.innerHTML = this.html;
				delete this.html
			}
			if (this.contentEl) {
				var c = a.getDom(this.contentEl);
				a.Node.removeClass(this.hiddenClass);
				b.appendChild(c)
			}
			if (this.tpl) {
				b.innerHTML = a.String.tmpl(this.tpl, this.data || {});
				delete this.data
			}
		},
		afterRender : function (b) {
			if (this.height || this.width) {
				this.setSize(this.width, this.height)
			}
			if (this.x !== undefined || this.y !== undefined) {
				this.setPosition(this.x, this.y)
			}
			this.initDom()
		},
		applyRenderSelectors : function () {
			var c = this.domSelectors || {},
			d = this.el,
			b;
			for (b in c) {
				if (!c.hasOwnProperty(b)) {
					continue
				}
				this[b] = $.find(c[b], d)
			}
		},
		initDom : function () {
			this.applyRenderSelectors()
		},
		onResize : function () {},
		setSize : function (c, b) {
			if (this.minWidth && c < this.minWidth) {
				c = this.minWidth
			}
			if (this.maxWidth && c > this.maxWidth) {
				c = this.maxWidth
			}
			if (this.minHeight && b < this.minHeight) {
				b = this.minWidth
			}
			if (this.maxHeight && b > this.maxHeight) {
				b = this.maxHeight
			}
			if (!this.rendered) {
				this.width = (c !== undefined) ? c : this.width;
				this.height = (b !== undefined) ? b : this.height;
				return this
			}
			a.Node.setSize(this.el, c, b);
			this.onResize(c, b);
			this.width = c;
			this.height = b;
			this.fireEvent("resize", this, c, b);
			return this
		},
		setPosition : function (b, c) {
			if (!this.rendered) {
				this.x = (b !== undefined) ? b : this.x;
				this.y = (c !== undefined) ? c : this.y;
				return this
			}
			a.Node.setPosition(this.el, b, c);
			this.onPosition(b, c);
			this.x = b;
			this.y = c;
			this.fireEvent("move", this, b, c);
			return this
		},
		onPosition : function () {},
		getSize : function () {
			return a.Node.getSize(this.el)
		},
		getId : function () {
			if (!this.id) {
				var c = this.ctype.toLocaleLowerCase(),
				b = a.rootWin.Zving.ComponentManager.idSeed;
				if (b[c] === undefined) {
					b[c] = 0
				}
				this.id = "z-" + c + "-" + (++b[c])
			}
			return this.id
		},
		getItemId : function () {
			return this.itemId || this.getId()
		},
		getEl : function () {
			if (!this.el) {
				this.el = (this.ownerWindow || window).Zving.getDom(this.id)
			}
			return this.el
		},
		getTargetEl : function () {
			return this.target || this.el
		},
		getContentEl : function () {
			return this.ownerWindow.Zving.getDom(this.id + "_body") || this.el
		},
		getBodyEl : function () {
			return this.ownerWindow.Zving.getDom(this.id + "_body") || this.el
		},
		getContainerEl : function () {
			return this.container || this.parentEl || this.el.parentNode
		},
		getOwnerCt : function () {
			return this.ownerCt
		},
		initRenderData : function () {
			this.renderData = this.renderData || {};
			return a.extraIf(this.renderData, {
				id : this.id,
				baseCls : this.baseCls,
				cmpCls : this.cmpCls,
				cls : this.cls
			})
		},
		focus : function (d, c) {
			if (c) {
				this.focusTask = new a.Util.DelayedTask(this.focus, this, [d, false]);
				this.focusTask.delay(a.isNumber(c) ? c : 16);
				return
			}
			if (this.rendered && !this.isDestroyed) {
				var b = this.getFocusEl ? this.getFocusEl() : this.el;
				b.focus();
				if (d === true) {
					b.select()
				}
			}
			return this
		},
		blur : function () {
			if (this.rendered) {
				var b = this.getFocusEl ? this.getFocusEl() : this.el;
				b.blur()
			}
			return this
		},
		disable : function (b) {
			if (this.rendered) {
				a.Node.addClass(this.el, this.disabledClass);
				a.Node.disable(this.el, this.maskOnDisable ? true : false);
				this.el.disabled = true
			}
			this.disabled = true;
			if (b !== true) {
				this.fireEvent("disable", this)
			}
			return this
		},
		enable : function (b) {
			if (this.rendered) {
				a.Node.removeClass(this.el, this.disabledClass);
				this.el.disabled = false
			}
			this.disabled = false;
			if (b !== true) {
				this.fireEvent("enable", this)
			}
			return this
		},
		isDisabled : function () {
			return this.disabled
		},
		setDisabled : function (b) {
			return this[b ? "disable" : "enable"]()
		},
		show : function () {
			if (this.fireEvent("beforeshow", this) === false) {
				return this
			}
			this.hidden = false;
			if (this.autoRender) {
				this.render(a.isBoolean(this.autoRender) ? (document.body || document.documentElement) : this.autoRender)
			}
			if (this.rendered) {
				a.Node.removeClass(this.el, this.hiddenClass);
				if (this.el.currentStyle.display == "none") {
					a.Node.show(this.el)
				}
				if (this.el.currentStyle.visibility == "hidden") {
					this.el.style.visibility = ""
				}
			}
			this.fireEvent("show", this);
			return this
		},
		hide : function () {
			if (this.fireEvent("beforehide", this) === false) {
				return this
			}
			this.hidden = true;
			if (this.rendered) {
				a.Node.addClass(this.el, this.hiddenClass);
				if (this.el.currentStyle.display != "none") {
					a.Node.hide(this.el)
				}
			}
			this.fireEvent("hide", this);
			return this
		},
		setVisible : function (b) {
			return this[b ? "show" : "hide"]()
		},
		isHidden : function () {
			return this.hidden
		},
		isVisible : function () {
			return this.rendered && a.Node.isVisible(this.el)
		},
		addClass : function (b) {
			if (this.el) {
				a.Node.addClass(this.el, b)
			} else {
				this.cls = this.cls ? this.cls + " " + b : b
			}
		},
		removeClass : function (b) {
			if (this.el) {
				a.Node.removeClass(this.el, b)
			} else {
				if (this.cls) {
					this.cls = this.cls.split(" ").remove(b).join(" ")
				}
			}
			return this
		},
		cloneConfig : function (c) {
			c = c || {};
			var d = c.id || a.id();
			var b = a.extra(c, this.initialConfig);
			b.id = d;
			return b
		},
		findParentBy : function (b) {
			var c = this.ownerCt;
			while (c && !b(c, this)) {
				c = c.ownerCt
			}
			return c || null
		},
		findParentByType : function (b) {
			return a.isFunction(b) ? this.findParentBy(function (c) {
				return c.constructor === ctype
			}) : this.findParentBy(function (c) {
				return c.constructor.ctype === ctype
			})
		},
		clearListeners : function () {
			var c = this.events,
			d;
			for (var b in c) {
				if (c.hasOwnProperty(b)) {
					d = c[b];
					if (d.isEvent) {
						d.clearListeners()
					}
				}
			}
		},
		getBubbleTarget : function () {
			return this.ownerCt
		},
		isFloating : function () {
			return this.floating
		},
		isDraggable : function () {
			return !!this.draggable
		},
		isDroppable : function () {
			return !!this.droppable
		},
		destroy : function (c) {
			if (this.isDestroyed === true) {
				return
			}
			if (this.fireEvent("beforedestroy", this) === false) {
				return
			}
			this.destroying = true;
			if (this.beforeDestroy) {
				this.beforeDestroy()
			}
			if (this.ownerCt && this.ownerCt.remove) {
				this.ownerCt.remove(this, false);
				delete this.ownerCt
			}
			if (this.rendered && this.el) {
				var b = this.el.ownerDocument.parentWindow.Zving;
				if (c || this.removeDomOnDestroy) {
					b.Dom.removeNode(this.el)
				}
			}
			if (this.focusTask && this.focusTask.cancel) {
				this.focusTask.cancel()
			}
			if (this.onDestroy) {
				this.onDestroy()
			}
			a.ComponentManager.unregister(this);
			this.fireEvent("destroy", this);
			if (this.clearListeners) {
				this.clearListeners()
			}
			if (this.deleteMembers) {
				this.deleteMembers("container", "defaultConfig", "dom", "el", "$el", "events", "initialConfig", "ownerDocument", "ownerWindow")
			}
			this.destroying = false;
			this.isDestroyed = true
		},
		deleteMembers : function () {
			var c = arguments;
			for (var d = 0, b = c.length; d < b; ++d) {
				delete this[c[d]]
			}
		},
		beforeDestroy : function () {},
		onDestroy : function () {}

	}
})();
(function () {
	var e = window.Zving,
	b = e.isIE,
	a = e.isGecko,
	j = e.Page,
	c = e.Lang,
	g = e.CONTEXTPATH,
	d;
	var h = e.Cookie.get("zcms_skin");
	if (!h) {
		h = "zvingClassic"
	}
	e.importCss("Components/DialogSkins/" + h + ".css");
	function f(k, l) {
		if (/^\/|^\w+\:\/\/|^javascript\:/.test(k)) {
			return k
		} else {
			if (l) {
				return e.CONTEXTPATH + "/" + k
			} else {
				var m = location.pathname;
				m = m.substring(0, m.lastIndexOf("/"));
				while (k.indexOf("../") >= 0) {
					k = k.substring(3);
					m = m.substring(0, m.lastIndexOf("/"))
				}
				if (b && location.protocol == "file:") {
					m = "file://" + m
				}
				return m + "/" + k
			}
		}
	}
	d = function (k) {
		this.defaultConfig = {
			okText : c.get("Common.OK"),
			cancelText : c.get("Common.Cancel"),
			buttons : []
		};
		if (!(this instanceof d)) {
			return new d(k)
		}
		if (k && k.id && d.list[k.id]) {
			e.Console.warn("id为 " + k.id + " 的dialog已存在。");
			return d.list[k.id]
		}
		if (typeof k == "string") {
			if (arguments.length == 4) {
				k = {
					title : arguments[0],
					url : arguments[1],
					width : arguments[2],
					height : arguments[3]
				}
			} else {
				if (/^https?:\/\/|^javascript\:|\w+\.\w+((\?[\w=&+]*)*(#[\w=&+]*)*)$/.test(k)) {
					k = {
						url : k
					}
				} else {
					if (/^\w+\d*$/.test(k)) {
						k = {
							id : k
						}
					} else {
						k = {
							html : k
						}
					}
				}
			}
		}
		d.superclass.constructor.call(this, k)
	};
	d.isHideScrollbar = false;
	d.htmlTemplate = '<div class="aui_outer"><table class="aui_border"><tbody><tr><td class="aui_nw"></td><td class="aui_n"></td><td class="aui_ne"></td></tr><tr><td class="aui_w"></td><td class="aui_c"><div class="aui_inner"><table class="aui_dialog"><tbody><tr><td class="aui_header"><div class="aui_titleBar"><div class="aui_title"></div><a class="aui_close" href="javascript:/*close*/;">\xd7</a></div></td></tr><tr><td><div class="aui_icon"><div class="aui_iconBg"></div></div><div class="aui_main"><div class="aui_content"></div></div></td></tr><tr><td class="aui_footer"><div class="aui_buttons"></div></td></tr></tbody></table></div></td><td class="aui_e"></td></tr><tr><td class="aui_sw"></td><td class="aui_s"></td><td class="aui_se"></td></tr></tbody></table></div>';
	d.buttonTemplate = '<button class="z-dlg-button {cls}" id="{id}" onclick="{fn}">{text}</button>';
	e.Class.extend(d, e.UICompBase, {
		id : null,
		ctype : "Dialog",
		baseCls : "z-dialog",
		url : "",
		title : "",
		width : null,
		height : null,
		minWidth : 200,
		minHeight : 60,
		top : "50%",
		left : "50%",
		onOk : null,
		onCancel : null,
		okText : c.get("Common.OK"),
		cancelText : c.get("Common.Cancel"),
		OKClass : "z-dialog-okbutton",
		cancelClass : "z-dialog-cancelbutton",
		onInit : null,
		onReady : null,
		onLoad : null,
		onClose : null,
		icon : null,
		message : "",
		showButtonRow : true,
		animator : true,
		resizable : false,
		modal : true,
		animateTarget : null,
		follow : null,
		closable : true,
		draggable : true,
		esc : true,
		autoClose : null,
		closeTip : "? 秒后自动关闭",
		padding : "20px 25px",
		html : '<div class="aui_loading"><span>loading..</span></div>',
		autoRender : e.rootDoc.body,
		zIndex : 10100,
		fixed : !e.isMobile && !e.isIE6,
		renderTpl : d.htmlTemplate,
		bottonTpl : d.buttonTemplate,
		highlightButtonCls : "aui_state_highlight",
		hidden : true,
		removeDomOnDestroy : true,
		autoShow : false,
		contentElClass : "aui_content",
		initComponent : function () {
			this.addEvents("move", "beforeresize", "activate", "deactivate", "beforeclose", "close");
			d.superclass.initComponent.apply(this);
			this.buttons = this.buttons || [];
			if (this.hidden === false) {
				this.hidden = true;
				this.show()
			}
			this.opener = window;
			if (this.url) {
				window.$D = this
			}
		},
		onRender : function (p, m) {
			this.beforeRender();
			d.superclass.onRender.call(this, p, m);
			this.$el.css("position", this.fixed ? "fixed" : "absolute");
			var q = this.ownerWindow.Zving.getDom("z-dialog-proxy");
			if (!q) {
				q = e.Dom.createNode({
						id : "z-dialog-proxy",
						className : "z-dlg-proxy"
					}, this.ownerDocument).appendTo(this.ownerDocument.body)
			}
			this.proxy = this.ownerWindow.Zving.getDom(q);
			this.$proxy = this.ownerWindow.$(q);
			if (this.modal) {
				var o = this.ownerWindow.Zving.getDom("_DialogShim");
				if (!o) {
					o = this.ownerWindow.Zving.Dom.createNode({
							id : "_DialogShim",
							cls : "z-dlg-shim aui_state_lock"
						}, this.ownerDocument).appendTo(this.ownerDocument.body);
					if (e.isIE6) {
						var n = "Math.max(document.documentElement.scrollLeft, document.body.scrollLeft)",
						l = "Math.max(document.documentElement.scrollTop, document.body.scrollTop)",
						k = "(document.documentElement)";
						o.style.position = "absolute";
						o.style.setExpression("left", "eval(" + n + ') + "px"');
						o.style.setExpression("top", "eval(" + l + ') + "px"')
					} else {
						o.style.position = "fixed"
					}
					o.style.position = this.fixed ? "fixed" : "absolute"
				}
				this.shim = this.ownerWindow.Zving.getDom(o);
				this.$shim = this.ownerWindow.$(o)
			}
		},
		beforeRender : function () {},
		initContent : function () {
			var k = this.getContentEl();
			if (this.html) {
				k.innerHTML = this.html;
				delete this.html
			}
			if (this.contentEl) {
				this.updateContent()
			}
			if (this.tpl) {
				k.innerHTML = e.String.tmpl(this.tpl, this.data || {});
				delete this.data
			}
		},
		updateContent : function (k, o, n) {
			var r = this.getContentEl();
			if (k && k.nodeType == 1) {
				this.contentEl = k;
				var l = this.ownerWindow.Zving.getDom(this.contentEl);
				var s = l.style.display,
				m = l.previousSibling,
				q = l.nextSibling,
				u = l.parentNode;
				var t = this;
				this._elemBack = function () {
					if (m && m.parentNode) {
						m.parentNode.insertBefore(l, m.nextSibling)
					} else {
						if (q && q.parentNode) {
							q.parentNode.insertBefore(l, q)
						} else {
							if (u) {
								u.appendChild(l)
							}
						}
					}
					l.style.display = s;
					t._elemBack = null
				};
				e.Node.removeClass(l, this.hiddenClass);
				r.innerHTML = "";
				r.appendChild(l)
			} else {
				if (this.tpl && typeof k !== "string") {
					r.innerHTML = e.String.tmpl(this.tpl, k || {})
				} else {
					var p = e.isObject(k) ? e.Dom.createHtml(k) : k;
					e.Node.update(r, p, o, n)
				}
			}
		},
		afterRender : function () {
			this.dom = {
				wrap : this.el,
				header : true,
				title : true,
				main : true,
				icon : true,
				iconBg : true,
				content : true,
				footer : true,
				buttons : true,
				close : true
			};
			var m = this.el.getElementsByTagName("*"),
			k = m.length;
			for (var l = 0; l < k; l++) {
				var n = m[l].className.split("aui_")[1];
				if (n) {
					n = n.split(" ")[0];
					if (n && this.dom[n]) {
						this.dom[n] = this.ownerWindow.Zving.getDom(m[l]);
						this.dom["$" + n] = this.ownerWindow.$(m[l])
					}
				}
			}
			if (this.closable === false) {
				this.dom.$close.hide()
			}
			if (this.icon) {
				this.dom.iconBg.style.backgroundImage = "url(" + e.JSLIBPATH + "Images/" + this.icon + ".gif)"
			} else {
				this.dom.$icon.hide()
			}
			this.dom.$title.css("cursor", this.draggable ? "move" : "auto");
			this.dom.$content.css("padding", this.padding);
			this.setTitle(this.title);
			this.initIframe();
			this.initButtons();
			this.setSize(this.width, this.height);
			if (this.autoClose) {
				this.time(this.autoClose)
			}
			if (this.follow) {
				this.followTo(this.follow)
			} else {
				this.setPosition(this.left, this.top)
			}
			this.initEvents();
			this.initResizable();
			this.initDraggable();
			if (this.onInit) {
				this.onInit.call(this, window)
			}
		},
		_toNumber : function (k, m) {
			if (!k && k !== 0 || typeof k === "number") {
				return k
			}
			var l = k.length - 1;
			if (k.lastIndexOf("px") === l) {
				k = parseInt(k, 10)
			} else {
				if (k.lastIndexOf("%") === l) {
					k = parseInt(m * k.split("%")[0] / 100, 10)
				}
			}
			return k
		},
		setPosition : function (u, t) {
			if (!this.rendered) {
				this.x = (u !== undefined) ? u : this.x;
				this.y = (t !== undefined) ? t : this.y;
				return this
			}
			var n = e.isIE6 ? false : this.fixed,
			r = e.isIE6 && this.fixed,
			z = e.rootWin.document,
			k = e.Dom.getViewport(e.rootWin),
			s = k.width,
			m = k.height,
			o = Math.max(z.documentElement.scrollLeft, z.body.scrollLeft),
			A = Math.max(z.documentElement.scrollTop, z.body.scrollTop),
			q = n ? 0 : o,
			l = n ? 0 : A,
			w = Math.max(z.documentElement.scrollWidth, z.body.scrollWidth),
			p = Math.max(z.documentElement.scrollHeight, z.body.scrollHeight);
			if (u || u === 0) {
				this._x = u.toString().indexOf("%") !== -1 ? u : null;
				u = this._toNumber(u, s - this.el.offsetWidth);
				if (typeof u == "number") {
					u = r ? (u += o) : u + q;
					this.$el.css("left", Math.max(u, q) + "px")
				} else {
					if (typeof u == "string") {
						this.$el.css("left", u)
					}
				}
			}
			if (t || t === 0) {
				this._y = t.toString().indexOf("%") !== -1 ? t : null;
				t = this._toNumber(t, m - this.el.offsetHeight);
				if (typeof t == "number") {
					t = r ? (t += A) : t + l;
					this.$el.css("top", Math.max(t, l) + "px")
				} else {
					if (typeof t == "string") {
						this.$el.css("top", t)
					}
				}
			}
			this.onPosition(u, t);
			this.x = u;
			this.y = t;
			this.fireEvent("move", this, u, t);
			return this
		},
		onPosition : function (k, l) {
			if (k !== undefined && l !== undefined) {
				this._autoPositionType()
			}
		},
		_autoPositionType : function () {
			this[this.fixed ? "_setFixed" : "_setAbsolute"]()
		},
		_setFixed : function () {
			if (e.isIE6) {
				var p = e.rootDoc,
				o = parseInt(this.$el.css("left"), 10) || 0,
				n = parseInt(this.$el.css("top"), 10) || 0,
				l = Math.max(p.documentElement.scrollLeft, p.body.scrollLeft),
				k = Math.max(p.documentElement.scrollTop, p.body.scrollTop),
				q = "Math.max(document.documentElement.scrollLeft, document.body.scrollLeft)",
				m = "Math.max(document.documentElement.scrollTop, document.body.scrollTop)";
				this._setAbsolute();
				this.el.style.setExpression("left", "eval(" + (o + q) + ') + "px"');
				this.el.style.setExpression("top", "eval(" + (n + m) + ') + "px"')
			} else {
				this.el.style.position = "fixed"
			}
		},
		_setAbsolute : function () {
			if (e.isIE6) {
				this.el.style.removeExpression("left");
				this.el.style.removeExpression("top")
			}
			this.el.style.position = "absolute"
		},
		_clickCancel : function () {
			if (this.onCancel) {
				if (this.onCancel.call(this, window) !== false) {
					this.close()
				}
			} else {
				this.close()
			}
		},
		getTitle : function () {
			return this.dom.title.innerHTML
		},
		setTitle : function (k) {
			if (k === undefined) {
				k = this.title
			} else {
				this.title = k
			}
			if (this.title === false) {
				this.dom.title.innerHTML = "";
				this.dom.$title.hide();
				this.$el.addClass("aui_state_noTitle")
			} else {
				this.dom.title.innerHTML = k;
				this.dom.$title.show();
				this.$el.removeClass("aui_state_noTitle")
			}
			return this
		},
		initIframe : function () {
			if (!this.url) {
				return
			}
			var m = this,
			l = m.ownerDocument.createElement("iframe");
			l.src = f(m.url);
			l.id = l.name = "_DialogFrame_" + m.id;
			l.style.cssText = "border:none 0;border-width: 0;background:transparent;width:100%;height:100%;";
			l.setAttribute("frameborder", "0", 0);
			l.setAttribute("allowTransparency", true);
			l.setAttribute("ownerdialogid", m.id);
			m.dom.iframe = m.ownerWindow.Zving.getDom(l);
			m.dom.$content.addClass("aui_state_full");
			m.dom.content.appendChild(l);
			m.innerFrame = l;
			m.innerWin = l.contentWindow;
			window.$D = m;
			window.$DW = l.contentWindow;
			if (typeof m.onOk == "function") {
				var n = m.onOk;
				m.onOk = function (o) {
					return n.call(m, o || window.event, m.innerWin)
				}
			}
			if (typeof m.onCancel == "function") {
				var k = m.onCancel;
				m.onCancel = function (o) {
					return k.call(m, o || window.event, m.innerWin)
				}
			}
			if (!e.isGecko) {
				$(m.innerFrame).on("load.dialog", function () {
					m.onIframeLoad.call(m)
				})
			} else {
				m.innerFrame.onload = function () {
					m.onIframeLoad.call(m)
				}
			}
			m.content = null;
			m.$content = null
		},
		onIframeReady : function () {
			var k = this.dom.$content.find(".aui_loading");
			if (k[0]) {
				k.hide()
			}
			if (this.onReady) {
				this.onReady.call(this, this.innerWin);
				this.onReady = null
			}
		},
		onIframeLoad : function () {
			var k = this.dom.$content.find(".aui_loading");
			if (k[0]) {
				k.hide()
			}
			if (this.onLoad) {
				this.onLoad.call(this, this.innerWin);
				this.onLoad = null
			}
		},
		getContentEl : function () {
			return this.frameBody || (this.frameBody = this.$el.find("." + this.contentElClass)[0])
		},
		initButtons : function () {
			var l = this;
			if (this.onOk) {
				this.buttons.push({
					text : this.okText,
					fn : this.onOk,
					id : this.id + "-OKButton",
					cls : this.OKClass,
					focus : true
				})
			}
			if (this.onCancel) {
				this.buttons.push({
					text : this.cancelText,
					fn : this._clickCancel,
					id : this.id + "-cancelButton",
					cls : this.cancelClass,
					focus : (this.onOk ? false : true)
				})
			}
			if (this.buttons.length < 1) {
				this.dom.$buttons.hide()
			} else {
				for (var k = 0; k < this.buttons.length; k++) {
					this.addButton(this.buttons[k])
				}
			}
		},
		disableButton : function (k) {
			this.ownerWindow.$("#" + k).disable()
		},
		enableButton : function (k) {
			this.ownerWindow.$("#" + k).enable()
		},
		addButton : function (m, s, r, l, u, t) {
			var n;
			if (typeof m != "object") {
				n = {
					text : s,
					fn : r,
					id : (m || this.id + "-button" + this.buttons.length),
					cls : t || "",
					focus : !!u
				}
			} else {
				n = m
			}
			var p,
			q = this;
			if (this.dom && this.dom.buttons) {
				var o = q.ownerDocument.createElement("button");
				if (n.text) {
					o.value = n.text;
					o.innerText = n.text
				}
				if (n.id) {
					o.id = n.id;
					if (o.id == q.id + "-OKButton") {
						q.okButton = o
					} else {
						if (o.id == q.id + "-cancelButton") {
							q.cancelButton = o
						}
					}
				}
				if (n.cls) {
					o.className = "z-dlg-button " + n.cls
				}
				q.dom.buttons.appendChild(o);
				var k = q.ownerWindow.$(o);
				if (n.fn) {
					k.on("click", $.proxy(n.fn, q))
				}
				if (n.focus) {
					k.addClass(q.highlightButtonCls);
					setTimeout(function () {
						try {
							o.focus()
						} catch (w) {}

					}, 1)
				}
				return this.dom.buttons[l ? "lastChild" : "firstChild"]
			} else {
				this.buttons[l ? "push" : "unshift"](n)
			}
		},
		initEvents : function () {
			var k = this;
			k.manager = k.manager || d.Manager;
			k.manager.register(k);
			k.dom.$close.on("mousedown", $.proxy(k._clickCancel, k))
		},
		time : function (k) {
			var l = this;
			if (this.closed) {
				clearTimeout(this._timer);
				return
			}
			if (k) {
				this.autoClose = k;
				this._timer = setTimeout(function () {
						l.time()
					}, 1000);
				return
			}
			this.setTitle(this.closeTip.format(this.autoClose--));
			if (this.autoClose <= 0) {
				this._clickCancel()
			} else {
				this._timer = setTimeout(function () {
						l.time()
					}, 1000)
			}
		},
		initResizable : function () {
			if (this.resizable) {
				this.resizer = new e.Resizable({
						el : this.el,
						minWidth : 200,
						minheight : 100,
						handles : this.resizeHandles,
						resizeElement : this.resizerAction,
						handleCls : "z-window-handle"
					});
				this.beforerresize = function () {
					this.fireEvent("beforeresize")
				}
			}
		},
		initDraggable : function () {
			if (this.dom.header && this.draggable) {
				this.dd = new e.rootWin.Zving.SimpleDrag({
						dragEl : this.el,
						handleEl : this.dom.header,
						capture : true
					})
			}
		},
		content : function (k) {
			if (k === undefined) {
				return this.dom.content
			}
			if (typeof k == "string") {
				this.updateContent(k);
				return
			}
			if (e.isElment(k)) {
				var o = k.style.display,
				n = k.previousSibling,
				m = k.nextSibling,
				l = k.parentNode;
				this._elemBack = function () {
					if (n && n.parentNode) {
						n.parentNode.insertBefore(k, n.nextSibling)
					} else {
						if (m && n.parentNode) {
							m.parentNode.insertBefore(k, m)
						} else {
							if (l) {
								l.appendChild(k)
							}
						}
					}
					k.style.display = o
				};
				this.dom.content.innerHTML = "";
				this.dom.content.appendChild(k);
				e.Node.show(k)
			}
		},
		onEsc : function (k) {
			e.stopEvent(k);
			this._clickCancel()
		},
		setShimSize : function () {
			if (this.modal) {
				var m = false;
				if (!e.Node.isVisible(this.shim)) {
					m = true
				}
				if (m) {
					this.$shim.css("visibility", "hidden");
					this.$shim.show()
				}
				e.Node.setSize(this.shim, "100%", "100%");
				var l = this.shim.offsetHeight;
				var k = e.Dom.getViewport(this.ownerWindow).height;
				if (k > l) {
					e.Node.setSize(this.shim, undefined, k)
				}
				if (m) {
					e.Node.hide(this.shim);
					this.$shim.css("visibility", "visible")
				}
			}
		},
		onWindowResize : function () {
			this.setShimSize();
			this.doConstrain()
		},
		beforeShow : function () {},
		onDestroy : function () {
			if (this.dd) {
				this.dd.destroy();
				delete this.dd
			}
			if (this.manager) {
				this.manager.unregister(this)
			}
			d.superclass.onDestroy.call(this)
		},
		show : function (l, m, k) {
			if (!this.rendered) {
				this.render(this.autoRender)
			}
			if (this.hidden === false) {
				this.toFront();
				return this
			}
			if (this.fireEvent("beforeshow", this) === false) {
				return this
			}
			this.hidden = false;
			this.beforeShow();
			this.animateTarget = l || this.animateTarget;
			if (this.animateTarget) {
				this.animShow()
			} else {
				this.afterShow()
			}
			if (this.modal) {
				if (!e.Node.isVisible(this.shim)) {
					this.setShimSize();
					if (this.animator) {
						e.rootWin.Node.setOpacity(this.shim, 3);
						this.$shim.show();
						this.$shim.fadeIn()
					} else {
						this.$shim.show()
					}
				}
			}
			return this
		},
		afterShow : function (k) {
			this.$proxy.hide();
			this.$el.show();
			if (this.monitorResize || this.modal || this.constrain) {
				e.rootWin.Zving.EventManager.onWindowResize(this.onWindowResize, this)
			}
			this.doConstrain();
			this.doLayout();
			this.toFront();
			this.onShow();
			this.fireEvent("show", this)
		},
		animShow : function () {
			this.$proxy.show();
			e.Node.setBox(this.proxy, e.Node.getBox(this.animateTarget));
			e.Node.setOpacity(this.proxy, 0);
			var k = this.getBox();
			this.$el.css("display", "none");
			this.$proxy.animate(e.extra(k, {
					opacity : 0.5
				}), this.afterShow)
		},
		onShow : e.noopFn,
		toFront : function (k) {
			if (this.manager.bringToFront(this)) {
				if (!k || !k.getTarget().focus) {
					this.focus()
				}
			}
			return this
		},
		toBack : function () {
			this.manager.sendToBack(this);
			return this
		},
		setActive : function (m) {
			if (m) {
				var k = e.rootWin.Zving.Dialog.front,
				l = e.rootWin.Zving.Dialog.front.lastZIndex;
				this.setZIndex(l);
				if (this.modal && this.shim) {
					this.$shim.show()
				}
				this.addClass("aui_state_focus");
				this.fireEvent("activate", this)
			} else {
				this.removeClass("aui_state_focus");
				this.fireEvent("deactivate", this)
			}
		},
		hide : function (m, k, l) {
			if (this.hidden || this.fireEvent("beforehide", this) === false) {
				return this
			}
			if (k) {
				this.on("hide", k, l)
			}
			this.hidden = true;
			if (this.modal) {}

			this.animateTarget = m || this.animateTarget;
			if (this.animateTarget) {
				this.animHide()
			} else {
				this.$el.hide();
				this.afterHide()
			}
			return this
		},
		afterHide : function () {
			this.$proxy.hide();
			if (this.monitorResize || this.modal || this.constrain) {
				e.rootWin.Zving.EventManager.removeResizeListener(this.onWindowResize, this)
			}
			this.onHide();
			this.fireEvent("hide", this)
		},
		animHide : function () {
			e.Node.setOpacity(this.proxy, 0.5);
			this.$proxy.show();
			var k = this.getBox(false);
			e.Node.setBox(this.proxy, k);
			this.$el.hide();
			this.$proxy.animate(e.extra(e.Node.getBox(this.animateTarget), {
					opacity : 0
				}), this.afterHide)
		},
		onHide : e.noopFn,
		doConstrain : function () {
			if (this.container.nodeName == "BODY") {
				return
			}
			var n;
			if (this.constrain) {
				var m = this.getSize();
				n = {
					right :  - (m.width - 50),
					bottom :  - (m.height - 25)
				}
			}
			var q = e.Node.getConstrainToXY(this.el, this.container, true, n);
			if (q) {
				var p = e.isIE6 ? false : this.fixed;
				if (p) {
					var o = e.rootWin.document,
					k = Math.max(o.documentElement.scrollLeft, o.body.scrollLeft),
					l = Math.max(o.documentElement.scrollTop, o.body.scrollTop);
					q[0] = q[0] - k;
					q[1] = q[1] - l
				}
				this.setPosition(q[0], q[1])
			}
		},
		doLayout : e.noopFn,
		close : function () {
			if (this.isDestroyed === true) {
				return
			}
			if (this.fireEvent("beforeclose", this) !== false) {
				if (this.hidden) {
					this.doClose()
				} else {
					this.hide(null, this.doClose, this)
				}
			}
		},
		doClose : function () {
			if (this.onClose) {
				this.onClose.call(this, this.innerWin);
				this.onClose = null
			}
			this.fireEvent("close", this);
			this.destroy()
		},
		beforeDestroy : function () {
			this.destroyIframe();
			if (this.dd && this.dd.proxyEl) {
				e.rootWin.Zving.Dom.removeNode(this.dd.proxyEl)
			}
			if (this._elemBack) {
				this._elemBack()
			}
		},
		destroyIframe : function () {
			var k = this;
			if (!k.dom.iframe) {
				return
			}
			window.$DW = null;
			k.innerDoc = null;
			k.innerWin = null;
			if (!e.isGecko) {
				$(k.innerFrame).off("load.dialog")
			} else {
				k.innerFrame.onload = null
			}
			k.innerFrame.src = "about:blank";
			e.Dom.removeNode(k.dom.iframe);
			k.innerFrame = null
		},
		setZIndex : function (k) {
			if (k === undefined) {
				k = this.zIndex
			}
			if (this.modal) {
				this.$shim.css("z-index", k)
			}
			this.el.style.zIndex = (++k);
			this.zIndex = k;
			k += 5;
			this.lastZIndex = k;
			return this
		},
		setSize : function (k, l) {
			this.onSetSize(k, l)
		},
		onSetSize : function (k, l) {
			if (this.url) {
				k = k || "61.8%";
				l = l || "61.8%"
			}
			this.dom.$main.css("min-width", this.minWidth + "px");
			if (k) {
				this._width = k.toString().indexOf("%") !== -1 ? k : null;
				var n = e.Dom.getViewport(e.rootWin).width - this.el.offsetWidth + this.dom.main.offsetWidth;
				k = this._toNumber(k, n);
				if (typeof k == "number") {
					this.$el.css("width", "auto");
					this.dom.$main.css("width", Math.max(this.minWidth, k) + "px");
					this.$el.css("width", this.el.offsetWidth + "px")
				} else {
					if (typeof k == "string") {
						this.dom.main.style.width = k;
						if (k == "auto") {
							this.$el.css("width", "auto")
						}
					}
				}
			}
			if (l) {
				this._height = l.toString().indexOf("%") !== -1 ? l : null;
				var m = e.Dom.getViewport(e.rootWin).height - this.el.offsetHeight + this.dom.main.offsetHeight;
				l = this._toNumber(l, m);
				if (typeof l == "number") {
					this.dom.$main.css("height", Math.max(this.minHeight, l) + "px")
				} else {
					if (typeof l == "string") {
						this.dom.$main.css("height", l)
					}
				}
			}
			this.fireEvent("resize", this);
			return this
		},
		dragstart : function (k) {
			k.proxy = this.proxy
		}
	});
	e.extra(d.prototype, {
		shake : function () {
			var k = this.el.style,
			m = [4, 8, 4, 0, -4, -8, -4, 0],
			l = function () {
				k.marginLeft = m.shift() + "px";
				if (m.length <= 0) {
					k.marginLeft = 0;
					clearInterval(timerId)
				}
			};
			m = m.concat(m.concat(m));
			timerId = setInterval(l, 13);
			return this
		}
	});
	e.extra(d, {
		alert : function (m, l, k) {
			if (k === false) {
				return d.warn(m, l)
			}
			return new d({
				autoShow : true,
				icon : "icon_info",
				html : "" + m,
				cancelText : c.get("Common.OK"),
				onCancel : function () {
					if (l) {
						l()
					}
				}
			})
		},
		warn : function (l, k) {
			return new d({
				autoShow : true,
				icon : "icon_warn",
				html : "" + l,
				cancelText : c.get("Common.OK"),
				onCancel : function () {
					if (k) {
						k()
					}
				}
			})
		},
		confirm : function (m, l, k) {
			return new d({
				autoShow : true,
				icon : "icon_query",
				html : m,
				onOk : function () {
					if (!l) {
						return this.close()
					}
					if (l.call(this, window) !== false) {
						this.close()
					}
				},
				onCancel : k || e.noopFn
			})
		},
		prompt : function (n, m, k) {
			k = k || "";
			var l;
			return new d({
				autoShow : true,
				html : ['<div style="margin-bottom:5px;font-size:12px">', n, "</div>", "<div>", '<input value="', k, '" style="width:18em;padding:3px 2px" />', "</div>"].join(""),
				onShow : function () {
					l = this.dom.$content.find("input")[0];
					l.select();
					l.focus()
				},
				onOk : function (o) {
					return m && m.call(this, l.value, o)
				}
			})
		},
		tips : function (k, l) {
			return new d({
				autoShow : true,
				title : false,
				modal : false,
				html : '<div style="padding: 0 1em;">' + k + "</div>",
				time : l || 2
			})
		},
		WaitID : null,
		wait : function (l) {
			var o = 0,
			m;
			var n = new d({
					autoShow : true,
					html : l,
					onCancel : function () {
						return false
					}
				});
			var k = function () {
				if (!n || n.destroying === true) {
					if (m) {
						clearTimeout(m)
					}
					return
				}
				o++;
				n.cancelButton.innerText = c.get("Dialog.WaitMessage") + "(" + o + ")...";
				n.waitTimer = m = setTimeout(k, 1000)
			};
			n.waitTimer = m = setTimeout(k, 1000);
			n.on("beforeclose", function () {
				clearTimeout(m)
			});
			return n
		},
		getInstance : function (k) {
			return d.Manager.get(k)
		}
	});
	d.list = {};
	d.accessList = [];
	d.front = null;
	if (window != e.rootWin) {
		d.list = e.rootWin.Zving.Dialog.list;
		d.accessList = e.rootWin.Zving.Dialog.accessList;
		d.front = e.rootWin.Zving.Dialog.front
	}
	d.Manager = function () {
		var p = function (r) {
			if (d.accessList.length == 1) {
				d.front = e.rootWin.Zving.Dialog.front = r
			}
		};
		var q = function (t) {
			if (d.isHideScrollbar) {
				var s = e.rootDoc.getElementsByTagName(e.rootDoc.compatMode == "BackCompat" ? "BODY" : "HTML")[0];
				s._styleOverflow = s.style.overflow;
				if (!b) {
					var r = s.scrollTop;
					s.style.overflow = "hidden";
					s.scrollTop = r
				} else {
					s.style.overflow = "hidden"
				}
			}
		};
		var k = function (t) {
			if (d.accessList.length < 2) {
				if (e.rootWin.Zving.getDom("_DialogShim")) {
					e.rootWin.$("#_DialogShim").hide()
				}
				if (d.isHideScrollbar) {
					var s = e.rootDoc.getElementsByTagName(e.rootDoc.compatMode == "BackCompat" ? "BODY" : "HTML")[0];
					if (s._styleOverflow != undefined) {
						if (!b) {
							var r = s.scrollTop;
							s.style.overflow = s._styleOverflow;
							s.scrollTop = r
						} else {
							s.style.overflow = s._styleOverflow
						}
					}
				}
			}
		};
		var m = function (s, r) {
			return (!s._lastAccess || s._lastAccess < r._lastAccess) ? -1 : 1
		};
		var o = function () {
			var t = d.accessList,
			r = t.length;
			if (r > 0) {
				t.sort(m);
				var s = t[0].manager.zseed;
				for (var u = 0; u < r; u++) {
					var w = t[u];
					if (w && !w.hidden) {
						w.setZIndex(s + (u * 10))
					}
				}
			}
			l()
		};
		var n = function (r) {
			if (r !== e.rootWin.Zving.Dialog.front) {
				if (e.rootWin.Zving.Dialog.front) {
					e.rootWin.Zving.Dialog.front.setActive(false)
				}
				d.front = e.rootWin.Zving.Dialog.front = r;
				if (r) {
					r.setActive(true)
				}
			}
		};
		var l = function () {
			for (var r = d.accessList.length - 1; r >= 0; --r) {
				if (!d.accessList[r].hidden) {
					n(d.accessList[r]);
					return
				}
			}
			n(null)
		};
		return {
			zseed : 10100,
			listenKeydown : function (r, t) {
				r = e.getEvent(r);
				var s = r.target;
				if (r.keyCode == 27) {
					if (t && t.ctype == "dialog") {
						if (s.nodeName && /^textarea$/i.test(s.nodeName) && s.defaultValue != s.value && s.value.length > 2 && !confirm("侦测文本框中的内容已经被修改，你确定要放弃修改吗？")) {
							return
						}
						t.onEsc(r)
					} else {
						if (e.rootWin.Zving.Dialog.front && e.rootWin.Zving.Dialog.front.esc) {
							e.rootWin.Zving.Dialog.front.onEsc(r)
						}
					}
				}
			},
			closeAll : function (r) {
				if (d.accessList.length > 0) {
					d.accessList.each(function (s) {
						if (r) {
							if (s.opener == window) {
								s.close()
							}
						} else {
							s.close()
						}
					});
					return true
				}
				return false
			},
			register : function (r) {
				d.list[r.id] = r;
				d.accessList.push(r);
				r.on("hide", l);
				r.on("show", q);
				r.on("close", k)
			},
			unregister : function (r) {
				delete d.list[r.id];
				r.un("hide", l);
				r.un("show", q);
				r.un("close", k);
				d.accessList.remove(r)
			},
			get : function (r) {
				return typeof r === "object" ? r : d.list[r]
			},
			bringToFront : function (r) {
				r = this.get(r);
				if (r != e.rootWin.Zving.Dialog.front) {
					r._lastAccess = new Date().getTime();
					o();
					p(r);
					return true
				}
				return false
			},
			sendToBack : function (r) {
				r = this.get(r);
				r._lastAccess =  - (new Date().getTime());
				o();
				return r
			},
			getActive : function () {
				return e.rootWin.Zving.Dialog.front
			}
		}
	}
	();
	j.onReady(function () {
		if (e.restricted || !window.frameElement) {
			return
		}
		var k;
		try {
			k = window.frameElement.getAttribute("ownerdialogid")
		} catch (m) {
			e.Console.error("没有权限：可能因为跨域，对话框不能与父窗口交互。")
		}
		if (!k) {
			return
		}
		if (e.Misc.inputFocus) {
			e.Misc.inputFocus()
		}
		var l;
		if (e.Config.namespace == "window") {
			l = e.rootWin.Dialog.list[k]
		} else {
			l = e.rootWin.Zving.Dialog.list[k]
		}
		if (!l) {
			return
		}
		window.ownerDialog = l;
		window.dialogOpener = l.opener;
		if (l.getTitle() === "" && document.title) {
			l.setTitle(document.title)
		}
		l.onIframeReady(window)
	}, 4);
	$(document).on("keydown", d.Manager.listenKeydown);
	$(window).on("unload", function () {
		$(document).off("keydown", d.Manager.listenKeydown);
		d.Manager.closeAll(true)
	});
	e.Dialog = d
})();
(function () {
	var f = window.Zving,
	c = f.isIE,
	a = f.isGecko,
	b = f.Page,
	d = f.Lang;
	var e = function (n, k, p, h, g) {
		if (!(this instanceof e)) {
			return new e(n, k, p, h, g)
		}
		if (!n) {
			f.Console.error("MsgPop:参数错误！");
			return
		}
		var o = f.rootWin;
		var j = "Pop" + (o.Zving.MsgPop ? o.Zving.MsgPop._Array.length : "");
		var l = n.length;
		var m = this;
		m.id = j;
		m.width = h ? h : (l < 100 ? 240 : 250 + Math.floor(l / 3));
		m.height = p ? p : 100;
		m.top = 0;
		m.parentWindow = null;
		m.onLoad = null;
		m.title = "";
		m.url = k ? k : null;
		m.message = n ? n : null;
		m.icon = null;
		m.timeout = g || 3;
		m.autoShow = true;
		setTimeout(function () {
			if (m.autoShow) {
				m.show()
			}
		}, 10)
	};
	e._Array = [];
	e.TOP = 0;
	e.prototype.show = function () {
		var l = f.rootWin;
		var m = l.document;
		if (!this.parentWindow) {
			this.parentWindow = window
		}
		var h = [];
		h.push("  <table border='0' cellspacing='0' cellpadding='0' align='center' class='msgpoptable'>");
		h.push("      <tr><td class='corner topleft'> </td><td class='topcenter'> </td>");
		h.push("          <td class='corner topright'> </td></tr><tr><td class='bodyleft'> </td>");
		h.push('    <td class="center">');
		h.push(' <a href="javascript:void(0);" class="iclose_btn"  onClick="MsgPop.close(\'' + this.id + "');\"></a>");
		h.push('    <div class="bodycontent" style="width:' + this.width + 'px;">');
		if (this.url) {
			if (this.url.indexOf(":") == -1) {
				h.push('<iframe src="' + f.Server.ContextPath + this.url + '" ')
			} else {
				h.push('<iframe src="' + this.url + '" ')
			}
			h.push(' id="_MsgPopFrame_' + this.id + '" boxId="' + this.id + '" allowTransparency="true"  width="100%" height="' + this.height + '" frameborder="0" style="background-color: #transparent; border:none;"></iframe>')
		} else {
			h.push(this.message)
		}
		h.push("    </div>");
		h.push("    </td>");
		h.push("    <td class='bodyright'> </td></tr>");
		h.push("  <tr><td class='corner footerleft'> </td><td class='footercenter'> </td>");
		h.push("    <td class='corner footerright'> </td></tr></table>");
		this.Html = h.join("");
		this.TopWindow = l;
		var g = l.Zving.$G("_MsgPopBoxDiv");
		if (!g) {
			g = l.document.createElement("div");
			g.id = "_MsgPopBoxDiv";
			g.style.cssText = "position:fixed; left:0; top:0; width:100%; height:1px; overflow:visible; z-index:10200;";
			if (isIE6) {
				g.style.position = "absolute"
			}
			l.document.body.appendChild(g)
		}
		if (e.TOP) {
			g.style.top = e.TOP + "px"
		}
		this.MsgPopBoxDiv = g;
		var j = l.document.createElement("div");
		j.id = this.id;
		j.innerHTML = this.Html;
		j.className = "squares msgpop";
		g.appendChild(j);
		j.MsgPopInstance = this;
		l.MsgPop._Array.push(this.id);
		var k = {
			height : Node.getDimensions(j).height
		};
		j.style.height = "1px";
		$(j).animate(k);
		j.style.visibility = "";
		if (this.timeout && this.timeout > 0) {
			e.autoClose(this.id, this.timeout)
		}
	};
	e.getInstance = function (j) {
		var h = f.rootWin;
		var g = h.Zving.$G(j);
		if (!g) {
			return null
		}
		return g.MsgPopInstance
	};
	e.autoClose = function (j, h) {
		var g = f.rootWin;
		if (!g.Zving.$G(j)) {
			return
		}
		h -= 1;
		if (e.countdown) {
			g.Zving.$G(j + "CloseTip").innerHTML = d.get("MsgPop.Countdown").format(h)
		}
		if (h <= 0) {
			e.close(j, true)
		} else {
			e._closeHand = setTimeout(function () {
					e.autoClose(j, h)
				}, 1000)
		}
	};
	e.prototype.close = function () {
		var g = f.rootWin;
		this.MsgPopBoxDiv.outerHTML = "";
		g.MsgPop._Array.remove(this.id)
	};
	e.close = function (j, h) {
		var g = f.rootWin;
		g["eval"]('window._OpacityPopFunc = function(){Zving.$G("' + j + '").outerHTML = "";Zving.rootWin.Zving.MsgPop._Array.remove("' + j + '");}');
		if (h) {
			g.$("#" + j).fadeOut("slow", g._OpacityPopFunc)
		} else {
			g._OpacityPopFunc()
		}
	};
	e.closeSelf = function () {
		if (window != window.parent) {
			var g = window.frameElement.getAttribute("boxId");
			if (g) {
				parent.MsgPop.close(g)
			}
		} else {
			if (e._Array.length > 0) {
				var h = e._Array[e._Array.length - 1];
				e.close(h)
			}
		}
	};
	if (f.rootWin != window) {
		e = f.rootWin.MsgPop
	}
	f.importCss("Components/msgpop.css");
	f.MsgPop = e
})();
(function () {
	var j = window.Zving,
	l = j.Node.getValue,
	m = j.Node.setValue,
	a = j.getByName,
	n = j.Page,
	h = j.Lang,
	f = j.Constant,
	g = j.CONTEXTPATH;
	var b = {
		monthNames : "1月,2月,3月,4月,5月,6月,7月,8月,9月,10月,11月,12月".split(","),
		weekNames : "日,一,二,三,四,五,六".split(",")
	};
	var e = {};
	var k = {};
	function d(r, q) {
		r = r || k.getCurrentTime();
		r = r.split(":");
		var o = [],
		p = 0;
		o.push("<table id='timeSelectorWrapTable' oncontextmenu='return false' onselectstart='return false;' style='border-bottom: 1px solid #444;" + (q ? "display:none" : "") + "' cellSpacing=0 cellPadding=0 width=190>");
		o.push("<tr>");
		o.push(' <td><div id="timeSelectorWrap">');
		o.push("<select id='_Calendar_HourSelector' style='width: 45px'>");
		for (p = 0, v = 0; p < 24; p++) {
			v = p < 10 ? "0" + p : "" + p;
			v = v == r[0] ? v + " selected" : v;
			o.push(" <option value=" + v + ">" + p + "</OPTION>")
		}
		o.push("</select>:");
		o.push("<select id='_Calendar_MinuteSelector' style='width: 45px'>");
		for (p = 0, v = 1; p < 60; p++) {
			v = p < 10 ? "0" + p : "" + p;
			v = v == r[1] ? v + " selected" : v;
			o.push(" <option value=" + v + ">" + p + "</OPTION>")
		}
		o.push("</select>:");
		o.push("<select id='_Calendar_SecondSelector' style='width: 45px'>");
		for (p = 0, v = 1; p < 60; p++) {
			v = p < 10 ? "0" + p : "" + p;
			v = v == r[2] ? v + " selected" : v;
			o.push(" <option value=" + v + ">" + p + "</OPTION>")
		}
		o.push("</select>");
		o.push(" </div></td>");
		o.push(' <td width="40" height="20" onmouseout="this.style.backgroundColor=\'#def\'" onmouseover="this.style.backgroundColor=\'#9cf\'" onclick="TopWindow.Zving.Calendar.returnDateTime();this.style.backgroundColor=\'#def\'" class="buttonConfirm" style="text-align:center; background-color: rgb(221, 238, 255);">');
		o.push(h.get("Common.OK"));
		o.push(" </td>");
		o.push("</tr>");
		o.push("</table>");
		o.push("<script>");
		o.push("function toggleTimeSelector(enable){");
		o.push('document.getElementById("_Calendar_HourSelector").disabled=!enable;');
		o.push('document.getElementById("_Calendar_MinuteSelector").disabled=!enable;');
		o.push('document.getElementById("_Calendar_SecondSelector").disabled=!enable;');
		o.push("}");
		o.push("<\/script>");
		return o.join("")
	}
	b.getTimeString = function () {
		var q = j.getDom("_Calendar_Frame").contentWindow.document.getElementById("_Calendar_HourSelector");
		var p = j.getDom("_Calendar_Frame").contentWindow.document.getElementById("_Calendar_MinuteSelector");
		var o = j.getDom("_Calendar_Frame").contentWindow.document.getElementById("_Calendar_SecondSelector");
		if (q.disabled === true || q.disabled == "true") {
			return ""
		} else {
			return " " + q.value + ":" + p.value + ":" + o.value
		}
	};
	k.getCurrentDate = function () {
		return k.toString(new Date())
	};
	b.setTime = function (r) {
		var s = r.split(" ");
		s = s[1];
		if (!s) {
			return
		}
		j.getDom("_Calendar_Frame").contentWindow.returnTime = s;
		s = s.split(":");
		var q = j.getDom("_Calendar_Frame").contentWindow.document.getElementById("_Calendar_HourSelector");
		var p = j.getDom("_Calendar_Frame").contentWindow.document.getElementById("_Calendar_MinuteSelector");
		var o = j.getDom("_Calendar_Frame").contentWindow.document.getElementById("_Calendar_SecondSelector");
		q.value = s[0];
		p.value = s[1];
		o.value = s[2]
	};
	k.getCurrentTime = function () {
		var q = new Date();
		var t = q.getHours();
		var p = q.getMinutes();
		var r = q.getSeconds();
		var o = [];
		o.push(t > 9 ? t : "0" + t);
		o.push(p > 9 ? p : "0" + p);
		o.push(r > 9 ? r : "0" + r);
		return o.join(":")
	};
	k.toString = function (q) {
		var s = q.getFullYear();
		var p = q.getMonth() + 1;
		var r = q.getDate();
		var o = [];
		o.push(s);
		o.push(p > 9 ? p : "0" + p);
		o.push(r > 9 ? r : "0" + r);
		return o.join("-")
	};
	k.parseDate = function (u) {
		if (!u) {
			j.Console.error("DateTime.js # DateTime.parseDate : 没有传入参数！")
		}
		var x = /^(\d{4})-(\d{1,2})-(\d{1,2})(\s(\d{1,2}):(\d{1,2})(:(\d{1,2}))?)?$/;
		if (!x.test(u)) {
			j.Console.error("DateTime.js # DateTime.parseDate : 参数错误 " + u)
		}
		x.exec(u);
		var w = RegExp.$1;
		var r = RegExp.$2;
		var t = RegExp.$3;
		var q = RegExp.$5;
		var p = RegExp.$6;
		var z = RegExp.$8;
		var o = new Date(w, r - 1, t);
		if (!q) {
			q = 0;
			p = 0
		}
		o.setHours(q);
		o.setMinutes(p);
		if (!z) {
			z = 0
		}
		o.setSeconds(z);
		return o
	};
	k.LastID = new Date().getTime();
	k.initCtrl = function (t, o) {
		if (t.onmousedown == k.onMouseDown) {
			return
		}
		t = j.getDom(t);
		o = o || t.getAttribute("ztype").toLowerCase();
		if (o) {
			if (!/^(date|time|datetime)$/.test(o)) {
				return
			}
			var p = {
				date : "Framework/Images/Calendar.gif",
				time : "Framework/Images/TimeSelector.gif",
				datetime : "Framework/Images/DateTime.gif"
			};
			var q = {
				date : "Calendar",
				time : "TimeSelector",
				datetime : "Calendar"
			};
			var s = {
				date : k.getCurrentDate(),
				time : k.getCurrentTime(),
				datetime : k.getCurrentDate() + " " + k.getCurrentTime()
			};
			var r = new Date();
			if (t.getAttribute("init") === "true") {
				t.value = s[o]
			}
			var u = t.id;
			if (u === null || u === "") {
				t.id = u = k.LastID++
			}
			t.insertAdjacentHTML("afterEnd", "<img id='" + u + "_icon' src='" + g + p[o] + "' align='absmiddle' width=18 vspace='1' style='position:relative; left:-20px; margin-right:-20px; cursor:pointer;' onmousedown=\"Zving.DateTime.onImageMouseDown(event,'" + q[o] + "','" + u + "');\">");
			$(t).on("focus.datetime", function () {
				Zving[q[o]].show(u)
			});
			t.onmousedown = k.onMouseDown;
			$(window).on("unload", function () {
				$(t).off("focus.datetime");
				t.onmousedown = null
			})
		}
	};
	k.onImageMouseDown = function (o, q, r) {
		b.close();
		e.close();
		if (j.getDom(r).disabled === true) {
			return
		}
		var p = j.rootWin;
		if (p.Zving.DateTime && r == p.Zving.DateTime.showingID) {
			return
		}
		Zving[q].show(r);
		j.stopEvent(o)
	};
	k.onMouseDown = function (o) {
		var p = j.rootWin;
		if (this.id == p.Zving.DateTime.showingID && p.DateTimeWindow == window) {
			j.cancelEvent(o)
		}
	};
	k.setDisabled = function (q, p) {
		var o = q.getAttribute("ztype");
		if (!o) {
			return
		}
		var r;
		if (/date|DateTime/i.test(o)) {
			r = "Calendar"
		} else {
			if (o.toLowerCase() === "time") {
				r = "TimeSelector"
			} else {
				return
			}
		}
		var s = q.id;
		if (p) {
			j.getDom(s + "_icon").onmousedown = null;
			j.getDom(s + "_icon").src = j.getDom(s + "_icon").src.replace(/\.gif$/i, "_dsb.gif");
			q.disabled = true;
			q.setAttribute("disabled", "true")
		} else {
			j.getDom(s + "_icon").src = j.getDom(s + "_icon").src.replace(/_dsb\.gif$/i, ".gif");
			q.setAttribute("disabled", "");
			q.disabled = false;
			j.getDom(s + "_icon").onmousedown = function (t) {
				k.onImageMouseDown.apply(j.getDom(s + "_icon"), [t, r, s])
			}
		}
	};
	function c(p, q, o) {
		p = "" + p;
		return p.leftPad(q, o)
	}
	e.setTime = function (o) {
		var r,
		p,
		y,
		t;
		if (o) {
			if (!/\d{1,2}\:\d{1,2}(\:\d{1,2})?/.test(o)) {
				j.Dialog.alert(h.get("Verify.Wrong") + h.get("Verify.Time") + ":" + o)
			}
			t = o.split(":");
			r = parseInt(t[0], 10);
			p = parseInt(t[1], 10);
			y = parseInt(t[2], 10)
		} else {
			var x = new Date();
			r = x.getHours();
			p = 0;
			y = 0
		}
		r = r > 23 ? 23 : r;
		p = p > 59 ? 59 : p;
		y = y > 59 ? 59 : y;
		p = p >= 10 ? p : "0" + p;
		y = y >= 10 ? y : "0" + y;
		var u = j.getDom("_TimeSelector_Frame").contentWindow;
		t = u.z.getById("divWrapper").getElementsByTagName("td");
		var w = t.length;
		for (var q = 0; q < w; q++) {
			t[q].className = ""
		}
		u.z.getById("selectorHour").innerHTML = r;
		u.z.getById("selectorMinute").innerHTML = p;
		u.z.getById("selectorSecond").innerHTML = y;
		u.z.getById("_TimeSelector_Tip").innerHTML = r + ":" + p + ":" + y;
		u.z.getById("divHour").getElementsByTagName("td")[parseInt(r, 10)].className = "selected";
		u.z.getById("divMinute").getElementsByTagName("td")[parseInt(p, 10)].className = "selected";
		u.z.getById("divSecond").getElementsByTagName("td")[parseInt(y, 10)].className = "selected";
		e.showType("Hour");
		return true
	};
	e.setTip = function () {
		j.getDom("_TimeSelector_Tip").innerText = [l("#_TimeSelector_Hour"), l("#_TimeSelector_Minute"), l("#_TimeSelector_Second")].join(":")
	};
	e.setNow = function () {
		m(Control, k.getCurrentTime());
		Control.fireEvent("onchange");
		e.close()
	};
	e.returnTime = function (p) {
		var q = j.getDom("_TimeSelector_Frame").contentWindow;
		if (p) {
			m(q._DateTimeControl, k.getCurrentTime())
		} else {
			var o = [q.z.getById("selectorHour").innerHTML, q.z.getById("selectorMinute").innerHTML, q.z.getById("selectorSecond").innerHTML];
			m(q._DateTimeControl, o.join(":"))
		}
		q._DateTimeControl.fireEvent("onchange");
		e.close()
	};
	e.showType = function (q) {
		var r = j.getDom("_TimeSelector_Frame").contentWindow;
		var o = ["Hour", "Minute", "Second"];
		for (var p = 0; p < o.length; p++) {
			r.z.getById("selector" + o[p]).className = "selector";
			r.z.getById("div" + o[p]).style.display = "none"
		}
		r.z.getById("div" + q).style.display = "";
		r.z.getById("selector" + q).className = "selector_current";
		e.adjustSize()
	};
	e.show = function (o, q) {
		var z = j.rootWin,
		r;
		o = j.getDom(o);
		try {
			o.onfocus.apply(o, [])
		} catch (w) {}

		q = q ? q : l(o);
		var A = z.Zving.getDom("_TimeSelector");
		if (!A) {
			A = z.document.createElement("div");
			A.id = "_TimeSelector";
			A.style.position = "absolute";
			A.style.zIndex = 10400;
			A.innerHTML = "<iframe id='_TimeSelector_Frame' frameborder=0 scrolling=no width=194 height=153></iframe>";
			A.style.width = "194px";
			z.document.body.appendChild(A);
			A.style.display = "";
			var u = z.Zving.getDom("_TimeSelector_Frame").contentWindow;
			var y = u.document;
			y.open();
			var t = [];
			t.push("<style>");
			t.push("body {margin: 0px;}");
			t.push(".timetable {}");
			t.push(".timetable {position: absolute; border-top: 1px solid #777; border-right: 1px solid #555;border-bottom: 1px solid #444;font-family: tahoma,verdana,sans-serif;");
			t.push("border-left: 1px solid #666;font-size: 11px;cursor: default;background: #fff;}");
			t.push(".timetable .buttonNow {text-align: center; background-color:#def; border-right: 1px solid #999;color:#000;font-size: 12px;}");
			t.push(".timetable .buttonConfirm {text-align: center; background-color:#def; border-left: 1px solid #999;color:#000;font-size: 12px;}");
			t.push(".timetable .buttonclose {color:#06c;text-align: center; background-color:#def;border-left: 1px solid #999;font-size:9px;width:16px}");
			t.push(".timetable td.selected {font-weight: bold;border: 1px solid #39f; background: #c3e4FF;}");
			t.push(".timetable td.now {font-weight: bold; color: #03f;}");
			t.push(".timetable .tipnow {font-weight: bold;font-size:12px;color: #258;text-align: left;}");
			t.push(".timetable td.over {border:1px solid #06c;background: #EDFBD2;}");
			t.push(".selector {color:#258;padding:0 8px;border-right: 1px solid #999;border-left: 1px solid #999;background: #def;}");
			t.push(".selector_current {color:#fff;padding:0 8px;border-right: 1px solid #999;border-left: 1px solid #999;background: #ff8800;}");
			t.push(".wrapper {background-color:#fff;border-top: 1px solid #999; border-bottom: 1px solid #999;text-align: center;}");
			t.push(".wrapper td{border: 1px solid #fff; font-size: 12px;text-align: center; color: #06c;}");
			t.push("</style>");
			t.push("<body><div class='timetable' id='_TimeSelector_Table'>");
			t.push("<table border='0' cellpadding='0' cellspacing='0' onselectstart='return false;' oncontextmenu='return false'>");
			t.push("<tr><td><table width='100%' border='0' cellpadding='0' cellspacing='0'>");
			t.push("<tr><td height='18' class='tipnow'>");
			t.push("<table width='100' height='100%' border='0' cellpadding='0' cellspacing='0'>");
			t.push("<tr class='tipnow'>");
			t.push("<td valign='middle' class='selector_current' id='selectorHour' onclick=\"TopWindow.Zving.TimeSelector.showType('Hour')\">0</td>");
			t.push("<td valign='middle' align='center'><span style='padding:3px;'>:</span></td>");
			t.push("<td valign='middle' class='selector' id='selectorMinute' onclick=\"TopWindow.Zving.TimeSelector.showType('Minute')\">00</td>");
			t.push("<td valign='middle' align='center'><span style='padding:3px;'>:</span></td>");
			t.push("<td valign='middle' class='selector' id='selectorSecond' onclick=\"TopWindow.Zving.TimeSelector.showType('Second')\">00</td>");
			t.push("</tr></table></td>");
			t.push("<td width='16'><table height='100%' height='100%' border='0' cellpadding='0' cellspacing='0'><tr><td class='buttonclose' title='" + h.get("Common.Cancel") + "' valign='middle' onclick=\"TopWindow.Zving.TimeSelector.close();this.style.backgroundColor='#def'\" onmouseover=\"this.style.backgroundColor='#9cf'\" onmouseout=\"this.style.backgroundColor='#def'\">×</td></tr></table></td>");
			t.push("</tr></table>");
			t.push("<div class='wrapper' id='divWrapper'>");
			t.push("<div id='divHour'>");
			t.push("<table width='210' height='60' border='0' cellpadding='0' cellspacing='0' style='font-size:13px'>");
			for (r = 0; r < 24; r++) {
				if (r % 8 === 0) {
					t.push("<tr>")
				}
				if (r % 12 === 0) {
					t.push("<td onclick='TopWindow.Zving.TimeSelector.onClick(this)' onmouseover='TopWindow.Zving.TimeSelector.onMouseOver(this)' onmouseout='TopWindow.Zving.TimeSelector.onMouseOut(this)' style='color: #e70'>" + r + "</td>")
				} else {
					t.push("<td onclick='TopWindow.Zving.TimeSelector.onClick(this)' onmouseover='TopWindow.Zving.TimeSelector.onMouseOver(this)' onmouseout='TopWindow.Zving.TimeSelector.onMouseOut(this)'>" + r + "</td>")
				}
				if (r % 8 === 7) {
					t.push("</tr>")
				}
			}
			t.push("</table>");
			t.push("</div>");
			t.push("<div id='divMinute' style='display:none'>");
			var s = [];
			s.push("<table width='210' height='120' border='0' cellpadding='0' cellspacing='0'>");
			for (r = 0; r < 60; r++) {
				if (r % 10 === 0) {
					s.push("<tr>");
					s.push("<td onclick='TopWindow.Zving.TimeSelector.onClick(this)' onmouseover='TopWindow.Zving.TimeSelector.onMouseOver(this)' onmouseout='TopWindow.Zving.TimeSelector.onMouseOut(this)' style='color: #e70'>" + (r >= 10 ? r : "0" + r) + "</td>")
				} else {
					s.push("<td onclick='TopWindow.Zving.TimeSelector.onClick(this)' onmouseover='TopWindow.Zving.TimeSelector.onMouseOver(this)' onmouseout='TopWindow.Zving.TimeSelector.onMouseOut(this)'>" + (r >= 10 ? r : "0" + r) + "</td>")
				}
				if (r % 10 === 9) {
					s.push("</tr>")
				}
			}
			s.push("</table>");
			s.push("</div>");
			t.push(s.join("\n"));
			t.push("<div id='divSecond' style='display:none'>");
			t.push(s.join("\n"));
			t.push("</div>");
			t.push("<table width='100%' border='0' align='left' cellpadding='0' cellspacing='0'>");
			t.push("<tr>");
			t.push("<td width='17%' height='20' class='buttonNow' onclick=\"TopWindow.Zving.TimeSelector.returnTime(true);this.style.backgroundColor='#def'\" onmouseover=\"this.style.backgroundColor='#9cf'\" onmouseout=\"this.style.backgroundColor='#def'\">" + h.get("DateTime.Now") + "</td>");
			t.push("<td width='66%' style='font-size:11px;background-color:#fff6cc;font-weight:bold;color:#258;' id='_TimeSelector_Tip' align='center'>0:00:00</td>");
			t.push("<td width='17%' height='20' class='buttonConfirm' onclick=\"TopWindow.Zving.TimeSelector.returnTime();this.style.backgroundColor='#def'\" onmouseover=\"this.style.backgroundColor='#9cf'\" onmouseout=\"this.style.backgroundColor='#def'\">" + h.get("Common.OK") + "</td>");
			t.push("</tr>");
			t.push("</table>");
			t.push("</td>");
			t.push("</tr>");
			t.push("</table>");
			t.push("</div></body>");
			t.push("<script>z={};z.getById=function(ele){return document.getElementById(ele);};setTime=function(){if(!TopWindow.Zving.TimeSelector.setTime(_DateTimeControl.value)){}TopWindow.Zving.TimeSelector.adjustSize();}<\/script>");
			y.write(t.join("\n"));
			y.close();
			u._DateTimeControl = o;
			u.TopWindow = z;
			u.setTime()
		} else {
			A = z.Zving.getDom("_TimeSelector");
			j.Node.show(A);
			var p = z.Zving.getDom("_TimeSelector_Frame");
			j.Node.show(p);
			p.contentWindow._DateTimeControl = o;
			p.contentWindow.setTime()
		}
		var x = j.Dom.computePositionEx(o, A);
		A.style.top = x.y + "px";
		A.style.left = x.x + "px";
		z.Zving.DateTime.showingID = o.id;
		z.DateTimeWindow = window;
		j.AllDocumentsEvent.on("mousedown", e.close);
		j.Event.lockScroll(window)
	};
	e.onMouseOver = function (p) {
		var q = j.getDom("_TimeSelector_Frame").contentWindow;
		var r = p.parentNode.parentNode.parentNode.parentNode.id;
		var o = [q.z.getById("selectorHour").innerHTML, q.z.getById("selectorMinute").innerHTML, q.z.getById("selectorSecond").innerHTML];
		if (r === "divHour") {
			o[0] = p.innerHTML
		} else {
			if (r === "divMinute") {
				o[1] = p.innerHTML
			} else {
				if (r === "divSecond") {
					o[2] = p.innerHTML
				}
			}
		}
		q.z.getById("_TimeSelector_Tip").innerHTML = o.join(":");
		j.Node.addClass(p, "over")
	};
	e.onMouseOut = function (o) {
		j.Node.removeClass(o, "over")
	};
	e.onClick = function (o) {
		var q = j.getDom("_TimeSelector_Frame").contentWindow;
		j.Node.addClass(o, "selected");
		var r = o.parentNode.parentNode.parentNode.parentNode.id;
		if (r === "divHour") {
			q.z.getById("divHour").getElementsByTagName("td")[parseInt(q.z.getById("selectorHour").innerHTML, 10)].className = "";
			q.z.getById("selectorHour").innerHTML = o.innerHTML;
			e.showType("Minute")
		} else {
			if (r === "divMinute") {
				q.z.getById("divMinute").getElementsByTagName("td")[parseInt(q.z.getById("selectorMinute").innerHTML, 10)].className = "";
				q.z.getById("selectorMinute").innerHTML = o.innerHTML;
				e.showType("Second")
			} else {
				if (r === "divSecond") {
					q.z.getById("divSecond").getElementsByTagName("td")[parseInt(q.z.getById("selectorSecond").innerHTML, 10)].className = "";
					q.z.getById("selectorSecond").innerHTML = o.innerHTML;
					e.returnTime()
				}
			}
		}
		var p = j.rootWin;
		j.Event.unlockScroll(p.DateTimeWindow)
	};
	e.close = function () {
		var p = j.rootWin;
		if (p.Zving.DateTime && p.Zving.getDom("_TimeSelector") && p.Zving.Node.isVisible("_TimeSelector")) {
			var q = p.Zving.getDom("_TimeSelector_Frame");
			try {
				q.contentWindow._DateTimeControl.onblur.apply(q.contentWindow._DateTimeControl, [])
			} catch (o) {}

			j.Node.hide(p.Zving.getDom("_TimeSelector"));
			j.Event.unlockScroll(p.DateTimeWindow);
			p.DateTimeWindow = null;
			p.Zving.DateTime.showingID = false
		}
		j.AllDocumentsEvent.un("mousedown", e.close)
	};
	b.showYearSelector = function () {
		var w = j.getDom("_Calendar_Frame").contentWindow,
		r;
		var u = w.z.getById("_Calendar_Year"),
		t = w.z.getById("_Calendar_YearSelector");
		u.style.display = "none";
		t.style.display = "";
		var s = u.Year;
		var o = b.getDateRange();
		var q = o[0].getFullYear();
		var p = o[1].getFullYear();
		if (p - q < 150) {
			for (r = q; r <= p; r++) {
				t.options.add(new Option(r, r))
			}
		} else {
			for (r = s > 50 ? s - 50 : 0; r <= 50 + parseInt(s, 10); r++) {
				if (r >= q && r <= p) {
					t.options.add(new Option(r, r))
				}
			}
		}
		t.focus();
		t.selectedIndex = 50;
		b.adjustSize()
	};
	b.showMonthSelector = function () {
		var q = j.getDom("_Calendar_Frame").contentWindow;
		var p = q.z.getById("_Calendar_Month"),
		o = q.z.getById("_Calendar_MonthSelector");
		p.style.display = "none";
		o.style.display = "";
		o.focus();
		o.selectedIndex = p.Month;
		b.adjustSize()
	};
	b.hideYearSelector = function () {
		var r = j.getDom("_Calendar_Frame").contentWindow;
		var q = r.z.getById("_Calendar_Year"),
		p = r.z.getById("_Calendar_YearSelector");
		q.style.display = "";
		p.style.display = "none";
		for (var o = p.options.length; o > -1; o--) {
			p.remove(o)
		}
		b.adjustSize()
	};
	b.hideMonthSelector = function () {
		var o = j.getDom("_Calendar_Frame").contentWindow;
		o.z.getById("_Calendar_Month").style.display = "";
		o.z.getById("_Calendar_MonthSelector").style.display = "none";
		b.adjustSize()
	};
	b.adjustSize = function () {
		var q = j.getDom("_Calendar_Frame").contentWindow;
		var o = q.z.getById("calendarWrap");
		var p = j.Node.getSize(q.z.getById("calendarWrap"));
		q.frameElement.height = p.height + 1;
		q.frameElement.width = p.width + 3
	};
	e.adjustSize = function () {
		var p = j.getDom("_TimeSelector_Frame").contentWindow;
		var o = j.Node.getSize(p.z.getById("_TimeSelector_Table"));
		p.frameElement.height = o.height;
		p.frameElement.width = o.width + 3
	};
	b.onYearSelectorChange = function () {
		var r = j.getDom("_Calendar_Frame").contentWindow;
		var q = r.z.getById("_Calendar_Year"),
		p = r.z.getById("_Calendar_YearSelector");
		q.Year = p.value;
		var o = q.Year + "-" + c(r.z.getById("_Calendar_Month").Month + 1, "0", 2) + "-01";
		b.setDate(o);
		q.style.display = "";
		p.style.display = "none";
		b.adjustSize()
	};
	b.onMonthSelectorChange = function () {
		var r = j.getDom("_Calendar_Frame").contentWindow;
		var q = r.z.getById("_Calendar_Month"),
		p = r.z.getById("_Calendar_MonthSelector");
		q.Month = parseInt(p.value, 10);
		var o = r.z.getById("_Calendar_Year").Year + "-" + c(q.Month + 1, "0", 2) + "-01";
		b.setDate(o);
		q.style.display = "";
		p.style.display = "none";
		b.adjustSize()
	};
	b.getDateString = function (o) {
		var u = j.getDom("_Calendar_Frame").contentWindow;
		var r = u._DateTimeControl;
		var t = r.getAttribute("format");
		if (!t) {
			t = "yyyy-MM-dd"
		}
		if (o.Day) {
			var p = o.Day,
			s = u.z.getById("_Calendar_Month").Month,
			q = u.z.getById("_Calendar_Year").Year;
			if (p < 0) {
				p = -p;
				if (s === 0) {
					s = 11;
					q--
				} else {
					s--
				}
			} else {
				if (p > 32) {
					p -= 40;
					if (s === 11) {
						s = 0;
						q++
					} else {
						s++
					}
				}
			}
			t = t.replace("yyyy", q);
			t = t.replace("MM", c(s + 1, "0", 2));
			t = t.replace("dd", c(p, "0", 2));
			return t
		} else {
			if (o.id === "_Calendar_Today") {
				var w = new Date();
				t = t.replace("yyyy", w.getFullYear());
				t = t.replace("MM", c(w.getMonth() + 1, "0", 2));
				t = t.replace("dd", c(w.getDate(), "0", 2));
				return t
			} else {
				return false
			}
		}
	};
	b.onMouseOver = function (o) {
		var p = j.getDom("_Calendar_Frame").contentWindow;
		o.oldCssText = o.style.cssText;
		var q = b.getDateString(o);
		if (q) {
			p.z.getById("_Calendar_Tip").innerHTML = q
		}
		if (o.Day) {
			o.style.cssText = "border-top: 1px solid #06c;border-right: 1px solid #06c;border-bottom: 1px solid #06c;border-left: 1px solid #06c;padding: 2px 2px 0px 2px;background: #EDFBD2;"
		} else {
			o.style.cssText = "background: #9cf;"
		}
		b.isMouseOut = false
	};
	b.onMouseOut = function (o) {
		o.style.cssText = o.oldCssText
	};
	b.returnDate = function (o) {
		var r = j.getDom("_Calendar_Frame").contentWindow;
		var q = r._DateTimeControl;
		var p = false;
		if (q.getAttribute("ztype").toLowerCase() == "datetime") {
			p = true
		}
		if (p) {
			j.Node.addClass(o, "selected");
			j.Node.removeClass(r.lastSelectedCell, "selected");
			r.lastSelectedCell = o
		} else {
			m(q, b.getDateString(o) + (p ? b.getTimeString() : ""));
			o.style.cssText = o.oldCssText
		}
		if (!p) {
			q.fireEvent("onchange");
			b.close()
		} else {
			r.returnDate = b.getDateString(o);
			if (o.id === "_Calendar_Today") {
				r.returnTime = k.getCurrentTime();
				j.Calendar.setDate(r.returnDate);
				j.Calendar.setTime(r.returnDate + " " + r.returnTime)
			}
		}
	};
	b.returnDateTime = function () {
		var q = j.getDom("_Calendar_Frame").contentWindow;
		var p = q._DateTimeControl;
		var o = false;
		if (p.getAttribute("ztype").toLowerCase() == "datetime") {
			o = true
		}
		m(p, q.returnDate + (o ? b.getTimeString() : ""));
		p.fireEvent("onchange");
		b.close()
	};
	b.previousYear = function () {
		var p = j.getDom("_Calendar_Frame").contentWindow;
		var o = (--p.z.getById("_Calendar_Year").Year) + "-" + c(++p.z.getById("_Calendar_Month").Month, "0", 2) + "-01";
		if (!b.isAllowedDate(o)) {
			return
		}
		b.setDate(o);
		b.adjustSize()
	};
	b.nextYear = function () {
		var p = j.getDom("_Calendar_Frame").contentWindow;
		var o = (++p.z.getById("_Calendar_Year").Year) + "-" + c(++p.z.getById("_Calendar_Month").Month, "0", 2) + "-01";
		if (!b.isAllowedDate(o)) {
			return
		}
		b.setDate(o);
		b.adjustSize()
	};
	b.previousMonth = function () {
		var r = j.getDom("_Calendar_Frame").contentWindow;
		var q = r.z.getById("_Calendar_Month").Month,
		p = r.z.getById("_Calendar_Year").Year;
		if (q === 0) {
			q = 11;
			p--
		} else {
			q--
		}
		var o = "" + p + "-" + c(q + 1, "0", 2) + "-01";
		if (!b.isAllowedDate(o)) {
			return
		}
		b.setDate(o);
		b.adjustSize()
	};
	b.nextMonth = function () {
		var r = j.getDom("_Calendar_Frame").contentWindow;
		var q = r.z.getById("_Calendar_Month").Month,
		p = r.z.getById("_Calendar_Year").Year;
		if (q === 11) {
			q = 0;
			p++
		} else {
			q++
		}
		var o = "" + p + "-" + c(q + 1, "0", 2) + "-01";
		if (!b.isAllowedDate(o)) {
			return
		}
		b.setDate(o);
		b.adjustSize()
	};
	b.getDateThreshold = function (t) {
		if (/[\+\-][YMD]\d+/.test(t)) {
			var s = new Date();
			var p = s.getFullYear();
			var r = s.getMonth();
			var o = s.getDate();
			var q = parseInt(t.substring(2), 10);
			if (t.startsWith("-")) {
				q = -q
			}
			if (t.indexOf("Y") >= 0) {
				s.setYear(p + q)
			}
			if (t.indexOf("M") >= 0) {
				s.setMonth(r + q)
			}
			if (t.indexOf("D") >= 0) {
				s.setDate(o + q)
			}
			return s
		} else {
			return k.parseDate(t)
		}
	};
	b.isAllowedDate = function (q) {
		var o = b.getDateRange();
		var p = k.parseDate(q);
		if (o[0].getTime() > p.getTime()) {
			return false
		}
		if (o[1].getTime() < p.getTime()) {
			return false
		}
		return true
	};
	b.getDateRange = function () {
		var s = j.getDom("_Calendar_Frame").contentWindow;
		var q = s._DateTimeControl;
		var t = q.getAttribute("datestart");
		var o = q.getAttribute("dateend");
		var r = k.parseDate("0000-00-00");
		var p = k.parseDate("9999-00-00");
		if (t) {
			r = b.getDateThreshold(t)
		}
		if (o) {
			p = b.getDateThreshold(o)
		}
		return [r, p]
	};
	b.setDate = function (I) {
		var p = j.getDom("_Calendar_Frame").contentWindow;
		var L = p._DateTimeControl;
		var r;
		if (!I) {
			var H = new Date();
			var x = b.getDateRange();
			if (H.getTime() <= x[0].getTime()) {
				H = x[0]
			}
			if (H.getTime() >= x[1].getTime()) {
				H = x[1]
			}
			r = [H.getFullYear(), H.getMonth() + 1, H.getDate()]
		} else {
			var E = L.getAttribute("format");
			if (!E) {
				E = "yyyy-MM-dd"
			}
			r = new Array(3);
			var u = E.indexOf("yyyy");
			if (u >= 0) {
				r[0] = I.substr(u, 4)
			} else {
				alert(h.get("Verify.DateWrong") + h.get("Verify.NoYear"))
			}
			var G = E.indexOf("MM");
			if (G >= 0) {
				r[1] = I.substr(G, 2)
			} else {
				alert(h.get("Verify.DateWrong") + h.get("Verify.NoMonth"))
			}
			var F = E.indexOf("dd");
			if (F >= 0) {
				r[2] = I.substr(F, 2)
			} else {
				alert(h.get("Verify.DateWrong") + h.get("Verify.NoDay"))
			}
		}
		var w = r[0];
		var J = true;
		if (isNaN(w)) {
			w = "2000";
			J = false
		}
		p.z.getById("_Calendar_Year").innerHTML = w;
		p.z.getById("_Calendar_Year").Year = w;
		var K = r.length > 1 ? r[1] - 1 : 0;
		if (r.length === 1) {
			J = false
		}
		if (isNaN(K) || K < 0 || K > 11) {
			K = 0;
			J = false
		}
		b.monthNames = h.get("DateTime.MonthNames").split(",");
		p.z.getById("_Calendar_Month").innerHTML = b.monthNames[K];
		p.z.getById("_Calendar_Month").Month = K;
		var D = r.length > 2 ? r[2] : 0;
		var M = new Date(w, K, 1);
		var z = M.getDay();
		if (K === 0) {
			M.setYear(w - 1);
			M.setMonth(11)
		} else {
			M.setYear(w);
			M.setMonth(K - 1)
		}
		var q = [],
		C,
		A;
		for (C = 28; C < 33; C++) {
			M.setDate(C);
			if (M.getMonth() === K) {
				for (A = C - z; A < C; A++) {
					q.push([0, A])
				}
				break
			}
		}
		M.setYear(w);
		M.setMonth(K);
		for (C = 1; C < 32; C++) {
			if (C >= 28) {
				M.setDate(C);
				if (M.getMonth() != K) {
					break
				}
			}
			if ((z + C) % 7 === 0 || (z + C) % 7 === 1) {
				q.push([1, C])
			} else {
				q.push([2, C])
			}
		}
		for (A = 0; A < 7 - ((C - 1 + z) % 7 === 0 ? 7 : (C - 1 + z) % 7); A++) {
			q.push([3, A + 1])
		}
		var t = [],
		s = p.z.getById("_Calendar_Table").rows;
		for (C = 0; C < q.length; C++) {
			var B = q[C][0];
			var o = s[Math.floor(2 + C / 7)].cells[C % 7];
			o.innerHTML = q[C][1];
			if (B === 0) {
				o.className = "day disabled";
				o.Day = -q[C][1]
			}
			if (B === 3) {
				o.className = "day disabled";
				o.Day = 40 + q[C][1]
			}
			if (B === 1) {
				o.className = "day weekend";
				o.Day = q[C][1]
			}
			if (B === 2) {
				o.className = "day";
				o.Day = q[C][1]
			}
		}
		for (A = 4; A < 6; A++) {
			if (A > q.length / 7 - 1) {
				p.z.getById("_Calendar_DayRow" + A).style.display = "none"
			} else {
				p.z.getById("_Calendar_DayRow" + A).style.display = ""
			}
		}
		if (r.length === 2) {
			J = false
		}
		if (isNaN(D) || D < 1 || D > 31) {
			D = 1;
			J = false
		}
		p.z.getById("_Calendar_Day" + (D - 1 + z)).className += " selected";
		p.lastSelectedCell = p.z.getById("_Calendar_Day" + (D - 1 + z));
		var y = w + "-" + c(K + 1, "0", 2) + "-" + c(D, "0", 2);
		p.z.getById("_Calendar_Tip").innerHTML = y;
		p.returnDate = y;
		M = new Date();
		if ((M.getFullYear()) === w && M.getMonth() === K) {
			p.z.getById("_Calendar_Day" + (M.getDate() - 1 + z)).className += " today"
		}
		return J
	};
	b.show = function (o, r) {
		var q,
		u;
		b.monthNames = h.get("DateTime.MonthNames").split(",");
		b.weekNames = h.get("DateTime.WeekNames").split(",");
		var A = j.rootWin,
		t;
		o = j.getDom(o);
		var B = false;
		if (o.getAttribute("ztype").toLowerCase() == "datetime") {
			B = true
		}
		try {
			o.onfocus()
		} catch (x) {}

		r = r ? r : l(o);
		r = r + "";
		if (r.indexOf(" ") > 0) {
			u = r.split(" ");
			r = u[0];
			q = u[1]
		}
		var C = A.Zving.getDom("_Calendar");
		if (!C) {
			C = A.document.createElement("div");
			C.id = "_Calendar";
			C.style.position = "absolute";
			C.style.zIndex = 10400;
			C.innerHTML = "<iframe id='_Calendar_Frame' frameborder=0 scrolling=no width=194 height=153></iframe>";
			C.style.width = "194px";
			A.document.body.appendChild(C);
			C.style.display = "";
			var w = A.Zving.getDom("_Calendar_Frame").contentWindow;
			var z = w.document;
			z.open();
			u = [];
			u.push("<style>");
			u.push(".nostyle{}");
			u.push(".calendar {position: absolute; border-top: 1px solid #777; border-right: 1px solid #555; border-bottom: 0px solid #444; border-left: 1px solid #666; font-size: 11px; cursor: default; background: #ddd;}");
			u.push(".calendar table { font-size: 11px; color: #06c; cursor: default; background: #def; font-family: tahoma,verdana,sans-serif;}");
			u.push(".daynames{color:555;}");
			u.push(".calendar .button {text-align: center;padding: 1px;border-top: 1px solid #fff; border-right: 1px solid #999; border-bottom: 1px solid #999; border-left: 1px solid #fff;}");
			u.push(".calendar .buttontoday {text-align: center; padding: 1px; border-top: 1px solid #999; border-right: 1px solid #999; border-bottom: 1px solid #666; color:#000;}");
			u.push(".calendar .buttonclose {text-align: center; padding: 1px; border-top: 1px solid #fff; border-right: 0px solid #999; border-bottom: 1px solid #999; border-left: 1px solid #fff;}");
			u.push(".calendar thead .title {font-weight: bold; border-right: 1px solid #999; border-bottom: 1px solid #999; background: #B3D4FF; color: #258; text-align: center;}");
			u.push(".calendar thead .name {border-bottom: 1px solid #ccc; padding: 2px; text-align: right; background: #E8EEF4;}");
			u.push(".calendar .weekend {color: #e70;}");
			u.push(".calendar tbody .day {width: 2em; text-align: right; padding: 2px 4px 2px 2px; background: #fff;}");
			u.push(".calendar tbody td.selected {font-weight: bold; border-top: 1px solid #06c; border-right: 1px solid #06c; border-bottom: 1px solid #06c; border-left: 1px solid #06c; padding: 2px 2px 0px 2px; background: #B3D4FF;}");
			u.push(".calendar tbody td.weekend {color: #e70;}");
			u.push(".calendar tbody td.today {font-weight: bold;color: #03f;}");
			u.push(".calendar tbody .disabled { color: #999; }");
			u.push(".calendar tfoot .tiptoday {padding: 2px; border-top: 1px solid #999; border-right: 0px solid #999; border-bottom: 1px solid #666; border-left: 0px solid #999; background: #fff6cc; font-weight: bold; color: #258; text-align: center;}");
			u.push("body {margin: 0px; }");
			u.push("</style>");
			u.push("<div class='calendar' id='calendarWrap'>");
			u.push("<TABLE oncontextmenu='return false' onselectstart='return false;' id=_Calendar_Table cellSpacing=0 cellPadding=0 width=190>");
			u.push("  <THEAD>");
			u.push("    <TR><TD colSpan=7>");
			u.push("      <TABLE class=nostyle cellSpacing=0 cellPadding=0 width='100%'>");
			u.push("        <TBODY>");
			u.push("          <TR height=20>");
			u.push("            <TD class=button onmouseover=TopWindow.Zving.Calendar.onMouseOver(this); onclick=TopWindow.Zving.Calendar.previousYear(); onmouseout=TopWindow.Zving.Calendar.onMouseOut(this); width=12>&#8249;</TD>");
			u.push("            <TD class=title><DIV id=_Calendar_Year style='WIDTH: 63px' onclick=TopWindow.Zving.Calendar.showYearSelector();>2006</DIV>");
			u.push("              <SELECT id=_Calendar_YearSelector onBlur='TopWindow.Zving.Calendar.hideYearSelector()' style='DISPLAY: none; FONT-SIZE: 11px; WIDTH: 63px' onChange='TopWindow.Zving.Calendar.onYearSelectorChange()'>");
			u.push("              </SELECT></TD>");
			u.push("            <TD class=button onmouseover=TopWindow.Zving.Calendar.onMouseOver(this); onclick=TopWindow.Zving.Calendar.nextYear(); onmouseout=TopWindow.Zving.Calendar.onMouseOut(this); width=12>&#8250;</TD>");
			u.push("            <TD class=button onmouseover=TopWindow.Zving.Calendar.onMouseOver(this); onclick=TopWindow.Zving.Calendar.previousMonth(); onmouseout=TopWindow.Zving.Calendar.onMouseOut(this); width=12>&#8249;</TD>");
			u.push("            <TD class=title><DIV id=_Calendar_Month style='WIDTH: 63px' onclick=TopWindow.Zving.Calendar.showMonthSelector();>" + b.monthNames[11] + "</DIV>");
			u.push("              <SELECT id=_Calendar_MonthSelector onblur=TopWindow.Zving.Calendar.hideMonthSelector() style='DISPLAY: none; FONT-SIZE: 11px; WIDTH: 63px' onchange=TopWindow.Zving.Calendar.onMonthSelectorChange()>");
			u.push("                <OPTION value=0 selected>" + b.monthNames[0] + "</OPTION>");
			for (t = 1; t < 12; t++) {
				u.push("                <OPTION value=" + t + ">" + b.monthNames[t] + "</OPTION>")
			}
			u.push("              </SELECT></TD>");
			u.push("        <TD class=button onmouseover=TopWindow.Zving.Calendar.onMouseOver(this); onclick=TopWindow.Zving.Calendar.nextMonth(); onmouseout=TopWindow.Zving.Calendar.onMouseOut(this); width=12>&#8250;</TD>");
			u.push("          <TD class=buttonclose onmouseover=TopWindow.Zving.Calendar.onMouseOver(this); onclick=TopWindow.Zving.Calendar.close(); onmouseout=TopWindow.Zving.Calendar.onMouseOut(this); width=16>×</TD>");
			u.push("        </TR>");
			u.push("        </TBODY>");
			u.push("      </TABLE>");
			u.push("      </TD>");
			u.push("    </TR>");
			u.push("    <TR class=daynames>");
			u.push("      <TD class='name weekend'>" + b.weekNames[0] + "</TD>");
			u.push("      <TD class=name>" + b.weekNames[1] + "</TD>");
			u.push("      <TD class=name>" + b.weekNames[2] + "</TD>");
			u.push("      <TD class=name>" + b.weekNames[3] + "</TD>");
			u.push("      <TD class=name>" + b.weekNames[4] + "</TD>");
			u.push("      <TD class=name>" + b.weekNames[5] + "</TD>");
			u.push("      <TD class='name weekend'>" + b.weekNames[6] + "</TD>");
			u.push("    </TR>");
			u.push("  </THEAD>");
			u.push("  <TBODY id=_Calendar_Body>");
			for (t = 0; t < 6; t++) {
				u.push("    <TR class=daysrow id=_Calendar_DayRow" + t + ">");
				for (var s = 0; s < 7; s++) {
					u.push("      <TD class=day id=_Calendar_Day" + (t * 7 + s) + " onmouseover=TopWindow.Zving.Calendar.onMouseOver(this); onclick=TopWindow.Zving.Calendar.returnDate(this); onmouseout=TopWindow.Zving.Calendar.onMouseOut(this);>&nbsp;</TD>")
				}
				u.push("    </TR>")
			}
			u.push("  </TBODY>");
			u.push("  <TFOOT>");
			u.push("    <TR class=footrow>");
			u.push("      <TD class=buttontoday id=_Calendar_Today onmouseover=TopWindow.Zving.Calendar.onMouseOver(this); onclick=TopWindow.Zving.Calendar.returnDate(this); onmouseout=TopWindow.Zving.Calendar.onMouseOut(this); colSpan=2>" + (B ? h.get("DateTime.Now") : h.get("DateTime.Today")) + "</TD>");
			u.push("      <TD class=tiptoday id=_Calendar_Tip align=middle colSpan=5>&nbsp;</TD>");
			u.push("    </TR>");
			u.push("  </TFOOT>");
			u.push("</TABLE>");
			u.push(d(q, !B));
			u.push("</div>");
			u.push("<script>z={},z.getById=function(ele){return document.getElementById(ele);};setDate=function(){TopWindow.Zving.Calendar.setDate(_DateTimeControl.value);TopWindow.Zving.Calendar.setTime(_DateTimeControl.value);TopWindow.Zving.Calendar.adjustSize();}<\/script>");
			z.write(u.join("\n"));
			z.close();
			w._DateTimeControl = o;
			w.TopWindow = A;
			w.setDate()
		} else {
			C = A.Zving.getDom("_Calendar");
			j.Node.show(C);
			var p = A.Zving.getDom("_Calendar_Frame");
			j.Node.show(p);
			p.contentWindow._DateTimeControl = o;
			p.contentWindow.document.getElementById("timeSelectorWrapTable").style.display = B ? "block" : "none";
			p.contentWindow.document.getElementById("_Calendar_Today").innerHTML = B ? h.get("DateTime.Now") : h.get("DateTime.Today");
			p.contentWindow.setDate()
		}
		var y = j.Dom.computePositionEx(o, C);
		C.style.top = y.y + "px";
		C.style.left = y.x + "px";
		A.Zving.DateTime.showingID = o.id;
		A.DateTimeWindow = window;
		j.AllDocumentsEvent.on("mousedown", b.close);
		j.Event.lockScroll(window)
	};
	b.close = function () {
		var p = j.rootWin;
		if (p.Zving.DateTime && p.Zving.getDom("_Calendar") && p.Zving.Node.isVisible("_Calendar")) {
			var q = p.Zving.getDom("_Calendar_Frame");
			try {
				q.contentWindow._DateTimeControl.onblur.apply(q.contentWindow._DateTimeControl, [])
			} catch (o) {}

			j.Node.hide(p.Zving.getDom("_Calendar"));
			j.Event.unlockScroll(p.DateTimeWindow);
			p.DateTimeWindow = null;
			p.Zving.DateTime.showingID = false
		}
		j.AllDocumentsEvent.un("mousedown", b.close)
	};
	$(window).on("unload", function () {
		b.close();
		e.close()
	});
	j.Calendar = b;
	j.DateTime = k;
	j.TimeSelector = e
})();
(function () {
	var d = window.Zving,
	b = d.Page;
	var c = 0;
	function a(f, g, e) {
		this.type = e || "bubble";
		this.el = d.getDom(f);
		this.$el = $(this.el);
		this.Message = g;
		this.AutoClose = false;
		this.Clock = 9;
		this.initHtml()
	}
	a.AutoCloseTips = [];
	a.prototype.initHtml = function () {
		var e = [];
		if (this.type == "notice") {
			e.push('<span class="inline-block" style="background-color:#FFFCCD; border:1px solid #FFC94A;">');
			e.push('    <span class="tooltipcontent">' + this.Message + "</span>");
			e.push("</span>")
		} else {
			e.push("<table border='0' cellspacing='0' cellpadding='0' class='tooltiptable'>");
			e.push("  <tr><td class='corner topleft'> </td><td class='topcenter'> </td>");
			e.push("    <td class='corner topright'> </td></tr><tr><td class='bodyleft'> </td>");
			e.push("    <td class='tooltipcontent'>" + this.Message + "</td>");
			e.push("    <td class='bodyright'> </td></tr>");
			e.push("  <tr><td class='corner footerleft'> </td><td class='footercenter'> </td>");
			e.push("    <td class='corner footerright'> </td></tr>");
			e.push("</table>");
			e.push("<div class='tooltipfang'></div>")
		}
		this.Html = e.join("")
	};
	a.prototype.show = function () {
		var e = document.createElement("div");
		e.id = "" + (++c);
		e.style.position = "absolute";
		e.style.left = "0px";
		e.style.top = "0px";
		document.body.appendChild(e);
		e.innerHTML = this.Html;
		var l = this.$el.offset();
		var f = d.Node.getSize(this.el);
		var h = d.Node.getSize(e);
		var n = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
		if (n - l.left - f.width < 100) {
			this.Clock = 3
		}
		var j = this.Clock;
		var m,
		k;
		if (j == 2 || j == 3 || j == 4) {
			m = l.left - f.width + 18
		}
		if (j == 8 || j == 9 || j == 10) {
			m = l.left + f.width
		}
		if (j == 11 || j == 12 || j == 1) {
			k = l.top + f.height
		}
		if (j == 5 || j == 6 || j == 7) {
			k = l.top - f.height
		}
		if (j == 9) {
			k = l.top - h.height / 2
		}
		if (j == 3) {
			k = l.top - 15
		}
		e.className = "tooltip callout" + this.Clock;
		e.style.left = m + "px";
		e.style.top = k + "px";
		e.style.zIndex = 850;
		d.Node.show(e);
		this.Div = e;
		if (this.AutoClose) {
			a.AutoCloseTips.push(this)
		}
	};
	a.prototype.close = function () {
		if (this.Div) {
			this.Div.outerHTML = "";
			this.Div = null
		}
	};
	a.show = function (h, j, e, f) {
		h = d.getDom(h);
		if (!h) {
			return
		}
		var g = new a(h, j);
		g.AutoClose = e;
		if (f) {
			g.Clock = f
		}
		g.show();
		if (g.Div.style.left == "0px") {
			setTimeout(function () {
				g.close();
				g.show()
			}, 200)
		}
		if (!g.AutoClose) {
			if (!h._Tips) {
				h._Tips = []
			}
			h._Tips.push(g)
		}
		return g
	};
	a.getTipCount = function (e) {
		e = d.getDom(e);
		if (!e._Tips) {
			return 0
		}
		return e._Tips.length
	};
	a.close = function (f) {
		f = d.getDom(f);
		if (f._Tips) {
			for (var e = 0; e < f._Tips.length; e++) {
				if (f._Tips[e]) {
					f._Tips[e].close()
				}
			}
			f._Tips = []
		}
	};
	a.closeAll = function () {
		var e = a.AutoCloseTips;
		for (var f = e.length; f > 0; f--) {
			e[f - 1].close();
			e.splice(f - 1, 1)
		}
	};
	$(document).on("mousedown.tip", a.closeAll);
	$(window).on("unload", function () {
		$(document).off("mousedown.tip")
	});
	d.Tip = a;
	d.importCss("Components/tip.css")
})();
(function () {
	var z = window.Zving,
	$V = z.Node.getValue,
	Tip = z.Tip,
	Lang = z.Lang,
	Verify = {};
	Verify.tipType = "bubble";
	Verify.autoCloseOther = function (evt, ele) {
		if (!ele) {
			evt = z.getEvent(evt);
			ele = evt.target || evt.srcElement
		}
		var ztype = ele.getAttribute("ztype");
		if (ztype) {
			ztype = ztype.toLowerCase()
		}
		if (ztype != "select" && z.Selector) {
			z.Selector.close()
		}
		if (ztype != "date" && z.Calendar) {
			z.Calendar.close()
		}
		if (ztype != "time" && z.TimeSelector) {
			z.TimeSelector.close()
		}
	};
	Verify.checkOne = function (evt, ele) {
		if (!ele) {
			evt = z.getEvent(evt);
			ele = evt.target || evt.srcElement
		}
		var v = ele.getAttribute("verify");
		if (!v) {
			Verify.closeTip(ele);
			return
		}
		var msg = [];
		var anyFlag = false;
		var Features = v.split("&&");
		var value = $V(ele);
		if (ele.type == "radio" || ele.type == "checkbox") {
			if (ele.name) {
				value = $NV(ele.name)
			}
		}
		if (value) {
			value = ("" + value).trim()
		}
		for (var i = 0; i < Features.length; i++) {
			var arr = Features[i].split("|");
			var name = "";
			var rule;
			if (arr.length == 2) {
				name = arr[0];
				rule = arr[1]
			} else {
				rule = Features[i]
			}
			var op = "=";
			if (rule.indexOf("=") < 0) {
				if (rule.indexOf(">") > 0) {
					op = ">"
				} else {
					if (rule.indexOf("<") > 0) {
						op = "<"
					}
				}
			} else {
				if (rule.charAt(rule.indexOf("=") - 1) == ">") {
					op = ">="
				} else {
					if (rule.charAt(rule.indexOf("=") - 1) == "<") {
						op = "<="
					}
				}
			}
			var fName = null;
			var fValue = null;
			var pattern;
			if (rule.indexOf(op) > 0) {
				fName = rule.substring(0, rule.indexOf(op));
				fValue = rule.substring(rule.indexOf(op) + op.length)
			} else {
				fName = rule
			}
			if (fName == "Any") {
				anyFlag = true
			} else {
				if (fName == "Regex") {
					fValue = rule.substring(6);
					if (value === null || value === "" || !fValue) {
						continue
					}
					var reg = fValue;
					if (!reg.startWith("^")) {
						reg = "^" + reg
					}
					if (!reg.endWith("$")) {
						reg += "$"
					}
					if (!new RegExp(reg).test(value)) {
						msg.push(name)
					}
				} else {
					if (fName == "Script") {
						if (!fValue) {
							continue
						}
						if (!eval(fValue)) {
							msg.push(name)
						}
					} else {
						if (fName == "NotNull") {
							if (value === null || value === "") {
								if (ele.getAttribute("ztype") && ele.getAttribute("ztype").toLowerCase() == "select") {
									if (ele.value.length === 0) {
										msg.push(Lang.get("Verify.MustChoose") + name)
									}
								} else {
									msg.push(name + Lang.get("Verify.NotNull"))
								}
							}
						} else {
							if (fName == "Number") {
								if (value === null || value === "") {
									continue
								}
								if (!z.String.isNumber(value)) {
									msg.push(name + Lang.get("Verify.MustBe") + Lang.get("Verify.Number"))
								}
							} else {
								if (fName == "Time") {
									if (value === null || value === "") {
										continue
									}
									if (!z.String.isTime(value)) {
										msg.push(value + Lang.get("Verify.NotRight") + Lang.get("Verify.Time"))
									}
								} else {
									if (fName == "Int") {
										if (value === null || value === "") {
											continue
										}
										if (!z.String.isInt(value)) {
											msg.push(name + Lang.get("Verify.MustBe") + Lang.get("Verify.Int"))
										}
									} else {
										if (fName == "Date") {
											if (value === null || value === "") {
												continue
											}
											if (!z.String.isDate(value)) {
												msg.push(name + Lang.get("Verify.MustBeRight") + Lang.get("Verify.Date"))
											}
										} else {
											if (fName == "Time") {
												if (value === null || value === "") {
													continue
												}
												if (!z.String.isTime(value)) {
													msg.push(name + Lang.get("Verify.MustBeRight") + Lang.get("Verify.Time"))
												}
											} else {
												if (fName == "DateTime") {
													if (value === null || value === "") {
														continue
													}
													if (!z.String.isDateTime(value)) {
														msg.push(name + Lang.get("Verify.MustBeRight") + Lang.get("Verify.DateTime"))
													}
												} else {
													if (fName == "Email") {
														if (value === null || value === "") {
															continue
														}
														pattern = /^\w+([\-+.]\w+)*@\w+([\-.]\w+)*\.\w+([\-.]\w+)*$/;
														if (value && value.match(pattern) == null) {
															msg.push(name + Lang.get("Verify.NotRight") + Lang.get("Verify.Email"))
														}
													} else {
														if (fName == "ZipCode") {
															if (value === null || value === "") {
																continue
															}
															pattern = /^[0-9]\d{5}(?!\d)$/;
															if (value && value.match(pattern) == null) {
																msg.push(name + Lang.get("Verify.NotRight") + Lang.get("Verify.Zip"))
															}
														} else {
															if (fName == "CnTel") {
																if (value === null || value === "") {
																	continue
																}
																pattern = /^\d{3}-\d{8}|\d{4}-\d{7}$/;
																if (value && value.match(pattern) == null) {
																	msg.push(name + Lang.get("Verify.NotRight") + Lang.get("Verify.FixedTelNumber"))
																}
															} else {
																if (fName == "CnPhone") {
																	if (value === null || value === "") {
																		continue
																	}
																	pattern1 = /^\d{3,4}-\d{7,8}$/;
																	pattern2 = /^\d{11}$/;
																	if (value && value.match(pattern1) == null && value.match(pattern2) == null) {
																		msg.push(name + Lang.get("Verify.NotRight") + Lang.get("Verify.TelNumber"))
																	}
																} else {
																	if (fName == "CnMobile") {
																		if (value === null || value === "") {
																			continue
																		}
																		pattern = /^\d{11}$/;
																		if (value && value.match(pattern) == null) {
																			msg.push(name + Lang.get("Verify.NotRight") + Lang.get("Verify.MobileNumber"))
																		}
																	} else {
																		if (fName == "IDCardNo") {
																			if (value === null || value === "") {
																				continue
																			}
																			if (!Verify.isIDCardNo(value)) {
																				msg.push(name + Lang.get("Verify.NotRight") + Lang.get("Verify.IDNumber"))
																			}
																		} else {
																			if (fName == "Length") {
																				if (value === null || value === "") {
																					continue
																				}
																				if (isNaN(fValue)) {
																					msg.push(Lang.get("Verify.RuleError") + Lang.get("Verify.BackOfLength") + Lang.get("Verify.Number"))
																				} else {
																					try {
																						var len = parseInt(fValue, 10);
																						if (op == "=" && value.length != len) {
																							msg.push(name + Lang.get("Verify.Length") + Lang.get("Verify.MustBe") + len + Lang.get("Verify.char"))
																						} else {
																							if (op == ">" && value.length <= len) {
																								msg.push(name + Lang.get("Verify.Length") + Lang.get("Verify.MustGreaterThan") + len + Lang.get("Verify.char"))
																							} else {
																								if (op == ">=" && value.length < len) {
																									msg.push(name + Lang.get("Verify.Length") + Lang.get("Verify.MustEqualOrGreaterThan") + len + Lang.get("Verify.char"))
																								} else {
																									if (op == "<" && value.length >= len) {
																										msg.push(name + Lang.get("Verify.Length") + Lang.get("Verify.MustLessThan") + len + Lang.get("Verify.char"))
																									} else {
																										if (op == "<=" && value.length > len) {
																											msg.push(name + Lang.get("Verify.Length") + Lang.get("Verify.MustEqualOrLessThan") + len + Lang.get("Verify.char"))
																										}
																									}
																								}
																							}
																						}
																					} catch (ex) {
																						msg.push(Lang.get("Verify.RuleError") + Lang.get("Verify.BackOfLength") + Lang.get("Verify.Int") + ex.message)
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if (!anyFlag && ele.getAttribute("ztype") && ele.getAttribute("ztype").toLowerCase() == "select" && ele.parentNode.input) {
			if (!ele.parentNode.getAttribute("listURL") && !z.Selector.verifyInput(ele)) {
				msg.push(Lang.get("Verify.InputValue") + Lang.get("Verify.NotAnOption"))
			}
		}
		if (msg.length > 0) {
			var txt = msg.join("<br>");
			if (txt != ele._VerifyMsg) {
				Verify.closeTip(ele);
				var tip;
				var afterEle = $(ele).data("showTipAfter");
				if (afterEle) {
					tip = Tip.show(z.getDom(afterEle), txt)
				} else {
					tip = Tip.show(ele, txt)
				}
				ele._VerifyTip = tip;
				ele._VerifyMsg = txt
			}
		} else {
			if ((ele.type == "radio" || ele.type == "checkbox") && ele.name) {
				$N(ele.name).each(function (el) {
					Verify.closeTip(el)
				})
			} else {
				Verify.closeTip(ele)
			}
		}
	};
	Verify.closeTip = function (ele, evt) {
		if (!ele) {
			evt = z.getEvent(evt);
			ele = evt.target || evt.srcElement
		}
		if (ele.type == "blur") {
			ele = ele.target || ele.srcElement
		}
		if (ele._VerifyTip) {
			ele._VerifyTip.close();
			ele._VerifyTip = null;
			ele._VerifyMsg = null
		}
	};
	Verify.hasError = function (noCheckArr, ele, dialogFlag) {
		var arr;
		ele = z.getDom(ele || document.body);
		arr = z.Node.getByTag(ele, "input").concat(z.Node.getByTag(ele, "textarea"));
		var firstEle = false;
		for (var i = 0; i < arr.length; i++) {
			var el = arr[i];
			var id = el.id;
			if (el.getAttribute("ztype") == "select") {
				id = el.parentElement.id
			}
			var flag = false;
			if (noCheckArr) {
				for (var j = 0; j < noCheckArr.length; j++) {
					if (id == z.getDom(noCheckArr[j]).id) {
						flag = true
					}
				}
			}
			if (flag) {
				Verify.closeTip(el);
				continue
			}
			Verify.checkOne(null, el);
			if (!firstEle && el._VerifyTip) {
				firstEle = el
			}
		}
		if (firstEle) {
			if (dialogFlag === true) {
				try {
					firstEle.focus()
				} catch (e) {}

			} else {
				Dialog.alert(Lang.get("Verify.HasError"), function () {
					try {
						firstEle.focus()
					} catch (e) {}

				})
			}
			return true
		}
		return false
	};
	Verify.check = function (ele) {
		return Verify.hasError(null, ele, true)
	};
	Verify._cache = {};
	Verify.initCtrl = function (elem) {
		ele = z.getDom(typeof elem == "string" ? elem : elem.id || elem);
		//ele.attachEvent("onfocus", Verify.autoCloseOther);
		var v = ele.getAttribute("verify");
		if (v) {
			ele.attachEvent("onfocus", Verify.checkOne);
			//ele.attachEvent("onkeyup", Verify.checkOne);
			//ele.attachEvent("onchange", Verify.checkOne);
			if (!z.isIE) {
				ele.addEventListener("input", Verify.checkOne, false)
			}
			ele.attachEvent("onblur", Verify.closeTip);
			var condition = ele.getAttribute("condition");
			if (v.indexOf("NotNull") >= 0) {
				var ztype = ele.getAttribute("ztype");
				if (ztype) {
					ztype = ztype.toLowerCase()
				}
				if (ztype == "select") {
					ele = $("#" + ele.id).parent("div")[0]
				}
				if (/^date|time$/i.test(ztype)) {
					ele = z.getDom(ele.id).nextSibling
				}
				if (ele.type == "radio" || ele.type == "checkbox") {
					if (ele.name) {
						var sameNameEls = z.$N(ele.name);
						ele = sameNameEls[sameNameEls.length - 1];
						sameNameEls.each(function (el) {
							$(el).data("showTipAfter", ele)
						})
					}
					return
				}
				if (ele.getAttribute("showtipafter")) {
					$(ele).data("showTipAfter", $(ele.getAttribute("showtipafter"))[0])
				}
				if (!ele.nextSibling || !ele.nextSibling.getAttribute || ele.nextSibling.getAttribute("ztype") != "Verify") {
					var display = "";
					if (!z.Node.isVisible(ele) && z.Node.isVisible(ele.parentNode)) {
						display = "display:none"
					}
					ele.insertAdjacentHTML("afterEnd", "<span style='color:red;padding-left:2px;padding-top:13px;" + display + "' ztype='Verify'>*</span>")
				}
			}
		}
	};
	Verify.getBirthDateFromIDCardNo = function (id) {
		if (id == null) {
			return null
		}
		if (id.length == 15) {
			return "19" + id.substring(6, 8) + "-" + id.substring(8, 10) + "-" + id.substring(10, 12)
		}
		if (id.length == 18) {
			return id.substring(6, 10) + "-" + id.substring(10, 12) + "-" + id.substring(12, 14)
		}
		return null
	};
	Verify.getGenderFromIDCardNo = function (id) {
		if (id == null) {
			return null
		}
		if (id.length == 15) {
			return "13579".indexOf(id.substring(14, 15)) != -1 ? "M" : "F"
		}
		if (id.length == 18) {
			return "13579".indexOf(id.substring(16, 17)) != -1 ? "M" : "F"
		}
		return null
	};
	Verify.isIDCardNo = function (id) {
		if (!id) {
			return false
		}
		id = id.toLowerCase();
		if (id.length != 15 && id.length != 18) {
			return false
		}
		var y,
		m,
		d;
		if (id.length == 15) {
			y = parseInt("19" + id.substring(6, 8), 10);
			m = parseInt(id.substring(8, 10), 10);
			d = parseInt(id.substring(10, 12), 10)
		} else {
			if (id.length == 18) {
				if (id.indexOf("x") >= 0 && id.indexOf("x") != 17) {
					return false
				}
				var verifyBit;
				var sum = id.charAt(0) * 7 + id.charAt(1) * 9 + id.charAt(2) * 10 + id.charAt(3) * 5 + id.charAt(4) * 8 + id.charAt(5) * 4 + id.charAt(6) * 2 + id.charAt(7) * 1 + id.charAt(8) * 6 + id.charAt(9) * 3 + id.charAt(10) * 7 + id.charAt(11) * 9 + id.charAt(12) * 10 + id.charAt(13) * 5 + id.charAt(14) * 8 + id.charAt(15) * 4 + id.charAt(16) * 2;
				sum = sum % 11;
				switch (sum) {
				case 0:
					verifyBit = "1";
					break;
				case 1:
					verifyBit = "0";
					break;
				case 2:
					verifyBit = "X";
					break;
				case 3:
					verifyBit = "9";
					break;
				case 4:
					verifyBit = "8";
					break;
				case 5:
					verifyBit = "7";
					break;
				case 6:
					verifyBit = "6";
					break;
				case 7:
					verifyBit = "5";
					break;
				case 8:
					verifyBit = "4";
					break;
				case 9:
					verifyBit = "3";
					break;
				case 10:
					verifyBit = "2";
					break
				}
				if (id.charAt(17) != verifyBit) {
					return false
				}
				y = parseInt(id.substring(6, 10), 10);
				m = parseInt(id.substring(10, 12), 10);
				d = parseInt(id.substring(12, 14), 10)
			}
		}
		var currentY = new Date().getYear();
		if (z.isGecko) {
			currentY += 1900
		}
		if (!y || y > currentY || y < 1870) {
			return false
		}
		if (!m || m < 1 || m > 12) {
			return false
		}
		if (!d || d < 1 || d > 31) {
			return false
		}
		return true
	};
	z.Verify = Verify
})();
(function () {
	var e = window.Zving,
	d = e.Server,
	c = e.Constant,
	a = e.CONTEXTPATH,
	b = {};
	b.BackendMethod = "com.zving.framework.ui.controls.DataListUI.doWork";
	b.init = function (f) {
		f = e.getDom(f);
		var g = f.id;
		b.setParam(f, c.ID, g);
		b.setParam(f, c.Method, f.getAttribute("method"));
		b.setParam(f, c.TagBody, f.TagBody);
		f.getParam = function (h) {
			return b.getParam(f, h)
		};
		f.setParam = function (h, j) {
			return b.setParam(f, h, j)
		};
		f.loadData = function (h) {
			b.loadData(f, h)
		};
		b.resumePagebar(f);
		if (e.getDom(g).getAttribute("autopagesize") === "true") {
			e.Page.onLayout(function () {
				b.computePageSize(f);
				b.resumePagebar(f)
			})
		}
		b.sortableInit(f)
	};
	b.sortableInit = function (j) {
		j = e.getDom(j);
		if (j.getAttribute("sortend")) {
			var g = window["eval"](j.getAttribute("sortend"));
			var f = j.getAttribute("draghandle");
			var h = j.getAttribute("listNodes");
			if (!h) {
				h = b.getListNodes(j)
			}
			b.sortable(j, f, h, g)
		}
	};
	b.getListNodes = function (j) {
		var g = $(j),
		f,
		h,
		k;
		if (g.attr("listnodes")) {
			g.data("listNodes", $(g.attr("listnodes")))
		} else {
			if (!j.nextSibling) {
				f = e.Node.nextElement(j.parentNode)
			} else {
				f = e.Node.nextElement(j)
			}
			if (/^(th|td|tr|tb|tf)/i.test(f.nodeName)) {
				k = e.Node.getParent(f, "table");
				h = k.rows
			} else {
				k = f.parentNode;
				h = k.children
			}
			g.data("listNodes", $(h))
		}
		return g.data("listNodes")
	};
	b.getListContainer = function (h) {
		var f = $(h),
		g,
		k,
		j;
		if (!f.data("listContainer")) {
			if (f.attr("listcontainer")) {
				f.data("listContainer", $(f.attr("listcontainer")))
			} else {
				g = b.getListNodes(h);
				listNodes_firstNode = g[0];
				k = listNodes_firstNode.parentNode;
				f.data("listContainer", k)
			}
		}
		return f.data("listContainer")
	};
	b.resumePagebar = function (t) {
		t = e.getDom(t);
		var j = t.id;
		var l = e.getDom("_PageBar_" + j);
		if (l) {
			var f = $(l);
			var m = Number(b.getParam(j, c.PageIndex));
			var n = Number(b.getParam(j, c.PageTotal));
			var r = Number(b.getParam(j, c.Size));
			var o = Math.floor(n / r);
			if (n % r === 0) {
				o--
			}
			var p = f.find(".first")[0];
			var h = f.find(".previous")[0];
			var g = f.find(".next")[0];
			var k = f.find(".last")[0];
			f.find(".js_total").html(n);
			f.find(".js_pageSize").html(r);
			f.find(".js_totalPages").html(1 + o);
			f.find(".js_pageIndex").html(1 + m);
			var s = f.find("input.gotopage");
			if (s.length) {
				s.val(1 + m).width(Math.max(String(1 + m).length * 7 + 1, 15))
			}
			if (f.attr("pagebartype") == "1") {
				var q = f.find(".tfoot-fl");
				q.attr("title", q.attr("title").replace(/共 \d+ 条记录/, "共 " + n + " 条记录").replace(/共 \d+ 條記錄/, "共 " + n + " 條記錄").replace(/每页 \d+ 条/, "每页 " + r + " 条").replace(/当前第 \d+ 页/, "当前第 " + (1 + m) + " 页").replace(/每頁 \d+ 條/, "每页 " + r + " 条").replace(/當前第 \d+ 頁/, "当前第 " + (1 + m) + " 页").replace(/Total \d+ Records/, "Total " + n + " Records").replace(/\d+ per Page/, r + " per Page").replace(/Current Page is \d+\/\d+/, "Current Page is " + (1 + m) + "/" + n))
			}
			p._innerHTML_bak = p._innerHTML_bak || p.innerHTML;
			h._innerHTML_bak = h._innerHTML_bak || h.innerHTML;
			g._innerHTML_bak = g._innerHTML_bak || g.innerHTML;
			k._innerHTML_bak = k._innerHTML_bak || k.innerHTML;
			if (!/^<.*>$/.test(p._innerHTML_bak)) {
				p._innerHTML_bak = "<a onclick=\"Zving.DataList.firstPage('" + j + '\');" href="javascript:void(0);">' + Lang.get("DataGrid.FirstPage") + "</a>";
				h._innerHTML_bak = "<a onclick=\"Zving.DataList.previousPage('" + j + '\');" href="javascript:void(0);">' + Lang.get("DataGrid.PrevPage") + "</a>"
			}
			if (!/^<.*>$/.test(k._innerHTML_bak)) {
				g._innerHTML_bak = "<a onclick=\"Zving.DataList.nextPage('" + j + '\');" href="javascript:void(0);">' + Lang.get("DataGrid.NextPage") + "</a>";
				k._innerHTML_bak = "<a onclick=\"Zving.DataList.lastPage('" + j + '\');" href="javascript:void(0);">' + Lang.get("DataGrid.LastPage") + "</a>"
			}
			if (m <= 0) {
				p.innerHTML = p.innerText;
				h.innerHTML = h.innerText
			} else {
				if (p.innerHTML.trim() == p.innerText.trim()) {
					p.innerHTML = p._innerHTML_bak;
					h.innerHTML = h._innerHTML_bak
				}
			}
			if (m >= o) {
				g.innerHTML = g.innerText;
				k.innerHTML = k.innerText
			} else {
				if (g.innerHTML.trim() == g.innerText.trim()) {
					g.innerHTML = g._innerHTML_bak;
					k.innerHTML = k._innerHTML_bak
				}
			}
		}
	};
	b.computePageSize = function (t) {
		t = e.getDom(t);
		if (!t || !t.parentNode) {
			t = null;
			return
		}
		var g = t.id;
		if (t.getAttribute("autopagesize") == "false") {
			return false
		}
		var k,
		p,
		r,
		q,
		o,
		n;
		o = b.getListNodes(t);
		k = o.length;
		n = o[0];
		if (/^(th|td|tr|tb|tf)/i.test(n.nodeName)) {
			q = e.Node.getParent(n, "table");
			r = true
		} else {
			q = n.parentNode
		}
		p = q.parentNode;
		var j = q.offsetHeight;
		var h = p.clientHeight;
		var f = j / k;
		var s;
		if (j > h) {
			s = Math.floor(h / f)
		}
		var l = b.getParam(t, c.Size);
		var m;
		if (/^(block|table|list)/.test($(n).css("display")) && $(n).css("float") == "none") {
			m = k;
			if (m <= s) {
				return
			}
			while (m > s) {
				if (r) {
					q.deleteRow(m - 1);
					m = q.rows.length
				} else {
					e.Dom.removeNode(q.children[m - 1]);
					m = q.children.length
				}
				l--
			}
			b.setParam(t, c.Size, l)
		}
	};
	b.DataCache = {};
	b.getParam = function (g, f) {
		var h = e.id(e.getDom(g));
		if (!b.DataCache[h] || !b.DataCache[h].Params) {
			return
		}
		return b.DataCache[h].Params.get(f)
	};
	b.setParam = function (h, f, g) {
		var j = e.id(e.getDom(h));
		if (!b.DataCache[j]) {
			b.DataCache[j] = {}

		}
		if (!b.DataCache[j].Params) {
			b.DataCache[j].Params = new DataCollection()
		}
		b.DataCache[j].Params.add(f, g)
	};
	b.loadData = function (k, j) {
		k = e.getDom(k);
		var l = k.id;
		var f = new DataCollection();
		var h;
		for (h = 0; h < b.DataCache[l].Params.size(); h++) {
			var g = b.DataCache[l].Params.getKey(h);
			f.add(g, b.DataCache[l].Params.get(g))
		}
		b.showLoading(k);
		d.sendRequest(b.BackendMethod, f, function (q) {
			if (q.get("_ZVING_STATUS") == 0 && q.get("_ZVING_MESSAGE")) {
				Dialog.alert(q.get("_ZVING_MESSAGE"));
				return
			}
			var t = q.get("HTML");
			if (!t) {
				e.Console.error("用于渲染数据列表的数据错误：" + q);
				return
			}
			if (e.isIE) {
				var u = b.getListContainer(k);
				if ($(u).data("sortable")) {
					$(u).sortable("destroy")
				}
			}
			var m = k.parentNode;
			while (m) {
				if (m.tagName && m.tagName !== "TR" && m.tagName !== "TABLE" && m.tagName !== "TBODY") {
					var w = m.innerHTML;
					var o = w.indexOf("<!--_ZVING_DATALIST_START_" + l + "-->");
					var n = w.indexOf("<!--_ZVING_DATALIST_END_" + l + "-->");
					n = w.indexOf("-->", n) + 3;
					w = w.substring(0, o) + t + w.substring(n);
					m.innerHTML = w;
					break
				}
				m = m.parentNode
			}
			k = null;
			k = e.getDom(l);
			m = k.parentNode;
			while (m) {
				if (m.tagName) {
					break
				}
				m = m.parentNode
			}
			ComponentManager.initChildren(m);
			var r = m.getElementsByTagName("script");
			for (var s = 0; s < r.length; s++) {
				e.Util.globalEval(r[s].text)
			}
			if (j) {
				j()
			}
			b.resumePagebar(k);
			b.sortableInit(k);
			b.hideLoading();
			k = null;
			m = null;
			j = null
		})
	};
	b.showLoading = function (j) {
		j = e.getDom(j);
		var f = e.getDom("_LoadingBGDiv");
		var h = e.getDom("_LoadingIconDiv");
		if (!f) {
			f = document.createElement("div");
			f.id = "_LoadingBGDiv";
			Node.hide(f);
			f.style.cssText = "background-color:#333;position:absolute;z-index:800;opacity:0.01;filter:alpha(opacity=1);";
			document.body.appendChild(f);
			h = document.createElement("div");
			h.id = "_LoadingIconDiv";
			Node.hide(h);
			h.innerHTML = "　<img src='" + a + "Framework/Images/loadingGreen15px.gif'><font color=green> " + Lang.get("DataGrid.Loading") + "　</font>";
			h.style.cssText = "padding-top:5px;background-color:#ffc;position:absolute;z-index:801;height:20px;width:120px";
			document.body.appendChild(h)
		}
		var g = b.getListContainer(j);
		var l = $(g).parent().offset();
		var k = {
			width : $(g).parent().width(),
			height : $(g).parent().height()
		};
		f.style.top = l.top + "px";
		f.style.left = l.left + "px";
		f.style.width = k.width + "px";
		f.style.height = k.height + "px";
		if (isGecko) {
			h.style.top = (l.top) + "px";
			h.style.left = (l.left) + "px"
		} else {
			h.style.top = (l.top + 2) + "px";
			h.style.left = (l.left + 2) + "px"
		}
		Node.show(f);
		Node.show(h)
	};
	b.hideLoading = function () {
		$("#_LoadingBGDiv").hide();
		$("#_LoadingIconDiv").hide()
	};
	b.firstPage = function (f) {
		f = e.getDom(f);
		b.setParam(f, c.PageIndex, 0);
		b.loadData(f)
	};
	b.lastPage = function (j) {
		j = e.getDom(j);
		var h = b.getParam(j, c.PageTotal);
		var g = b.getParam(j, c.Size);
		var f = Math.ceil(parseInt(h, 10) / parseInt(g, 10));
		b.setParam(j, c.PageIndex, f - 1);
		b.loadData(j)
	};
	b.previousPage = function (g) {
		g = e.getDom(g);
		var f = b.getParam(g, c.PageIndex);
		b.setParam(g, c.PageIndex, parseInt(f, 10) - 1);
		b.loadData(g)
	};
	b.nextPage = function (g) {
		g = e.getDom(g);
		var f = b.getParam(g, c.PageIndex);
		b.setParam(g, c.PageIndex, parseInt(f, 10) + 1);
		b.loadData(g)
	};
	b.gotoPage = function (g, f) {
		g = e.getDom(g);
		b.setParam(g, c.PageIndex, f);
		b.loadData(g)
	};
	b.clear = function (f) {
		f = e.getDom(f);
		f.innerHTML = ""
	};
	b.sortable = function (k, f, j, g) {
		var l = b.getListContainer(k);
		var h = {};
		if (f) {
			h.handle = f
		}
		if (j) {
			h.items = j
		}
		if (g) {
			h.start = function (m, n) {
				n.item.data("originalIndex", b.getRowIndex(k, n.item))
			};
			h.stop = function () {
				g.apply(this, Array.prototype.slice.call(arguments).concat(k))
			}
		}
		h.helper = function (m, o) {
			var n = o[0].outerHTML;
			if (n.match(/^<(tr)/i)) {}

			n = n.replace(/^(<\w+)([^>]*)>/im, '$1 style="background-color:#ffe; border: 1px solid #ddd">').replace(/ id=[^ >]+/igm, "");
			console.log(n);
			return n
		};
		h.axis = "y";
		$(l).sortable(h)
	};
	b.getRowIndex = function (h, j) {
		h = e.getDom(h);
		var g = b.getListNodes(h);
		var f = $(g).index(j);
		return f
	};
	e.DataList = b
})();
(function () {
	var a = window.Zving;
	a.Layer = function (b) {
		b = b || {};
		if (b.tagName || typeof b == "string") {
			b = {
				el : b
			}
		}
		a.extra(this, b, {
			ctype : "Layer",
			id : "comp_layer" + (++a.idSeed._seed)
		});
		var c = b.parentEl || document.body;
		if (this.el) {
			this.ownerDocument = this.el.ownerDocument;
			this.ownerWindow = this.el.ownerDocument.parentWindow
		}
		if (!this.el) {
			this.ownerDocument = c.ownerDocument;
			this.ownerWindow = c.ownerDocument.parentWindow;
			var d = this.ownerDocument.createElement("div");
			d.className = "z-layer";
			d = c.appendChild(d);
			this.el = d
		}
		this.$el = this.ownerWindow.$(this.el);
		if (this.cls) {
			this.el.className += " " + this.cls
		}
		this.constrain = b.constrain !== false;
		this.el.style.zIndex = b.zindex || this.getZIndex();
		this.el.style.position = "absolute";
		this.$el.hide()
	};
	a.Layer.prototype = {
		getZIndex : function () {
			return this.zindex || parseInt((this.getShim() || this.el).currentStyle.zIndex, 10) || 11000
		},
		destroy : function () {
			a.Dom.removeNode(this.el);
			delete this.el
		},
		remove : function () {
			this.destroy()
		},
		constrainXY : function () {
			if (this.constrain) {
				var m = a.Dom.getViewport(this.ownerWindow),
				j = m.width,
				d = m.height;
				var n = Math.max(this.ownerDocument.documentElement.scrollTop, this.ownerDocument.body.scrollTop);
				var c = Math.max(this.ownerDocument.documentElement.scrollLeft, this.ownerDocument.body.scrollLeft);
				var p = this.$el.offset();
				var k = p.x,
				g = p.y;
				var b = this.shadowOffset || 0;
				var l = this.el.offsetWidth + b,
				e = this.el.offsetHeight + b;
				var f = false;
				if ((k + l) > j + c) {
					k = j - l - b;
					f = true
				}
				if ((g + e) > d + n) {
					g = d - e - b;
					f = true
				}
				if (k < c) {
					k = c;
					f = true
				}
				if (g < n) {
					g = n;
					f = true
				}
				if (f) {
					if (this.avoidY) {
						var o = this.avoidY;
						if (g <= o && (g + e) >= o) {
							g = o - e - 5
						}
					}
					p = [k, g];
					this.storeXY(p);
					a.Node.setPosition(this.el, p)
				}
			}
			return this
		},
		storeXY : function (b) {
			delete this.lastLT;
			this.lastXY = b
		}
	}
})();
(function () {
	var z = window.Zving,
	Uploader;
	Uploader = function (config) {
		if (!(this instanceof Uploader)) {
			return new Uploader(config)
		}
		if (typeof config == "string") {
			this.id = config;
			this.ele = document[config]
		} else {
			if (!config || typeof config == "object") {
				z.extra(this, config, {
					ctype : "Uploader",
					id : "comp_uploader" + (++z.idSeed._seed),
					width : 250,
					height : 25,
					allowType : "gif,jpg,png,bmp,psd,ai,jpeg,tif,tiff,avi,mpg,flv,mpeg,rm,rmvb,mov,wmv,wmp,mp4,mp3,wma,wav,zip,rar,tar,gz,z,iso,cab,jar,doc,docx,xls,xlsx,ppt,pptx,pdf,fla,swf,js,css,shtml,html,htm,txt"
				});
				if (config.sessionId) {
					_ZUploaderSessionID = config.sessionId
				}
				if (this.renderTo) {
					this.render(this.renderTo);
					delete this.renderTo
				}
			}
		}
	};
	Uploader.BackendMethod_Sumbit = "com.zving.framework.ui.controls.UploadUI.submit";
	Uploader.BackendMethod_GetTaskStatus = "com.zving.framework.ui.controls.UploadUI.getTaskStatus";
	Uploader.swfPath = z.JSLIBPATH + "Components/ZUploader2.swf";
	Uploader.prototype = {
		getString : function () {
			var flashVars = "";
			if (this.allowType) {
				flashVars += "fileType=" + this.allowType
			}
			if (this.fileCount) {
				flashVars += "&fileCount=" + this.fileCount
			}
			if (this.fileMaxSize) {
				flashVars += "&fileMaxSize=" + this.fileMaxSize
			}
			if (this.barColor) {
				flashVars += "&barColor=" + this.barColor
			}
			var html = '<object id="' + this.id + '" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"width="' + this.width + '" height="' + this.height + '" style="vertical-align:middle;"> <param name="movie" value="' + Uploader.swfPath + '"> <param name="quality" value="high"> <param name="wmode" value="transparent"> <param name="FlashVars" value="' + flashVars + '"> <embed name="' + this.id + '" src="' + Uploader.swfPath + '" type="application/x-shockwave-flash" FlashVars="' + flashVars + '" quality="high" wmode="transparent" width="' + this.width + '" height="' + this.height + '"> </embed></object>';
			return html
		},
		render : function (container) {
			container = z.getDom(container);
			$(container).append(this.getString());
			this.ele = document[this.id];
			Zving.Uploader.checkVersion();
			return this
		},
		sendRequest : function (method, dc, func) {
			if (!Uploader.CallbackList) {
				Uploader.CallbackList = {}

			}
			Uploader.CallbackList[this.id] = func;
			if (this.hasFile()) {
				if (dc) {
					this.ele.addPostParam(dc.toQueryString())
				}
				this.ele.setMethod(method);
				this.ele.doUpload()
			} else {
				dc.add("_ZVING_METHOD", method);
				z.Server.sendRequest(Uploader.BackendMethod_Sumbit, dc, function (response) {
					if (func) {
						try {
							func(response)
						} catch (ex) {
							z.Console.error(location.pathname + " Uploader.onRequestComplete:" + ex.message + "\t" + ex.lineNumber)
						}
					}
				})
			}
		},
		hasFile : function () {
			return this.ele.hasFile()
		},
		hasError : function () {
			return this.ele.hasError()
		},
		getFileNames : function () {
			return this.ele.getFileNames()
		},
		setFileNames : function (arr) {
			return this.ele.setFileNames(arr)
		},
		onFileSelect : function (func) {
			this.ele._OnFileSelect = func
		}
	};
	Uploader.onRequestComplete = function (id, xml) {
		if (!Uploader.CallbackList) {
			return
		}
		var func = Uploader.CallbackList[id];
		if (!func) {
			return
		}
		var dc = new z.DataCollection();
		dc.parseXML(z.toXMLDOM(xml));
		dc.Status = dc.get("_ZVING_STATUS");
		dc.Message = dc.get("_ZVING_MESSAGE");
		if (dc.get("_ZVING_SCRIPT")) {
			eval(dc.get("_ZVING_SCRIPT"))
		}
		if (func) {
			func(dc)
		}
	};
	Uploader.getTaskStatus = function (taskID, id) {
		var dc = new z.DataCollection();
		dc.add("TaskID", taskID);
		z.Server.sendRequest(Uploader.BackendMethod_GetTaskStatus, dc, function (response) {
			if (document[id]) {
				document[id].setStatusStr(response.get("Status"))
			}
		})
	};
	Uploader.resize = function (id, fileCount) {
		var h = 24;
		if (fileCount > 1) {
			fileCount = fileCount > 10 ? 10 : fileCount;
			h = 28 + 24 * fileCount
		}
		document[id].height = h
	};
	Uploader.afterFileSelect = function (id, fileNames) {
		var func = document[id]._OnFileSelect;
		if (func) {
			func("" + fileNames)
		}
	};
	Uploader.getAction = function () {
		return z.Server.ContextPath + "ZUploader.zhtml"
	};
	Uploader.getSessionID = function () {
		return _ZUploaderSessionID || z.Cookie.get(idName)
	};
	Uploader.checkVersion = function () {
		var _FlashVersionOK = false;
		var _FlashVersion = (function () {
			var f = "",
			n = navigator,
			ii;
			if (n.plugins && n.plugins.length) {
				for (ii = 0; ii < n.plugins.length; ii++) {
					if (n.plugins[ii].name.indexOf("Shockwave Flash") != -1) {
						f = n.plugins[ii].description.split("Shockwave Flash ")[1];
						break
					}
				}
			} else {
				if (window.ActiveXObject) {
					for (ii = 10; ii >= 2; ii--) {
						try {
							var fl = eval("new ActiveXObject('ShockwaveFlash.ShockwaveFlash." + ii + "');");
							if (fl) {
								f = ii + ".0";
								break
							}
						} catch (e) {}

					}
				}
			}
			return f
		})();
		if (_FlashVersion) {
			_FlashVersion = _FlashVersion.substr(0, _FlashVersion.indexOf("."));
			if (_FlashVersion >= 10) {
				_FlashVersionOK = true
			}
		}
		if (!_FlashVersionOK) {
			var alertNoFlashPlugin = Lang.get("Uploader.NoFlashPlugin");
			document.write(alertNoFlashPlugin)
		}
	};
	var MultiUploader = function () {
		this.Uploaders = []
	};
	MultiUploader.prototype.addUploader = function (uploader) {
		if (typeof uploader == "string") {
			uploader = new Uploader(uploader)
		}
		this.Uploaders.push(uploader)
	};
	MultiUploader.prototype.hasError = function (uploader) {
		for (var i = 0; i < this.Uploaders.length; i++) {
			if (this.Uploaders[i].hasError()) {
				return true
			}
		}
		return false
	};
	MultiUploader.prototype.sendRequest = function (method, dc, func) {
		var taskID = new Date().getTime() + "" + Uploader.getSessionID();
		var total = 0,
		i = 0;
		for (i = 0; i < this.Uploaders.length; i++) {
			if (this.Uploaders[i].hasError()) {
				return
			}
			total += this.Uploaders[i].getFileNames().length
		}
		for (i = 0; i < this.Uploaders.length; i++) {
			this.Uploaders[i].ele.setTaskID(taskID);
			this.Uploaders[i].ele.setTotal(total)
		}
		for (i = 0; i < this.Uploaders.length; i++) {
			this.Uploaders[i].sendRequest(method, dc, function (response) {
				if (response.size() > 1) {
					func(response)
				}
			})
		}
	};
	z.MultiUploader = MultiUploader;
	z.Uploader = Uploader
})();
(function () {
	var z = window.Zving,
	isIE = z.isIE,
	isGecko = z.isGecko,
	stopEvent = z.stopEvent,
	Page = z.Page,
	PATH = z.CONTEXTPATH,
	Selector = {};
	Selector.BackendMethod = "com.zving.framework.ui.CodeSourceUI.getData";
	function likeOption(els) {
		for (var i = 0; i < els.length; i++) {
			els[i].value = els[i].getAttribute("value");
			if (z.isIE) {
				els[i].text = els[i].innerText
			}
		}
	}
	function displacePath(url, reletiveContextPath) {
		if (/^\/|^\w+\:\/\/|^javascript\:/.test(url)) {
			return url
		} else {
			if (reletiveContextPath) {
				return z.CONTEXTPATH + "/" + url
			} else {
				var locationPath = location.pathname;
				locationPath = locationPath.substring(0, locationPath.lastIndexOf("/"));
				while (url.indexOf("../") >= 0) {
					url = url.substring(3);
					locationPath = locationPath.substring(0, locationPath.lastIndexOf("/"))
				}
				return locationPath + "/" + url
			}
		}
	}
	z.importCss("Components/select.css");
	Selector.show = function (ele) {
		ele = z.getDom(ele);
		Selector.close();
		var pw = z.rootWin;
		ele = $(ele).closest("div")[0];
		var url = ele.getAttribute("listurl");
		pw.Zving.SelectorWindow = window;
		if (ele.id != pw.Zving.Selector.showingID || !pw.Zving.Selector.showingID) {
			var div = pw.Zving.getDom("_SelectorDiv_");
			if (!div) {
				div = pw.document.createElement("div");
				div.id = "_SelectorDiv_";
				div.style.position = "absolute";
				div.style.left = 0;
				div.style.top = 0;
				div.style.width = 0;
				div.style.height = 0;
				pw.document.body.appendChild(div);
				div = pw.Zving.getDom(div)
			}
			if (url) {
				url = displacePath(url);
				var f = pw.Zving.getDom("_SelectorFrame_" + ele.id);
				if (!f) {
					pw.$(div).find("iframe").hide();
					pw.$(div).append("<iframe id='_SelectorFrame_" + ele.id + "' frameborder='0' width='100%' src='" + url + "'></iframe>");
					f = pw.Zving.getDom("_SelectorFrame_" + ele.id)
				} else {
					pw.$(div).find("iframe").hide();
					pw.$(f).show();
					Selector.setListURLStyle(ele.id);
					if (f.contentWindow.document && f.contentWindow.document.body) {
						f.contentWindow.document.body.style.visibility = "hidden"
					}
					f.contentWindow.location = url
				}
				var f_OnLoad = function () {
					f.contentWindow.SelectedText = ele.textField.value;
					f.contentWindow.SelectedValue = ele.value;
					f.contentWindow.SelectorID = ele.id;
					if (ele._ScrollTop) {
						f.contentWindow.document.body.scrollTop = ele._ScrollTop
					}
					Selector.setListURLStyle(ele.id)
				};
				if (!z.isGecko) {
					$(f).one("load.select", function () {
						f_OnLoad()
					})
				} else {
					f.onload = function () {
						f_OnLoad()
					}
				}
			} else {
				pw.$(div).find("iframe").hide();
				if (!pw.Zving.getDom("_SelectorFrame_")) {
					pw.$(div).append("<iframe id='_SelectorFrame_' frameborder='0' width='100%' src='about:blank'></iframe>");
					var win = pw.Zving.getDom("_SelectorFrame_").contentWindow;
					var doc = win.document;
					doc.open();
					doc.write("<style type='text/css'>* { box-sizing: border-box; -moz-box-sizing: border-box; -khtml-box-sizing: border-box; -webkit-box-sizing: border-box; }");
					doc.write("html,body {scrollbar-arrow-color: #68a;scrollbar-3dlight-color: #acd;scrollbar-shadow-color: #9bc;scrollbar-face-color: #def;scrollbar-darkshadow-color: #def;scrollbar-highlight-color: #fff;scrollbar-track-color: #eee;}");
					doc.write("body{margin: 0;padding: 0;color: #444;min-height:100%;height: auto;_height:100%;_overflow:auto;text-align: justify;text-justify: inter-ideograph;font: 12px/1.4 Tahoma, SimSun, Verdana, sans-serif;background: #ffffff;}");
					doc.write("body,a,div,img{ margin: 0; padding: 0;box-sizing: border-box; -moz-box-sizing: border-box; -khtml-box-sizing: border-box; -webkit-box-sizing: border-box;}");
					doc.write("div,p,span{font: 12px/1.4 Tahoma, SimSun, Verdana, sans-serif;word-break: break-all;};");
					doc.write(".optgroup {position:absolute;z-index:666;left:0;top:0;color: #369;}");
					doc.write(".optgroup div{padding:2px;overflow: auto;overflow-x: hidden;max-height:300px;color: #369;border: 1px solid #678;background: #f7fafc url(" + PATH + "Platform/Images/textarea_bg.gif) repeat 0 2px;width:auto;z-index:888;}");
					doc.write(".optgroup a{cursor:default;display:block;color: #369;white-space: nowrap;padding:1px 3px 2px 6px;_padding:0 3px 0 6px;height:18px;min-width:2em;text-decoration:none;}");
					doc.write(".optgroup a:hover,.optgroup a.ahover{color: #cff;text-decoration:none;background:#49e url(" + PATH + "Framework/Images/optionbg_over.gif) repeat-x center;}");
					doc.write(".optgroup a.ahover{background-image:none;}</style>");
					doc.write("<body onselectstart='return false;' style='margin: 0px;-moz-user-select:none;' oncontextmenu='return false;'></body>");
					try {
						doc.close();
						win = doc = null
					} catch (ex) {}

					Selector.setListStyle(ele.id)
				} else {
					Selector.setListStyle(ele.id)
				}
			}
		}
		z.AllDocumentsEvent.on("mousedown", Selector._doClose);
		z.Event.lockScroll(window)
	};
	Selector._doClose = function (evt) {
		evt = z.getEvent(evt);
		if (evt.type == "unload" && !z.restricted && window.frameElement) {
			if (window.frameElement.id.endsWith(z.rootWin.Zving.Selector.showingID)) {
				return
			}
		}
		var el = evt.target || evt.srcElement;
		if (el) {
			if (!z.isDocument(el) && $ && $(el).closest(".zSelect").length) {
				return
			}
			var iframe;
			try {
				if (z.isDocument(el)) {
					iframe = el.parentWindow.frameElement
				} else {
					iframe = el.ownerDocument.parentWindow.frameElement
				}
				if (iframe && iframe.id.startsWith("_SelectorFrame_")) {
					return
				}
			} catch (e) {}

		}
		Selector.close(evt)
	};
	Selector.setListURLStyle = function (id) {
		var pw = z.rootWin;
		pw.Zving.Selector.showingID = id;
		var ele = getDom(id);
		var div = pw.Zving.getDom("_SelectorDiv_");
		z.Node.show(div);
		var dim = z.Node.getSize(ele);
		var pos = z.Node.getPositionEx(ele);
		var lw = ele.getAttribute("listwidth") ? parseInt(ele.getAttribute("listwidth"), 10) : 0;
		var lh = ele.getAttribute("listheight") ? parseInt(ele.getAttribute("listheight"), 10) : 0;
		var frame = pw.Zving.getDom("_SelectorFrame_" + id);
		if (!lw) {
			lw = dim.width
		}
		frame.width = lw;
		if (!lh) {
			lh = 150
		}
		frame.height = lh;
		pos = z.Dom.computePosition(pos.x, pos.y, pos.x + dim.width, pos.y + dim.height, null, lw, lh, pw);
		div.style.cssText = "position:absolute;display:inline-block;z-index:10999;width:" + lw + "px;height:" + lh + "px;left:" + pos.x + "px;top:" + pos.y + "px";
		frame.style.border = "1px solid #678"
	};
	Selector.setListStyle = function (id) {
		var pw = z.rootWin;
		pw.Zving.Selector.showingID = id;
		var html = getDom(id + "_list").outerHTML;
		var div = pw.Zving.getDom("_SelectorDiv_");
		z.Node.show(div);
		var dim = z.Node.getSize(id);
		var pos = z.Node.getPositionEx(id);
		div.style.cssText = "position:absolute; display:inline-block;z-index:10999;width:" + dim.width + "px;left:-1000px;top:-1000px";
		var frame = pw.Zving.getDom("_SelectorFrame_");
		pw.$(frame).show();
		var doc = frame.contentWindow.document;
		frame.contentWindow.TopWindow = pw;
		html = html.replace(/(Zving\.)?Selector\./g, "TopWindow.Zving.Selector.");
		if (doc.body.childNodes.length === 0) {
			var listdiv = doc.createElement("div");
			listdiv.innerHTML = html;
			doc.body.appendChild(listdiv)
		} else {
			doc.body.childNodes[0].innerHTML = html
		}
		var list = doc.getElementById(id + "_list");
		list.style.display = "inline";
		list = doc.getElementById(id + "_ul");
		var dimlist = z.Node.getSize(list);
		div = Selector.getSourceDiv(id);
		var lw = div.getAttribute("listwidth") ? parseInt(div.getAttribute("listwidth"), 10) : 0;
		var lh = div.getAttribute("listheight") ? parseInt(div.getAttribute("listheight"), 10) : 0;
		if (!lw) {
			lw = dim.width
		}
		if (lw.width > 500) {
			lw = 500
		}
		frame.width = lw;
		list.style.width = lw + "px";
		if (!lh || lh > dimlist.height) {
			lh = dimlist.height
		}
		if (lh > 300) {
			lh = 300
		}
		list.style.height = lh + "px";
		frame.height = lh;
		if (list.getElementsByTagName("A").length > 0) {
			var currentItem = list.getElementsByTagName("A")[div.selectedIndex];
			currentItem.className = "ahover";
			var pos1 = z.Node.getOffset(currentItem);
			list.scrollTop = pos1.y;
			if (div._ScrollTop) {
				list.scrollTop = div._ScrollTop
			}
		}
		pos = z.Dom.computePosition(pos.x, pos.y, pos.x + dim.width, pos.y + dim.height, null, lw, lh, pw);
		div = pw.Zving.getDom("_SelectorDiv_");
		div.style.left = pos.x + "px";
		div.style.top = pos.y + "px";
		doc = list = null
	};
	Selector.onArrowMouseOver = function (ele) {
		var div = ele.parentElement;
		if (div.options.length > 0) {
			div.options[div.selectedIndex].className = ""
		}
		z.Node.addClass(div, "zSelectMouseOver")
	};
	Selector.onArrowMouseOut = function (ele) {
		var div = ele.parentElement;
		z.Node.removeClass(div, "zSelectMouseOver")
	};
	Selector.getSourceDiv = function (id) {
		var div = null;
		var pw = z.rootWin;
		if (pw.Zving.SelectorWindow && pw.Zving.SelectorWindow.Zving.getDom) {
			div = pw.Zving.SelectorWindow.Zving.getDom(id)
		}
		if (!div) {
			div = z.rootWin.Zving.getDom(id);
			if (!div || !div.InitFlag) {
				z.Console.error("Select.js -- Selector.getSourceDiv :: 发生致命错误，显示列表时未找到" + id + "对应的Selector元素!")
			}
		}
		return div
	};
	Selector.setSelectedIndex = function (ele, index) {
		var oldValue = ele.value;
		if (!ele.Items || ele.Items.length < index + 1) {
			return
		}
		var item = z.getDom(ele.Items[index]);
		ele.ItemClickFlag = true;
		if (isIE) {
			ele.value = ele.valueField.value = item.getAttribute("value")
		} else {
			ele._value = ele.valueField.value = item.getAttribute("value")
		}
		ele.textField.value = item.innerText;
		var pw = z.rootWin;
		ele.ItemClickFlag = false;
		if (oldValue != item.getAttribute("value")) {
			Selector.invokeOnChange(ele)
		}
	};
	Selector.onItemClick = function (ele, flag) {
		var id = ele.parentNode.id;
		id = id.substring(0, id.lastIndexOf("_"));
		var pw = z.rootWin;
		var div = pw.Zving.getDom("_SelectorDiv_");
		div = Selector.getSourceDiv(id);
		var oldValue = div.value;
		div.textField.value = isGecko ? ele.textContent : ele.innerText;
		div.ItemClickFlag = true;
		if (isIE) {
			div.value = div.valueField.value = ele.getAttribute("value")
		} else {
			div._value = div.valueField.value = ele.getAttribute("value")
		}
		var items = div.options;
		for (var i = 0; i < items.length; i++) {
			if (items[i].getAttribute("value") == ele.getAttribute("value")) {
				div._selectedIndex = i;
				if (isIE) {
					div.selectedIndex = i
				}
			}
		}
		div.ItemClickFlag = false;
		if (pw.Zving.getDom("_SelectorFrame_")) {
			div._ScrollTop = ele.parentNode.scrollTop
		}
		if (oldValue != ele.getAttribute("value")) {
			Selector.invokeOnChange(div)
		}
		pw.Zving.SelectorWindow.Zving.Selector.close()
	};
	Selector.close = function (evt) {
		var pw = z.rootWin;
		if (!pw.Zving) {
			console.log(pw.location + "没有引用Main.js？")
		}
		if (!pw.Zving.Selector || !pw.Zving.Selector.showingID) {
			return
		}
		if (pw.Zving.SelectorWindow) {
			var ctrl = pw.Zving.SelectorWindow.Zving.getDom(pw.Zving.Selector.showingID).textField;
			if (evt) {
				evt = z.getEvent(evt);
				if (evt.srcElement == ctrl) {
					return
				}
			}
			var ele = ctrl.parentNode;
			var verify = ele.getAttribute("verify");
			var anyFlag = false,
			arr,
			i;
			if (verify) {
				arr = verify.split("&&");
				for (i = 0; i < arr.length; i++) {
					if (arr[i] == "Any") {
						anyFlag = true
					}
				}
			}
			if (!anyFlag && ele.input) {
				var txt = ele.textField.value.trim();
				arr = ele.options;
				var len = arr.length;
				var flag = false;
				for (i = 0; i < len; i++) {
					var innerText = isGecko ? arr[i].textContent : arr[i].innerText;
					if (innerText.trim() == txt) {
						if (arr[i].getAttribute("value") != ele.value) {
							var frame = pw.Zving.getDom("_SelectorFrame_");
							var doc = frame.contentWindow.document;
							var list = doc.getElementById(ele.id + "_ul");
							Selector.onItemClick(list.getElementsByTagName("A")[i]);
							doc = list = null
						}
						flag = true;
						break
					}
				}
				if (!flag && arr.length > 0) {
					ele.textField.value = isGecko ? arr[ele.selectedIndex].textContent : arr[ele.selectedIndex].innerText
				}
			}
			try {
				ctrl.onblur.apply(ctrl, [])
			} catch (ex) {}

			z.Event.unlockScroll(pw.Zving.SelectorWindow);
			pw.Zving.SelectorWindow = null
		}
		z.Node.hide(pw.Zving.getDom("_SelectorDiv_"));
		pw.Zving.Selector.showingID = false;
		z.AllDocumentsEvent.un("mousedown", Selector._doClose)
	};
	Selector.onItemMouseOver = function (ele) {
		var id = ele.parentNode.id;
		id = id.substring(0, id.lastIndexOf("_"));
		var div = Selector.getSourceDiv(id);
		if (!div) {
			return
		}
		ele.parentNode.getElementsByTagName("A")[div.selectedIndex].className = "";
		ele.className = "liOver"
	};
	Selector.setInput = function (ele, flag) {
		ele = z.getDom(ele);
		if (!flag || flag == "false") {
			if (isIE) {
				ele.textField.onselectstart = stopEvent;
				ele.textField.onmousedown = stopEvent
			} else {
				ele.textField.style.MozUserSelect = "none";
				ele.textField.onmousedown = function (evt) {
					evt = z.getEvent(evt);
					var pw = z.rootWin;
					var div = evt.srcElement.parentNode;
					if (div.id == pw.Zving.Selector.showingID && pw.Zving.SelectorWindow == window) {
						return stopEvent(evt)
					}
				}
			}
			z.Node.removeClass(ele, "zSelectEditable");
			ele.textField.oncontextmenu = stopEvent;
			ele.textField.onblur = null
		} else {
			if (isIE) {
				ele.textField.onselectstart = null;
				ele.textField.onmousedown = null
			} else {
				ele.textField.style.MozUserSelect = ""
			}
			z.Node.addClass(ele, "zSelectEditable");
			ele.textField.onkeydown = Selector.onKeyDown;
			ele.textField.onkeyup = Selector.onKeyUp
		}
		if (isGecko) {
			ele._input = flag === true || flag == "true"
		}
	};
	Selector.onDoubleClick = function (evt) {
		evt = z.getEvent(evt);
		Selector.show(evt.target || evt.srcElement)
	};
	Selector.onClick = function (evt) {
		evt = z.getEvent(evt);
		var ele = evt.target || evt.srcElement;
		ele = ele.parentNode;
		if ("true" == ele.getAttribute("lazy")) {
			ele.loadData(function () {
				z.rootWin.Selector.showingID = 0;
				Selector.show(ele.textField)
			})
		}
	};
	Selector.onKeyDown = function (evt) {
		evt = z.getEvent(evt);
		var txt = evt.target || evt.srcElement;
		var div = txt.parentNode;
		if ("true" == div.getAttribute("lazy")) {
			ele.loadData(function () {
				z.rootWin.Selector.showingID = 0;
				Selector.show(ele.textField)
			});
			return
		}
		var pw = z.rootWin;
		if (div.getAttribute("listurl")) {
			var win = pw.Zving.getDom("_SelectorFrame_" + div.id).contentWindow;
			if (evt.keyCode == 38) {
				if (win.nextItem) {
					win.nextItem()
				}
			} else {
				if (evt.keyCode == 40) {
					if (win.previousItem) {
						win.previousItem()
					}
				}
			}
			stopEvent(evt);
			win = null;
			return
		}
		if (!pw.Zving.getDom("_SelectorDiv_") || !pw.Zving.Node.isVisible("_SelectorDiv_")) {
			Selector.show(txt);
			div.KeyShowFlag = true;
			stopEvent(evt);
			return
		}
		if (evt.keyCode == 38) {
			Selector.moveItem(div, false)
		} else {
			if (evt.keyCode == 40) {
				Selector.moveItem(div, true)
			} else {
				if (!evt.ctrlKey && !evt.shiftKey && !evt.altKey && evt.keyCode != 9 && !div.input) {
					stopEvent(evt)
				}
			}
		}
	};
	Selector.moveItem = function (ele, flag) {
		var pw = z.rootWin;
		var frame = pw.Zving.getDom("_SelectorFrame_");
		var doc = frame.contentWindow.document;
		var list = doc.getElementById(ele.id + "_ul");
		var arr = doc.getElementsByTagName("A");
		var currentItem = arr[ele.selectedIndex];
		var nextItem = null;
		var start = 0;
		if (z.Node.isVisible(currentItem)) {
			start = ele.selectedIndex
		}
		var len = arr.length;
		ele.ItemClickFlag = true;
		var i,
		a,
		d;
		if (flag) {
			for (i = start + 1; i < len; i++) {
				a = arr[i];
				d = a.style.display;
				if (!d || d.toLowerCase() != "none") {
					ele.selectedIndex = i;
					nextItem = a;
					break
				}
				a = null
			}
		} else {
			for (i = start - 1; i >= 0; i--) {
				a = arr[i];
				d = a.style.display;
				if (!d || d.toLowerCase() != "none") {
					ele.selectedIndex = i;
					nextItem = a;
					break
				}
				a = null
			}
		}
		ele.ItemClickFlag = false;
		if (nextItem) {
			currentItem.className = "hover";
			nextItem.className = "ahover";
			ele.textField.value = isGecko ? nextItem.textContent : nextItem.innerText;
			ele.valueField.value = nextItem.getAttribute("value");
			var pos1 = z.Node.getPosition(currentItem);
			var pos2 = z.Node.getPosition(nextItem);
			list.scrollTop = list.scrollTop + pos2.y - pos1.y
		}
		doc = list = arr = currentItem = null
	};
	Selector.onKeyUp = function (evt) {
		evt = z.getEvent(evt);
		var pw = z.rootWin;
		if (evt.keyCode >= 37 && evt.keyCode <= 40) {
			return
		}
		var txt = evt.target || evt.srcElement;
		var div = txt.parentElement;
		if (div.KeyShowFlag) {
			div.KeyShowFlag = false;
			return
		}
		var v = txt.value.replace(/　/g, "").trim();
		if (div.getAttribute("listurl")) {
			var win = pw.Zving.getDom("_SelectorFrame_" + div.id).contentWindow;
			if (win.onTextChange) {
				win.onTextChange(v)
			}
			win = null;
			return
		}
		var frame = pw.Zving.getDom("_SelectorFrame_");
		var doc = frame.contentWindow.document;
		var arr = doc.getElementsByTagName("A");
		if (evt.keyCode == 13) {
			Selector.onItemClick(arr[div.selectedIndex])
		}
		if (!evt.ctrlKey && !evt.shiftKey && !evt.altKey && evt.keyCode != 9 && div.input) {
			Selector.filter(div, v)
		}
		doc = arr = null
	};
	Selector.filter = function (ele, v) {
		var pw = z.rootWin;
		var frame = pw.Zving.getDom("_SelectorFrame_");
		var doc = frame.contentWindow.document;
		var arr = doc.getElementsByTagName("A");
		var len = arr.length;
		v = v.toLowerCase();
		for (var i = 0; i < len; i++) {
			var a = arr[i];
			var str = isGecko ? a.innerHTML : a.innerText;
			str = str.replace(/　/g, "").trim().toLowerCase();
			if (str.indexOf(v) >= 0) {
				a.style.display = ""
			} else {
				a.style.display = "none"
			}
			a = null
		}
		doc = arr = null
	};
	Selector.invokeOnChange = function (_ele) {
		if (!_ele.InitFlag) {
			var _cv = _ele.getAttribute("onChange");
			if (_cv) {
				var pw = z.rootWin;
				try {
					if (pw.Zving.SelectorWindow && pw.Zving.SelectorWindow != window) {
						pw.Zving.SelectorWindow["eval"]("window.func = function(){" + _cv + "}");
						pw.Zving.SelectorWindow.func.call(_ele)
					} else {
						eval("window.func = function(){" + _cv + "}");
						window.func.call(_ele)
					}
				} catch (ex) {
					alert(ex.message)
				}
			}
		}
		Selector.contractWidth(_ele)
	};
	Selector.contractWidth = function (_ele) {
		if (_ele.getAttribute("autowidth")) {
			var div = z.Dom.createNodeByHtml('<div style="position:absolute; visibility:hidden; font-size:12px;white-space:nowrap;">' + _ele.textField.value + "</div>");
			div.appendTo(_ele);
			var textWidth = div.offsetWidth;
			_ele.textField.style.width = textWidth + 20 + "px";
			z.Dom.removeNode(div)
		}
	};
	Selector.setValueEx = function (ele, v, t) {
		ele = z.getDom(ele);
		ele.value = ele.valueField.value = v;
		ele.textField.value = t
	};
	Selector.setValue = function (ele, v ) {
		ele = z.getDom(ele);
		var len = ele.options.length;
		for (var i = 0; i < len; i++) {
			if (z.getDom(ele.options[i]).getAttribute("value") == v) {
				if (isGecko) {
					ele._selectedIndex = i
				} else {
					ele.selectedIndex = i;
				}
				break;
			}
		}
	};
	
	Selector.setDisabled = function (ele, flag) {
		if (ele.tagName.toLowerCase() == "input") {
			ele = ele.parentNode
		}
		if (flag || flag == "true") {
			ele.textField.disabled = true;
			z.Node.addClass(ele, "zSelectDisabled");
			ele.arrow.onmouseover = stopEvent;
			ele.arrow.onmouseout = stopEvent;
			ele.arrow.onclick = stopEvent;
			ele.arrow.onmousedown = stopEvent;
			ele.textField.style.color = "#aaa";
			ele.textField.ondblclick = stopEvent;
			ele.textField.onkeydown = stopEvent;
			ele.textField.onkeyup = stopEvent;
			ele.textField.onclick = stopEvent
		} else {
			ele.textField.disabled = false;
			z.Node.removeClass(ele, "zSelectDisabled");
			ele.textField.ondblclick = Selector.onDoubleClick;
			ele.arrow.onmouseover = function () {
				Selector.onArrowMouseOver(this)
			};
			ele.arrow.onmouseout = function () {
				Selector.onArrowMouseOut(this)
			};
			ele.arrow.onmousedown = function (evt) {
				var pw = z.rootWin;
				var div = z.Node.getParent(this, "div");
				if (pw.Zving.Selector && pw.Zving.Selector.showingID == div.id) {
					return
				}
				Selector.show(this);
				this.parentElement.textField.onfocus.apply(this.parentElement.textField, arguments);
				stopEvent(evt)
			};
			ele.textField.style.color = "";
			ele.textField.onkeydown = Selector.onKeyDown;
			ele.textField.onkeyup = Selector.onKeyUp;
			ele.textField.onclick = Selector.onClick;
			ele.arrow.onclick = Selector.onClick
		}
	};
	Selector.LastID = new Date().getTime();
	Selector.initHtml = function (ele) {
		var id = ele.id;
		if (!id || id == "_ZVING_NOID_") {
			ele.id = id = "Selector_" + Selector.LastID++;
			ele.setAttribute("id", id)
		}
		var name = ele.getAttribute("name");
		if (!name) {
			name = id
		} else {
			ele.removeAttribute("name")
		}
		var items = ele.getElementsByTagName("SPAN");
		var selectedIndex = 0;
		var selectedFlag = true;
		var len = items.length;
		var value = ele.getAttribute("value");
		var html,
		i;
		if (len > 0 || ele.innerHTML.trim() === "") {
			var verify = ele.getAttribute("verify");
			var condition = ele.getAttribute("condition");
			var verifyStr = "";
			if (verify) {
				verifyStr = 'verify="' + verify + '"';
				if (condition) {
					verifyStr += ' condition="' + condition + '"'
				}
			}
			var classStr = ele.getAttribute("zclass");
			if (classStr) {
				classStr = 'class="' + classStr + '"'
			} else {
				classStr = 'class="inputText"'
			}
			ele.className = "zSelect";
			var styleText = "";
			if (ele.getAttribute("styleOriginal") && ele.getAttribute("styleOriginal") != "NULL") {
				styleText = ele.getAttribute("styleOriginal")
			} else {
				var getWidth = ele.style.cssText;
				var ifWidth = /(.*width: *)([0-9]+)(px *;*.*)/gi;
				if (ifWidth.test(getWidth)) {
					getWidth = getWidth.replace(ifWidth, function ($1, $2, $3, $4) {
							return $3
						});
					getWidth = isStrict ? getWidth : parseInt(getWidth, 10) - 7;
					styleText = "width:" + getWidth + "px;"
				} else {
					styleText = isIE ? "width:115px;" : "width:118px;"
				}
			}
			ele.style.cssText = "display:inline-block; *zoom: 1;*display: inline;vertical-align:middle;height:auto;width:auto;position:relative;border:none 0;margin:0;padding:0;white-space: nowrap";
			var arr = [];
			arr.push("<input type='text' id='" + id + "_textField' ztype='select' " + verifyStr + " " + classStr + " autocomplete='off' style='vertical-align:middle; cursor:default;" + (isIE8 ? "line-height:18px;" : "") + styleText + "' value=''/>");
			arr.push("<input type='hidden' name='" + name + "'/>");
			arr.push("<img class='arrowimg' src='" + PATH + "Framework/Images/blank.gif' width='18' height='20' id='" + id + "_arrow' style='position:relative; left:-18px; margin-right:-19px; cursor:pointer; width:18px; height:20px;vertical-align:middle;'/>");
			arr.push("<div id='" + id + "_list' class='optgroup' style='text-align:left;display:none;'>");
			arr.push("<div id='" + id + "_ul' style='left:-1px; width:-1px;'>");
			for (i = 0; i < len; i++) {
				var iv = items[i].getAttribute("value");
				if (selectedFlag && iv == value) {
					selectedIndex = i;
					selectedFlag = false
				}
				if (selectedFlag && items[i].getAttribute("selected") !== null) {
					selectedIndex = i
				}
				arr.push('<a href="javascript:void(0);" onclick="Zving.Selector.onItemClick(this);" onmouseover=\'Zving.Selector.onItemMouseOver(this)\' hidefocus value="' + iv + '">' + items[i].innerHTML + "</a>")
			}
			arr.push("</div>");
			arr.push("</div>");
			html = arr.join("");
			if (html.indexOf("_ZVING_NOID_") >= 0) {
				html = html.replace(/_ZVING_NOID_/g, id)
			}
			ele.innerHTML = html
		} else {
			ele.textField = ele.getElementsByTagName("INPUT")[0];
			ele.valueField = ele.getElementsByTagName("INPUT")[1];
			if (!value) {
				value = ele.valueField.value
			}
			selectedIndex = parseInt(ele.getAttribute("selectedIndex"), 10);
			html = ele.innerHTML;
			if (html.indexOf("_ZVING_NOID_") >= 0) {
				ele.innerHTML = html.replace(/_ZVING_NOID_/g, id)
			}
		}
		items = ele.getElementsByTagName("A");
		likeOption(items);
		if (items.length > 0 && value != items[selectedIndex].getAttribute("value")) {
			len = items.length;
			for (i = 0; i < len; i++) {
				if (items[i].getAttribute("selected") == "true") {
					selectedIndex = i;
					break
				}
			}
			for (i = 0; value !== null && value !== "" && i < len; i++) {
				if (items[i].getAttribute("value") == value) {
					selectedIndex = i;
					break
				}
			}
		}
		ele.InitFlag = true;
		if (isGecko) {
			ele._selectedIndex = selectedIndex
		} else {
			ele.selectedIndex = selectedIndex
		}
	};
	Selector.initMethod = function (ele) {
		ele = z.getDom(ele);
		ele.textField = ele.getElementsByTagName("INPUT")[0];
		ele.valueField = ele.getElementsByTagName("INPUT")[1];
		ele.name = ele.textField.name;
		ele.type = "select-one";
		ele.arrow = ele.getElementsByTagName("IMG")[0];
		ele.options = ele.Items = z.getDom(ele.id + "_ul").getElementsByTagName("A");
		if (ele.getAttribute("listurl")) {
			ele.value = ele._value = ele.getAttribute("value")
		} else {
			ele.Items = z.getDom(ele.id + "_ul").getElementsByTagName("A");
			likeOption(ele.Items);
			if (isIE) {
				ele.value = ele.valueField.value = ele.Items.length > 0 ? ele.Items[ele.selectedIndex].getAttribute("value") : ""
			} else {
				ele._value = ele.valueField.value = ele.Items.length > 0 ? ele.Items[ele._selectedIndex].getAttribute("value") : ""
			}
			ele.form = z.Node.getForm(ele);
			ele.length = ele.options.length;
			ele.setParam = function (k, v) {
				if (!this.Params) {
					this.Params = new DataCollection()
				}
				this.Params.add(k, v)
			};
			ele.loadData = function (func) {
				Selector.loadData(this, func)
			};
			ele.setLinkAge = function (field, target) {
				if (this.DataSource) {
					if (this.selectedIndex === 0) {
						$S(target, null)
					} else {
						var dr = this.DataSource.Rows[this.selectedIndex - 1];
						if (dr) {
							$S(target, dr.get(field))
						}
					}
				}
			};
			ele.clear = function () {
				this.InitFlag = true;
				this.value = this.valueField.value = "";
				this.textField.value = "";
				if (!this.getElementsByTagName("DIV")[0].children[0]) {
					return
				}
				this.getElementsByTagName("DIV")[0].children[0].innerHTML = "";
				this.Items = this.getElementsByTagName("DIV")[0].children[0].getElementsByTagName("A");
				this.value = this.valueField.value = "";
				this.textField.value = "";
				this.selectedIndex = 0;
				this.InitFlag = false
			};
			ele.getText = function () {
				return this.textField.value
			};
			ele.remove = function (index) {
				if (index < 0 || index >= this.Items.length) {
					z.Console.error("can't remove the item that index=" + index + "!");
					return
				}
				this.Items[index].outerHTML = "";
				this.options = this.Items = this.getElementsByTagName("DIV")[0].children[0].getElementsByTagName("A");
				if (this.selectedIndex == index) {
					this.selectedIndex = index
				}
				if (this.selectedIndex > index) {
					this.InitFlag = true;
					this.selectedIndex = this.selectedIndex - 1;
					this.InitFlag = false
				}
			};
			ele.addBatch = function (arr, index) {
				var showValue = ele.getAttribute("showValue") == "true";
				var html = [];
				for (var i = 0; i < arr.length; i++) {
					var text = arr[i][0];
					var value = arr[i][1];
					if (showValue) {
						if (text) {
							text = value + "-" + text
						} else {
							text = ""
						}
					}
					html.push('<a href="javascript:void(0);" onclick="Zving.Selector.onItemClick(this);" onmouseover=\'Zving.Selector.onItemMouseOver(this)\'  hidefocus value="' + value + '">' + text + "</a>")
				}
				if (!this.Items || this.Items.length === 0) {
					this.getElementsByTagName("DIV")[0].children[0].innerHTML = html.join("\n");
					this.options = this.Items = this.getElementsByTagName("DIV")[0].children[0].getElementsByTagName("A");
					likeOption(this.Items);
					return
				}
				var lastIndex = this.Items.length - 1;
				if (index !== null) {
					index = parseInt(index, 10);
					if (index > lastIndex) {
						index = lastIndex
					}
				} else {
					index = lastIndex
				}
				this.Items[index].insertAdjacentHTML("afterEnd", html.join("\n"));
				this.options = this.Items = this.getElementsByTagName("DIV")[0].children[0].getElementsByTagName("A");
				if (this.Items.length > 10) {
					this.getElementsByTagName("DIV")[0].children[0].style.height = "15em"
				}
			};
			ele.add = function (text, value, index) {
				ele.addBatch([[text, value]], index)
			};
			try {
				ele.selectedIndex = ele.selectedIndex || 0;
				if (ele.Items.length > 0) {
					ele.textField.value = isGecko ? ele.Items[ele._selectedIndex].textContent : ele.Items[ele.selectedIndex].innerText
				}
			} catch (ex) {
				alert(ex.message + ele.id)
			}
		}
		ele.textField.onfocus = function () {
			var pw = z.rootWin;
			ele = z.Node.getParent(ele, "div");
			if (ele.id != pw.Zving.Selector.showingID || !pw.Zving.Selector.showingID) {
				Selector.show(this)
			}
		};
		Selector.contractWidth(ele);
		var disabled = ele.getAttribute("disabled") || false;
		ele.disabled = false;
		if (isIE) {
			Selector.initMethodIE(ele)
		} else {
			Selector.initMethodGecko(ele)
		}
		ele.input = ele.getAttribute("input") == "true" ? true : false;
		ele.disabled = disabled;
		if (isIE) {
			Selector.setInput(ele, ele.input);
			Selector.setDisabled(ele, disabled)
		}
		ele.InitFlag = false;
		$(window).on("unload", function () {
			Selector.destroy(ele)
		})
	};
	Selector.initMethodIE = function (ele) {
		ele.onpropertychange = function () {
			var s = event.srcElement;
			var v = s[event.propertyName];
			switch (event.propertyName.toLowerCase()) {
			case "disabled":
				Selector.setDisabled(s, v);
				break;
			case "selectedindex":
				if (!s.ItemClickFlag && !s.InitFlag) {
					if (s.Items.length > 0) {
						Selector.setSelectedIndex(s, s.selectedIndex)
					}
				}
				break;
			case "input":
				if (!s.ItemClickFlag && !s.InitFlag) {
					Selector.setInput(s, s.input)
				}
				break;
			case "size":
				break;
			case "value":
				if (!s.ItemClickFlag && !s.InitFlag) {
					Selector.setValue(s, v)
				}
				break
			}
		}
	};
	Selector.initMethodGecko = function (ele) {
		ele.__defineGetter__("disabled", function (flag) {
			return this.textField.disabled
		});
		ele.__defineSetter__("disabled", function (flag) {
			Selector.setDisabled(this, flag)
		});
		ele.__defineGetter__("selectedIndex", function () {
			return this._selectedIndex
		});
		ele.__defineSetter__("selectedIndex", function (index) {
			if (this.ItemClickFlag || this.InitFlag) {
				return
			}
			index = parseInt(index, 10);
			if (index >= 0 && index < this.Items.length) {
				this._selectedIndex = index
			} else {
				return
			}
			Selector.setSelectedIndex(this, this._selectedIndex)
		});
		ele.__defineGetter__("input", function () {
			return this._input
		});
		ele.__defineSetter__("input", function (flag) {
			if (this.ItemClickFlag || this.InitFlag) {
				return
			}
			this._input = flag != "false";
			Selector.setInput(this, this._input)
		});
		ele.__defineGetter__("size", function () {
			return this._size
		});
		ele.__defineSetter__("size", function (size) {
			this._Size = size
		});
		ele.__defineGetter__("value", function () {
			return this._value
		});
		ele.__defineSetter__("value", function (v) {
			if (this.ItemClickFlag || this.InitFlag) {
				return
			}
			Selector.setValue(this, v)
		})
	};
	Selector.setReturn = function (t, v, scrollTop) {
		var id = window.SelectorID;
		var pw = z.rootWin;
		var div = Selector.getSourceDiv(id);
		var oldValue = div.value;
		div.textField.value = t;
		if (isIE) {
			div.ItemClickFlag = true;
			div.value = div.valueField.value = v;
			div.ItemClickFlag = false
		} else {
			div._value = div.valueField.value = v
		}
		div._ScrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
		if (oldValue != v) {
			Selector.invokeOnChange(div)
		}
		if (pw.Zving.Selector.showingID) {
			z.Node.hide(pw.Zving.getDom("_SelectorDiv_"));
			pw.Zving.Selector.showingID = 0;
			z.AllDocumentsEvent.un("mousedown", pw.Zving.SelectorWindow.Zving.Selector._doClose)
		}
	};
	Selector.verifyInput = function (ele) {
		ele = z.getDom(ele);
		ele = ele.parentNode;
		var txt = ele.textField.value.trim();
		var arr = ele.options;
		var len = arr.length;
		var flag = false;
		for (var i = 0; i < len; i++) {
			var innerText = isGecko ? arr[i].textContent : arr[i].innerText;
			if (innerText.trim() == txt) {
				flag = true;
				break
			}
		}
		return flag
	};
	Selector.loadData = function (ele, func) {
		ele = z.getDom(ele);
		if (!ele.Params) {
			ele.Params = new DataCollection()
		}
		if (!ele.getAttribute("code") && !ele.getAttribute("method")) {
			z.Console.error("the ele hasn't 'code' and 'method' attribute!");
			return
		}
		if (!ele.Params.get("CodeType")) {
			ele.Params.add("CodeType", ele.getAttribute("code"))
		}
		if (!ele.Params.get("Method")) {
			ele.Params.add("Method", ele.getAttribute("method"))
		}
		if (!ele.Params.get("ConditionField")) {
			ele.Params.add("ConditionField", ele.getAttribute("conditionField"))
		}
		if (!ele.Params.get("ConditionValue")) {
			ele.Params.add("ConditionValue", ele.getAttribute("conditionValue"))
		}
		Server.sendRequest(Selector.BackendMethod, ele.Params, function (response) {
			var dt = response.get("DT");
			ele.InitFlag = true;
			ele.clear();
			if (dt) {
				var vs = dt.Values;
				var len = vs.length;
				var html = [];
				if (ele.getAttribute("defaultblank") != "false") {
					html.push('<a href="javascript:void(0);" onclick="Zving.Selector.onItemClick(this);" hidefocus value=""></a>')
				}
				var flag = "true" == ele.getAttribute("showvalue");
				for (var i = 0; i < len; i++) {
					var text = vs[i][1],
					value = vs[i][0];
					if (flag) {
						text = value + "-" + text
					}
					html.push('<a href="javascript:void(0);" onclick="Zving.Selector.onItemClick(this);" hidefocus value="' + value + '">' + text + "</a>")
				}
				ele.getElementsByTagName("DIV")[0].children[0].innerHTML = html.join("\n");
				ele.options = ele.Items = ele.getElementsByTagName("DIV")[0].children[0].getElementsByTagName("A");
				likeOption(ele.Items);
				if (ele.Items.length > 10 && !z.isIE) {
					ele.getElementsByTagName("DIV")[0].children[0].style.height = "15em"
				}
			}
			ele.setAttribute("lazy", false);
			ele.InitFlag = false;
			ele.selectedIndex = 0;
			ele.DataSource = dt;
			if (func) {
				try {
					func()
				} catch (ex) {}

			}
		})
	};
	Selector.initCtrl = function (ele) {
		ele = z.getDom(ele);
		if (ele.tagName == "INPUT") {
			ele = ele.parentNode
		}
		if (ele != z.getDom(ele.id)) {
			z.Console.error("页面中存在多个id为" + ele.id + "的元素，导致zSelect控件不能正常初始化，请更正。");
			return
		}
		if (ele.tagName == "DIV") {
			Selector.initHtml(ele);
			Selector.initMethod(ele)
		}
	};
	Selector.destroy = function (ele) {
		ele = z.getDom(ele);
		if (ele.textField) {
			ele.textField.onselectstart = ele.textField.onmousedown = ele.textField.oncontextmenu = ele.textField.onfocus = ele.textField.onblur = ele.textField.onkeydown = ele.textField.onkeyup = ele.textField.onclick = ele.textField.ondblclick = null
		}
		if (ele.arrow) {
			ele.arrow.onmouseover = ele.arrow.onmouseout = ele.arrow.onmousedown = ele.arrow.onclick = null
		}
		ele.textField = ele.valueField = ele.arrow = ele.options = ele.Items = ele.form = null;
		ele.DataSource = null;
		ele.Params = null;
		ele.setParam = ele.loadData = ele.setLinkAge = ele.clear = ele.getText = ele.remove = ele.addBatch = ele.add = null;
		ele.onpropertychange = null
	};
	$(window).on("unload", Selector._doClose);
	z.Selector = Selector
})();
(function () {
	Zving.Switchable = {};
	Zving.Switchable.tabs_onClick = function (b, d, c) {
		var a = $(b);
		if (a.hasClass("current")) {
			return false
		}
		a.$panelItems = a.$panelItems || $(c);
		a.$menuItems = a.$menuItems || $(d);
		for (i = 0; i < a.$menuItems.length; i++) {
			Node.removeClass(a.$menuItems[i], "current");
			a.$panelItems.eq(i).hide();
			if (a.$menuItems[i] == b) {
				Node.addClass(a.$menuItems[i], "current");
				a.$panelItems.eq(i).show()
			}
		}
	};
	Zving.Switchable.accordion_onClick = function (b, d, c) {
		var a = $(b);
		if (a.hasClass("current")) {
			return false
		}
		a.$panelItems = a.$panelItems || $(c);
		a.$menuItems = a.$menuItems || $$(d);
		for (i = 0; i < a.$menuItems.length; i++) {
			Node.removeClass(a.$menuItems[i], "current");
			a.$panelItems.eq(i).hide();
			if (a.$menuItems[i] == b) {
				Node.addClass(a.$menuItems[i], "current");
				a.$panelItems.eq(i).show()
			}
		}
	}
})();
