(function () {
	var k = window.Zving,
	d = k.Dom,
	o;
	var e = "key",
	j = "value",
	p = "result",
	m = "odd",
	c = "even",
	f = "z-suggest-key",
	b = "z-suggest-result",
	l = "z-suggest-closebtn",
	i = "Zving.Suggest.callback";
	o = function (q) {
		this.defaultConfig = this.defaultConfig || {
			dom : {},
			_dataCache : {}

		};
		if (!(this instanceof o)) {
			return new o(q)
		}
		this.constructor.superclass.constructor.apply(this, arguments)
	};
	o.layerTemplate = '<div class="z-suggest-content">    {result}</div><div class="z-suggest-footer"><a class="z-suggest-close-btn">\xd7</a></div>';
	o.resultTemplate = '<li><span class="z-suggest-key">...</span><span class="z-suggest-result">...</span></li>';
	k.Class.extend(o, k.UICompBase, {
		ctype : "Suggest",
		cls : "z-suggest-container",
		dataSource : null,
		target : null,
		delay : 200,
		hidden : true,
		closeBtn : false,
		closeBtnText : k.Lang.get("Common.Close"),
		defaultSplitMin : 40,
		callbackName : "callback",
		callbackFn : i,
		queryName : "q",
		query : "",
		resultFormat : "%result%",
		showResult : true,
		dataType : 0,
		getDataByAJAX : true,
		charset : "utf-8",
		renderTpl : o.layerTemplate,
		resultTpl : o.resultTemplate,
		parentEl : k.rootDoc.body,
		removeDomOnDestroy : true,
		htmlParser : function (q) {
			q = k.getDom(q);
			if (!q) {
				return
			}
			q.compId = this.id = k.pageId + "-" + k.id(q);
			var r = {
				target : q,
				textInput : q,
				dataSource : q.getAttribute("suggestsource")
			};
			return r
		},
		initComponent : function () {
			this.addEvents("beforeStart", "itemSelect", "beforeSubmit", "beforeDataRequest", "dataReturn", "updateFooter", "beforeShow");
			o.superclass.initComponent.apply(this);
			var q;
			var r = this.dataSource;
			if (typeof r == "string") {
				q = this.callbackFn;
				if (!this.getDataByAJAX) {
					r += (r.indexOf("?") === -1) ? "?" : "&";
					this.dataSource = r + this.callbackName + "=" + (q)
				}
				if (this.dataType === 2) {
					this.dataType = 0
				}
				if (q != i) {
					a(q)
				}
			} else {
				this.dataSource = r;
				this.dataType = 2
			}
			this._initTextInput()
		},
		initRenderData : function () {
			this.renderData = this.renderData || {};
			return k.extraIf(this.renderData, {
				id : this.id,
				cls : this.cls
			})
		},
		afterRender : function () {
			var r = this.el,
			q;
			this.dom.content = r.firstChild;
			this.dom.footer = r.lastChild;
			this._initContainerEvent();
			this._initContainer();
			this.initEvent()
		},
		_initTextInput : function () {
			var r = $(this.textInput);
			var q = this;
			r.attr("autocomplete", "off");
			r.keydown($.proxy(q.textInput_onKeyDown, q));
			r.keyup($.proxy(q.textInput_onKeyUp, q));
			r.blur($.proxy(q.textInput_onBlur, q))
		},
		textInput_onKeyDown : function (q) {
			var t = this,
			r = t.textInput;
			var s = k.getEvent(q),
			u = s.keyCode;
			var w = false;
			t.pressingCount = 0;
			if (u == 35 || u == 36) {
				if (!r.value) {
					k.stopEvent(s);
					return
				}
			}
			if (u === 27) {
				t.hide();
				r.value = t.query
			} else {
				if (u > 32 && u < 41) {
					if (!r.value) {
						r.blur()
					} else {
						if (u === 40 || u === 38) {
							if (t.pressingCount++ === 0) {
								if (t._isRunning) {
									t.stop()
								}
								w = true;
								t._selectItem(u === 40)
							} else {
								if (t.pressingCount == 3) {
									t.pressingCount = 0
								}
							}
							k.preventEvent(s)
						}
					}
				} else {
					if (u === 13) {
						r.blur();
						if (w) {
							if (r.value == t._getSelectedItemKey()) {
								if (t.fireEvent("itemSelect") === false) {
									return
								}
							}
						}
						t._submitForm()
					} else {
						if (!t._isRunning) {
							t.start()
						}
						w = false
					}
				}
			}
			if (k.isChrome) {
				if (t._keyTimer) {
					clearTimeout(t._keyTimer)
				}
				t._keyTimer = setTimeout(function () {
						t._keyTimer = undefined
					}, 500)
			}
		},
		textInput_onKeyUp : function (q) {
			this.pressingCount = 0
		},
		textInput_onBlur : function (q) {
			var r = this;
			r.stop();
			setTimeout(function () {
				if (!r._focusing) {
					r.hide()
				}
			}, 0)
		},
		_initContainer : function () {},
		_setContainerRegion : function () {
			var s = this,
			q = s.textInput,
			t = $(q).offsetEx(),
			r = s.el;
			k.Node.setPosition(r, {
				x : t.left,
				y : t.top + q.offsetHeight
			});
			$(r).width(s.containerWidth || q.offsetWidth - 2)
		},
		_initContainerEvent : function () {
			var t = this,
			s = $(t.el),
			r = $(t.dom.content),
			q = $(t.dom.footer);
			s.on("mousedown", $.proxy(t.container_onMouseDown, t));
			s.on("mouseleave", $.proxy(t.container_onMouseLeave, t));
			r.on("mousemove", $.proxy(t.content_onMouseMove, t));
			r.on("mousedown", $.proxy(t.content_onMouseDown, t));
			r.on("mouseup", $.proxy(t.content_onMouseUp, t));
			q.on("focusin", $.proxy(t.footer_onFocusIn, t));
			q.on("focusout", $.proxy(t.footer_onFocusOut, t));
			q.on("click", $.proxy(t.footer_onClick, t))
		},
		container_onMouseDown : function (q) {
			var s = this;
			var r = k.getEvent(q);
			var t = r.target || r.srcElement;
			if (!/^(?:input|button|a)$/i.test(t.nodeName)) {
				s.textInput.onbeforedeactivate = function () {
					s.textInput.ownerDocument.parentWindow.event.returnValue = false;
					s.textInput.onbeforedeactivate = null
				};
				k.preventEvent(r)
			}
		},
		content_onMouseMove : function (q) {
			var t = this,
			s = t.dom.content;
			var r = k.getEvent(q);
			var u = r.target || r.srcElement;
			if (t._keyTimer) {
				return
			}
			if (u.nodeName !== "LI") {
				u = $(u).parent("li")
			}
			if (u.ownerDocument == s.ownerDocument && $.contains(s, u)) {
				if (u != t.selectedItem) {
					t._removeSelectedItem();
					t._setSelectedItem(u)
				}
			}
		},
		content_onMouseDown : function (q) {
			var s = this;
			var r = k.getEvent(q);
			var t = r.target || r.srcElement;
			if (t.nodeName !== "LI") {
				t = $(t).parent("li")
			}
			s.mouseDownItem = t
		},
		content_onMouseUp : function (q) {
			var t = this,
			s = t.dom.content;
			var r = k.getEvent(q);
			var w = r.target || r.srcElement;
			if (r.button > 2) {
				return
			}
			if (w.nodeName !== "LI") {
				w = $(w).parent("li")
			}
			if (w != t.mouseDownItem) {
				return
			}
			if ($.contains(s, w)) {
				t._updateInputFromSelectItem(w);
				if (t.fireEvent("itemSelect") === false) {
					return
				}
				try {
					input.blur()
				} catch (u) {}

				t._submitForm()
			}
		},
		footer_onFocusIn : function (q) {
			var r = this;
			r._focusing = true;
			r._removeSelectedItem();
			r.mouseLeaveFooter = false
		},
		footer_onFocusOut : function (q) {
			var r = this;
			r._focusing = false;
			setTimeout(function () {
				if (r.mouseLeaveFooter) {
					r.hide()
				} else {
					if (!r._focusing) {
						r.textInput.focus()
					}
				}
			}, 0)
		},
		container_onMouseLeave : function (q) {
			this.mouseLeaveFooter = true
		},
		footer_onClick : function (q) {
			var s = this;
			var r = k.getEvent(q);
			var t = r.target || r.srcElement;
			if (/close/.test(t.className)) {
				s.hide()
			}
		},
		_submitForm : function () {
			var s = this;
			if (this.submitOnSelect) {
				var r = s.textInput.form;
				if (!r) {
					return
				}
				if (this.fireEvent("beforeSubmit") === false) {
					return
				}
				if (document.createEvent) {
					var q = document.createEvent("MouseEvents");
					q.initEvent("submit", true, false);
					r.dispatchEvent(q)
				} else {
					if (document.createEventObject) {
						r.fireEvent("onsubmit")
					}
				}
				r.submit()
			}
		},
		_initShim : function () {
			var q = this.ownerDocument.createElement("iframe");
			q.src = "about:blank";
			q.className = "z-shim";
			q.style.cssText = "position:absolute;visibility:hidden;border:none";
			this.dom.shim = q;
			this.ownerDocument.body.appendChild(q)
		},
		_setShimRegion : function () {
			var s = this,
			r = s.el,
			q = r.style,
			t = s.dom.shim;
			if (t) {
				k.Node.css(t, {
					left : parseInt(q.left, 10) - 2,
					top : q.top,
					width : parseInt(q.width, 10) + 2,
					height : r.offsetHeight - 2
				})
			}
		},
		initEvent : function () {
			k.EventManager.onWindowResize(this.onWindowResize, this)
		},
		onWindowResize : function () {
			this._setContainerRegion()
		},
		start : function () {
			var q = this;
			if (this.fireEvent("beforeStart") === false) {
				return
			}
			o.focusInstance = this;
			q._timer = q._timer || new k.Util.DelayedTask(function () {
					q._updateContent();
					q._timer.delay(q.delay)
				}, q);
			q._timer.delay(q.delay);
			q._isRunning = true
		},
		stop : function () {
			var q = this;
			o.focusInstance = undefined;
			if (q._timer) {
				q._timer.cancel()
			}
			q._isRunning = false
		},
		show : function () {
			var q = this,
			r = q.dom.shim;
			if (q.isVisible()) {
				return
			}
			q._setContainerRegion();
			o.superclass.show.apply(this);
			if (r) {
				q._setShimRegion();
				k.Node.show(r)
			}
		},
		hide : function () {
			var q = this,
			r = q.dom.shim;
			if (!q.isVisible()) {
				return
			}
			if (r) {
				k.Node.hide(r)
			}
			o.superclass.hide.apply(this)
		},
		_updateContent : function () {
			var s = this,
			r = s.textInput,
			t;
			if (!s.el) {
				s.render()
			}
			if (r.value == s.query) {
				return
			}
			t = s.query = r.value;
			if (!k.String.trim(t)) {
				s._fillContainer();
				s.hide();
				return
			}
			switch (s.dataType) {
			case 0:
				if (s._dataCache[t] !== undefined) {
					s._fillContainer(s._dataCache[t]);
					s._displayContainer()
				} else {
					s._requestData()
				}
				break;
			case 1:
				s._requestData();
				break;
			case 2:
				s._handleResponse(s.dataSource[t]);
				break
			}
		},
		_requestData : function () {
			if (this.getDataByAJAX) {
				this._requestDataByAJAX()
			} else {
				this._requestDataByScript()
			}
		},
		_requestDataByScript : function () {
			var s = this,
			q;
			if (!k.ie || k.ie9) {
				s.dataScript = undefined
			}
			if (!s.dataScript) {
				q = document.createElement("script");
				q.charset = s.charset;
				q.async = true;
				document.head.insertBefore(q, document.head.firstChild);
				s.dataScript = q;
				if (!k.ie || k.ie9) {
					var r = +new Date();
					s._latestScriptTime = r;
					q.setAttribute("data-time", r);
					q.onload = function () {
						s._scriptDataIsOut = q.getAttribute("data-time") != s._latestScriptTime
					}
				}
			}
			s.queryParams = s.queryName + "=" + encodeURIComponent(s.query);
			if (s.fireEvent("beforeDataRequest") === false) {
				return
			}
			s.dataScript.src = s.dataSource + "&" + s.queryParams
		},
		_requestDataByAJAX : function () {
			var r = this,
			q = new DataCollection();
			q.add(r.callbackName, r.callbackFn);
			q.add(r.queryName, r.query);
			if (r.fireEvent("beforeDataRequest") === false) {
				return
			}
			Server.sendRequest(r.dataSource, q, function (s) {
				q = null
			}, r.id)
		},
		_handleResponse : function (r) {
			var y = this,
			t,
			x = "",
			s,
			u,
			w,
			A,
			z,
			q;
			if (y._scriptDataIsOut) {
				return
			}
			y.returnedData = r;
			if (y.fireEvent("dataReturn") === false) {
				return
			}
			if (!y.contentRenderer) {
				x = y._renderContent(r)
			} else {
				x = y.contentRenderer(r)
			}
			y._fillContainer(x);
			if (y.fireEvent("beforeShow") === false) {
				return
			}
			if (!y.dataType) {
				y._dataCache[y.query] = y.dom.content.innerHTML
			}
			y._displayContainer()
		},
		_renderContent : function (r) {
			var y = this,
			t,
			x = "",
			s,
			u,
			w,
			A,
			z,
			q;
			t = y._formatData(y.returnedData);
			if ((u = t.length) > 0) {
				w = document.createElement("ol");
				for (s = 0; s < u; ++s) {
					q = t[s];
					A = y._formatItem((z = q[e]), y.showResult && q[p]);
					A.setAttribute(e, z);
					A.className = s % 2 ? c : m;
					w.appendChild(A)
				}
				x = w
			}
			return x
		},
		_formatData : function (w) {
			var r = [],
			q,
			u,
			t,
			s = 0;
			if (!w) {
				return r
			}
			if (k.isArray(w[p])) {
				w = w[p]
			}
			if (!(q = w.length)) {
				return r
			}
			for (t = 0; t < q; ++t) {
				u = w[t];
				if (k.isString(u)) {
					r[s++] = {
						key : u
					}
				} else {
					if (k.isArray(u) && u.length > 1) {
						r[s++] = {
							key : u[0],
							result : u[1]
						}
					}
				}
			}
			return r
		},
		_formatItem : function (t, r) {
			var q = document.createElement("li"),
			u,
			s;
			s = '<span class="' + f + '">' + t + "</span>";
			if (r) {
				u = this.resultFormat.replace("%result%", r);
				if (k.String.trim(u)) {
					s += '<span class="' + b + '">' + u + "</span>"
				}
			}
			q.innerHTML = s;
			return q
		},
		_fillContainer : function (r, s) {
			var q = this;
			q._fillContent(r || "");
			q._fillFooter(s || "")
		},
		_fillContent : function (q) {
			h(this.dom.content, q);
			this.selectedItem = undefined
		},
		_fillFooter : function (r) {
			var s = this,
			u = s.dom.footer,
			t;
			h(u, r);
			if (s.closeBtn) {
				var q = s.ownerDocument.createElement("a");
				q.href = "javascript: void(0)";
				q.className = l;
				q.innerHTML = s.closeBtnText;
				u.appendChild(q)
			}
			s.fireEvent("updateFooter");
			$(u).css("display", u.innerText.trim() === "" ? "none" : "")
		},
		_displayContainer : function () {
			var q = this;
			if (k.String.trim(q.dom.content.innerText)) {
				q.show()
			} else {
				q.hide()
			}
		},
		_selectItem : function (t) {
			var s = this,
			r = s.dom.content.getElementsByTagName("LI"),
			q;
			r = k.toArray(r);
			if (r.length < 1) {
				return
			}
			if (!s.isVisible()) {
				s.show();
				return
			}
			if (!s.selectedItem) {
				q = r[t ? 0 : r.length - 1]
			} else {
				q = r[k.Array.indexOf(r, s.selectedItem) + (t ? 1 : -1)];
				if (!q) {
					s.textInput.value = s.query
				}
			}
			s._removeSelectedItem();
			if (q) {
				s._setSelectedItem(q);
				s._updateInputFromSelectItem()
			}
		},
		_removeSelectedItem : function () {
			if (this.selectedItem) {
				k.Node.removeClass(this.selectedItem, "z-selected")
			}
			this.selectedItem = undefined
		},
		_setSelectedItem : function (q) {
			k.Node.addClass(q, "z-selected");
			this.selectedItem = q;
			this.textInput.focus()
		},
		_getSelectedItemKey : function () {
			var q = this;
			if (!q.selectedItem) {
				return ""
			}
			return q.selectedItem.getAttribute(e)
		},
		_updateInputFromSelectItem : function () {
			var q = this;
			q.textInput.value = q._getSelectedItemKey(q.selectedItem) || q.query
		},
		beforeDestroy : function () {
			var t = this,
			s = $(t.el),
			r = $(t.dom.content),
			q = $(t.dom.footer);
			s.off("mousedown");
			s.off("mouseleave");
			r.off("mousemove");
			r.off("mousedown");
			r.off("mouseup");
			r.off("focusin");
			r.off("focusout");
			r.off("click")
		}
	});
	function h(r, q) {
		if (q.nodeType == 1) {
			r.innerHTML = "";
			if (k.isIE && r.ownerDocument != q.ownerDocument) {
				r.innerHTML = q.outerHTML
			} else {
				r.appendChild(q)
			}
		} else {
			r.innerHTML = q
		}
	}
	function a(r) {
		var s = r.split("."),
		q = s.length,
		t;
		if (q > 1) {
			r = r.replace(/^(.*)\..+$/, "$1");
			t = k.namespace(r, true);
			t[s[q - 1]] = n
		} else {
			window[r] = n
		}
	}
	function n(q) {
		if (!o.focusInstance) {
			return
		}
		setTimeout(function () {
			o.focusInstance._handleResponse(q)
		}, 0)
	}
	o.callback = n;
	k.Suggest = o
})();
(function () {
	var e = window.Zving,
	b = e.getDom,
	a,
	c,
	d;
	a = function (f) {
		this.autoEl = {
			tag : "label",
			cls : "Field",
			ztype : "Field"
		};
		a.superclass.constructor.call(this, f)
	};
	e.Class.extend(a, e.UICompBase, {
		ctype : "Field",
		checked : null,
		name : false,
		value : undefined,
		disabledClass : "z-label-disabled",
		afterRender : function (f) {
			this.fieldEl = this.el.getElementsByTagName("input")[0];
			if (this.checkable || this.checked || this.type == "checkbox") {
				this.setChecked(this.checked)
			}
			if (this.disabled) {
				this.disable(true)
			}
		},
		setValue : function (f) {
			this.fieldEl.value = v;
			this.value = v;
			return this
		},
		getValue : function () {
			return this.fieldEl.value
		},
		setText : function (h) {
			var f = this.el.getElementsByTagName("LABLE")[0];
			f.innerHTML = h;
			return this
		},
		getChecked : function () {
			if (this.fieldEl.checked === true) {
				this.checked = true;
				return true
			} else {
				this.checked = false;
				return false
			}
		},
		setChecked : function (j) {
			var h = this,
			i = h.fieldEl,
			f = h.labelEl;
			if (j) {
				h.checked = true;
				i.checked = true
			} else {
				h.checked = false;
				i.checked = false
			}
			this.fireEvent("checkchange", this)
		},
		_sync : function (f) {
			this._syncChecked(null, f);
			this._syncDisabled()
		},
		_syncChecked : function (h, k) {
			var i = this,
			f = i.labelEl,
			j = i.fieldEl.checked;
			if (h !== undefined && h !== null) {
				j = h
			}
			if (j) {
				i.checked = true;
				$(f).addClass("z-label-checked")
			} else {
				i.checked = false;
				$(f).removeClass("z-label-checked")
			}
		},
		_syncDisabled : function (h) {
			var i = this,
			f = i.labelEl,
			j = i.fieldEl.disabled;
			if (h !== undefined && h !== null) {
				j = h
			}
			if (j) {
				i.disabled = true;
				$(f).addClass("z-label-disabled")
			} else {
				i.disabled = false;
				$(f).removeClass("z-label-disabled")
			}
		},
		disable : function (f) {
			var h = this.labelEl,
			i = this.fieldEl;
			if (this.rendered) {
				$(h).addClass(this.disabledClass);
				i.disabled = true
			}
			this.disabled = true;
			if (f !== true) {
				this.fireEvent("disable", this)
			}
			return this
		},
		enable : function (f) {
			var h = this.labelEl,
			i = this.fieldEl;
			if (this.rendered) {
				$(h).removeClass(this.disabledClass);
				i.disabled = false
			}
			this.disabled = false;
			if (f !== true) {
				this.fireEvent("enable", this)
			}
			return this
		}
	});
	c = function (f) {
		this.autoEl = {
			tag : "sapn",
			cls : "z-checkbox",
			ztype : "Checkbox"
		};
		if (!(this instanceof c)) {
			return new c(f)
		}
		c.superclass.constructor.call(this, f)
	};
	e.Class.extend(c, a, {
		ctype : "Checkbox",
		htmlParser : function (f) {
			f = b(f);
			if (!f) {
				return
			}
			this.el = f;
			this.initDom();
			return {
				el : f
			}
		},
		initDom : function () {
			var i = this,
			j,
			h;
			if (i.el.type == "checkbox" || i.el.type == "radio") {
				j = i.fieldEl = i.el
			} else {
				j = i.fieldEl = i.el.getElementsByTagName("INPUT")[0]
			}
			var f = $(j).next();
			if (f[0] && f[0].nodeName == "LABEL" && (f.attr("for") == i.fieldEl.id || !f.attr("for"))) {
				h = i.labelEl = f[0]
			}
			i.value = j.value;
			if (j || !j._syncChecked) {
				if (j.watch) {
					j.watch("checked", function (k, l, m) {
						i._syncChecked(m);
						return m
					});
					j.watch("disabled", function (k, l, m) {
						i._syncDisabled(m);
						return m
					})
				}
				if (j.addEventListener) {
					j.addEventListener("change", function (k) {
						i._syncChecked()
					}, false)
				} else {
					if (j.attachEvent) {
						j.attachEvent("onpropertychange", function (k) {
							i._sync()
						})
					}
				}
				j._sync = function () {
					i._sync()
				};
				j._sync()
			}
		}
	});
	d = function (f) {
		this.autoEl = {
			tag : "sapn",
			cls : "z-radio",
			ztype : "Radio"
		};
		if (!(this instanceof d)) {
			return new d(f)
		}
		d.superclass.constructor.call(this, f)
	};
	e.Class.extend(d, a, {
		ctype : "Radio",
		htmlParser : function (f) {
			f = b(f);
			if (!f) {
				return
			}
			this.el = f;
			this.initDom();
			return {
				el : f
			}
		},
		initDom : function () {
			var i = this,
			j,
			h;
			if (i.el.type == "checkbox" || i.el.type == "radio") {
				j = i.fieldEl = i.el
			} else {
				j = i.fieldEl = i.el.getElementsByTagName("INPUT")[0]
			}
			var f = $(j).next();
			if (f[0] && f[0].nodeName == "LABEL" && (f.attr("for") == i.fieldEl.id || !f.attr("for"))) {
				h = i.labelEl = f[0]
			}
			i.value = j.value;
			if (j || !j._syncChecked) {
				if (j.watch) {
					j.watch("checked", function (k, l, m) {
						i._syncChecked(m);
						return m
					});
					j.watch("disabled", function (k, l, m) {
						i._syncDisabled(m);
						return m
					})
				}
				if (j.addEventListener) {
					j.addEventListener("change", function (k) {
						i._syncChecked()
					}, false)
				} else {
					if (j.attachEvent) {
						j.attachEvent("onpropertychange", function (k) {
							i._sync()
						})
					}
				}
				j._sync = function () {
					i._sync()
				};
				j._sync()
			}
		},
		_syncChecked : function (i, f) {
			var j = this,
			h = j.labelEl,
			k = j.fieldEl.checked;
			if (i !== undefined && i !== null) {
				k = i
			}
			if (k) {
				j.checked = true;
				$(h).addClass("z-label-checked");
				if (!f) {
					j._syncRadioGroup()
				}
			} else {
				j.checked = false;
				$(h).removeClass("z-label-checked")
			}
		},
		_syncRadioGroup : function () {
			var j = this,
			h = j.labelEl,
			k = j.fieldEl,
			f = k.name;
			var i = $(k).parent("form")[0];
			if (!i) {
				i = h.ownerDocument.body
			}
			var l = $(i).find("input[name=" + f + "]").not(k);
			l.each(function () {
				if (this._sync) {
					this._sync(null, true)
				} else {
					$(this).next().removeClass("z-label-checked")
				}
			})
		}
	});
	e.Checkbox = c;
	e.Radio = d
})();
(function () {
	var c = window.Zving,
	a,
	b;
	a = function (d) {
		this.defaultConfig = {
			items : []
		};
		if (!(this instanceof a)) {
			return new a(d)
		}
		this.autoEl = {
			tag : "a",
			cls : "z-btn",
			ztype : "button",
			onselectstart : "return false"
		};
		a.superclass.constructor.call(this, d);
		if (this.icon) {
			if (/.*\.(gif|png|jpg)$/i.test(this.icon)) {
				this.iconHtml = c.String.format('<img class="z-btn-icon" src="?" width="18" height="18" />', this.icon)
			} else {
				if (/-?\d+ -?\d+/i.test(this.icon)) {
					var f = this.icon.match(/\d+/g)[0];
					var e = this.icon.match(/\d+/g)[1];
					this.iconHtml = c.String.format('<img class="z-btn-icon" src="?images/blank.gif" width="18" height="18" style="background-position:-?px -?px;" />', c.JSLIBPATH, f, e)
				}
			}
		} else {
			this.iconHtml = ""
		}
		if (this.href && !/^(#|javascript:void)/.test(this.href)) {
			this.type = "link";
			this.autoEl.href = this.href;
			this.autoEl.onclick = "{onclickAttributeValue};";
			if (this.target) {
				this.autoEl.target = this.target
			}
		} else {
			this.autoEl.href = "javascript:void(0);";
			this.autoEl.onclick = "{onclickAttributeValue};return false;"
		}
		if (this.menu) {
			this.autoEl.menu = this.menu.getId()
		}
		if (this.initFromExistEl) {
			this.afterRender()
		}
		this.addEvents("click", "checkchange", "menushow", "menuhide", "menuitemclick", "arrowclick", "change");
		if (this.changeHandler) {
			this.on("change", this.changeHandler, this.scope || this);
			delete this.changeHandler
		}
		if (this.menu && (this.type == "split" || this.type == "select")) {
			this.on("menuitemclick", function (i, h) {
				this.setActiveItem(h)
			})
		}
		if (this.initFromExistEl) {
			this.attachMethod2Dom()
		}
	};
	a.htmlTemplate = "{iconHtml}<b>{text}<i></i></b>";
	c.Class.extend(a, c.UICompBase, {
		ctype : "Button",
		type : "push",
		text : "按钮",
		onclickAttributeValue : "",
		handler : null,
		changeHandler : null,
		checkHandler : null,
		menu : null,
		renderTpl : a.htmlTemplate,
		hidden : false,
		checkable : false,
		checked : null,
		disabledClass : "z-btn-disabled",
		htmlParser : function (h) {
			h = c.getDom(h);
			if (!h) {
				return
			}
			var m = {
				el : h,
				type : h.getAttribute("buttontype"),
				text : h.innerText,
				cls : h.className
			};
			var k = h.getAttributeNode("onclick");
			if (k && k.value) {
				m.onclickAttributeValue = k.value;
				m.handler = function () {
					h.fireEvent("onclick")
				}
			}
			var f = h.href;
			var n = h.getAttributeNode("href");
			var d = h.getAttribute("target");
			if (f && n) {
				m.href = f;
				if (!/^(#|javascript:)/.test(n.value)) {
					if (d) {
						m.target = d
					}
					m.type = "link"
				}
			}
			var i = h.getAttribute("checked");
			var j = h.getAttribute("onchecked");
			if (i || j) {
				m.onchecked = j;
				this.checkable = true;
				if (i === true || i === "true") {
					m.checked = true;
					m.cls += " z-btn-checked";
					this.checked = true
				} else {
					m.checked = false;
					this.checked = false
				}
				m.type = "checkbox"
			}
			var e = h.getAttribute("menu");
			if (e) {
				m.menu = c.DropMenuManager.get(e);
				m.cls += " z-btn-menu";
				m.type = "menu";
				if (h.getAttribute("buttontype") == "split") {
					m.type = "split"
				}
				if (h.getAttribute("buttontype") == "select") {
					m.type = "select";
					if (h.getAttribute("prependText")) {
						m.prependText = h.getAttribute("prependText")
					} else {}

				}
			}
			if (h._disabled === true || h.disabled === "true") {
				m.disabled = true;
				m.cls += " z-btn-disabled"
			}
			var l = h.getElementsByTagName("IMG");
			if (l.length) {
				m.icon = l[0].src
			}
			this.initFromExistEl = true;
			this.ownerDocument = h.ownerDocument;
			this.ownerWindow = h.ownerDocument.parentWindow;
			return m
		},
		beforerender : function () {
			if (typeof this.onclick == "string") {
				this.onclickAttributeValue = this.onclick;
				this.onclick = null
			}
		},
		initRenderData : function () {
			return c.extraIf(this.renderData, {
				id : this.id,
				cls : this.cls,
				text : this.text,
				onclickAttributeValue : this.onclickAttributeValue,
				iconHtml : this.iconHtml
			})
		},
		setText : function (f) {
			var d = this.el.getElementsByTagName("B")[0];
			var e = d.innerText.trim();
			d.innerHTML = d.innerHTML.replace(e, f);
			return this
		},
		setIcon : function (d) {
			if (/.*\.(gif|png|jpg)$/i.test(d)) {
				var e = this.el.getElementsByTagName("IMG");
				if (e.length) {
					e[0].src = d
				} else {
					this.iconHtml = c.String.format('<img class="z-btn-icon" src="{0}" width="18" height="18" />', d);
					this.el.insertAdjacentHTML("afterbegin", this.iconHtml)
				}
			}
			return this
		},
		getChecked : function () {
			if (this.$el.attr("checked") === "checked" || this.checked === true) {
				this.checked = true;
				this.$el.attr("checked", "checked");
				return true
			} else {
				this.checked = false;
				this.$el.removeAttr("checked");
				return false
			}
		},
		setChecked : function (d) {
			if (this.type == "checkbox" || this.type == "radio") {
				if (d) {
					this.addClass("z-btn-checked");
					this.checked = true;
					this.$el.attr("checked", "checked")
				} else {
					this.removeClass("z-btn-checked");
					this.checked = false;
					this.$el.removeAttr("checked")
				}
				this.fireEvent("checkchange", this)
			}
		},
		afterRender : function (d) {
			if (this.type != "link") {
				this.$el.on("click.button", $.proxy(this.onClick, this))
			}
			if (this.menu) {
				this.$el.hover($.proxy(this.onMouseEnter, this), $.proxy(this.onMouseLeave, this));
				this.menu.on("show", this.onMenuShow, this);
				this.menu.on("hide", this.onMenuHide, this);
				this.menu.on("itemclick", this.onMenuItemClick, this)
			}
			if (this.checkable || this.checked || this.type == "checkbox") {
				this.setChecked(this.checked)
			}
			if (this.disabled) {
				this.disable(true)
			}
			this.attachMethod2Dom()
		},
		attachMethod2Dom : function () {},
		showMenu : function () {
			if (this.rendered && this.menu) {
				if (this.menu.isVisible()) {
					this.menu.hide()
				}
				this.menu.ownerCt = this;
				this.menu.show(this.el)
			}
			return this
		},
		hideMenu : function () {
			if (this.hasVisibleMenu()) {
				this.menu.hide()
			}
			return this
		},
		hasVisibleMenu : function () {
			return this.menu && this.menu.ownerCt == this && this.menu.isVisible()
		},
		onMouseEnter : function (d) {
			var e = this;
			if (e.autoHideMenuTimer) {
				clearTimeout(e.autoHideMenuTimer)
			}
			e.autoHideMenuTimer = setTimeout(function () {
					e.showMenu()
				}, 200);
			e.menu.autoHideTimer = e.autoHideMenuTimer
		},
		onMouseLeave : function (d) {
			var e = this;
			e.autoHideMenuTimer = setTimeout(function () {
					e.hideMenu()
				}, 100);
			e.menu.autoHideTimer = e.autoHideMenuTimer
		},
		onClick : function (f) {
			var h = this.ownerWindow.Zving.getEvent(f);
			if (h) {
				c.preventEvent(h)
			}
			if (h && h.button !== undefined && h.button !== 0) {
				return
			}
			var d = false;
			if (h && h.srcElement && h.srcElement.tagName == "I") {
				d = true
			}
			if (!this.disabled) {
				if (this.menu && !this.hasVisibleMenu() && !this.ignoreNextClick) {
					if (this.type == "menu" || d) {
						this.showMenu()
					} else {
						if (d || this.type == "select") {
							var i = this.getActiveItem();
							if (i && i.handler) {
								i.handler()
							}
						}
					}
				}
				if (d) {
					this.fireEvent("arrowclick", this, h)
				}
				if (this.type == "checkbox") {
					this.setChecked(!this.checked)
				}
				if (this.handler && !this.onclickAttributeValue) {
					if (this.fireEvent("click", this, h) !== false) {
						if (this.parentMenu && this.parentMenu.fireEvent("itemclick", this, h) === false) {
							return
						}
						this.handler.call(this.scope || this, this, h)
					}
				}
			} else {
				c.stopEvent(h)
			}
		},
		onMenuShow : function (d) {
			if (this.menu.ownerCt == this) {
				this.menu.ownerCt = this;
				this.ignoreNextClick = 0;
				this.fireEvent("menushow", this, this.menu)
			}
		},
		onMenuItemClick : function (d) {
			this.fireEvent("menuitemclick", this, d)
		},
		onMenuHide : function (f) {
			if (this.menu.ownerCt == this) {
				var d = this;
				this.ignoreNextClick = setTimeout(function () {
						d.restoreClick()
					}, 250);
				this.fireEvent("menuhide", this, this.menu);
				delete this.menu.ownerCt
			}
		},
		restoreClick : function () {
			this.ignoreNextClick = 0
		},
		disable : function (d) {
			var f = this.el,
			e = this.$el;
			if (this.rendered) {
				e.addClass(this.disabledClass);
				if (f.onclick) {
					f._onclick_bak = f.onclick;
					f.onclick = null
				}
				f.disabled = true
			}
			this.disabled = true;
			if (d !== true) {
				this.fireEvent("disable", this)
			}
			return this
		},
		enable : function (d) {
			var f = this.el,
			e = this.$el;
			if (this.rendered) {
				e.removeClass(this.disabledClass);
				if (f._onclick_bak) {
					f.onclick = f._onclick_bak
				}
				f.disabled = null
			}
			this.disabled = false;
			if (d !== true) {
				this.fireEvent("enable", this)
			}
			return this
		},
		setActiveItemById : function (e, d) {
			return this.setActiveItem("proxy_" + e.replace(/^proxy_/, ""), d)
		},
		setActiveItem : function (f, i, e) {
			if (!this.menu.rendered) {
				this.showMenu();
				this.hideMenu()
			}
			if (!c.isObject(f)) {
				f = this.menu.getItemComponent(f)
			}
			if (!f) {
				return Console.error("按钮(" + this.id + ")的子项" + f + "不存在")
			}
			var h = this.prependText || "";
			h += f.text;
			if (this.type == "select") {
				if (!this.rendered) {
					this.text = f.text;
					this.iconCls = f.iconCls
				} else {
					this.setText(h);
					var d = f.icon;
					if (d) {
						this.setIcon(d)
					}
				}
			}
			this.activeItem = f;
			if (!f.checked) {
				f.setChecked(true, e)
			}
			if (i && this.type == "select") {
				this.getActiveItem().handler()
			}
			if (!e) {
				this.fireEvent("change", this, f)
			}
		},
		getActiveItem : function () {
			if (this.activeItem) {
				return this.activeItem
			}
			if (this.menu.items.length > 0) {
				return this.menu.items[0]
			}
			if (this.menu.itemsConfig.length > 0) {
				return this.menu.itemsConfig[0]
			}
		},
		getActiveItemId : function () {
			return this.getActiveItem().id.split("proxy_")[1]
		},
		beforeDestroy : function () {
			var d = this;
			if (d.menu && d.destroyMenu !== false) {
				d.menu.destroy()
			}
			d.el.onclick = null;
			this.$el.off("click.button")
		}
	});
	b = function () {
		var d = {};
		return {
			add : function (e) {
				d[e.id] = e
			},
			get : function (e) {
				return d[e]
			},
			remove : function (e) {
				if (e) {
					d[buttonId].destory()
				}
				delete d[buttonId]
			},
			removeAll : function (e) {
				c.iterate(d, function (f) {
					this.remove(f.remove(e))
				})
			}
		}
	};
	c.Button = a;
	c.ButtonGroup = b
})();
(function () {
	var c = window.Zving,
	a,
	b;
	a = function (d) {
		this.defaultConfig = {
			itemsConfig : [],
			items : []
		};
		if (c.isArray(d.items)) {
			d.itemsConfig = d.items;
			delete d.items
		}
		a.superclass.constructor.call(this, d)
	};
	c.Class.extend(a, c.UICompBase, {
		ctype : "Menu",
		minWidth : 120,
		shadow : "sides",
		defaultAlign : "lb",
		reAlign : "hr",
		defaultOffsets : [0, 0],
		hidden : true,
		floating : true,
		zIndex : 10200,
		hideParent : false,
		parentEl : c.rootDoc.body,
		showOnRootWindow : true,
		removeDomOnDestroy : true,
		defaultItemType : "Button",
		defaultItemConfig : {
			cmpCls : "z-btn-inmenu"
		},
		initComponent : function () {
			this.addEvents("itemclick");
			b.register(this);
			if (this.floating) {
				c.EventManager.onWindowResize(this.hide, this)
			}
			a.superclass.initComponent.call(this)
		},
		htmlParser : function (m) {
			if (!m) {
				return
			}
			m = c.getDom(m);
			var f = [],
			l = m.children,
			k,
			h,
			e;
			for (var j = 0, d = l.length; j < d; j++) {
				k = l[j];
				if (!k.id) {
					k.id = c.id(k)
				}
				h = {
					text : k.innerText,
					cls : k.className,
					id : "proxy_" + k.id,
					handler : (function (i) {
						return function () {
							i.fireEvent("onclick")
						}
					})(k)
				};
				if (k._disabled === true || k.disabled === "true") {
					h.disabled = true;
					h.cls += " z-btn-disabled"
				}
				e = k.getElementsByTagName("IMG");
				if (e.length) {
					h.icon = e[0].src
				}
				f.push(h)
			}
			return {
				id : c.id(m),
				itemsConfig : f
			}
		},
		initItems : function () {
			if (!this.items) {
				this.items = []
			}
		},
		addComponentsFromArray : function (e) {
			var h;
			this.items = [];
			for (var f = 0, d = e.length; f < d; f++) {
				h = e[f];
				if (c.isPlainObject(h)) {
					c.extraIf(h, this.defaultItemConfig);
					h = new this.ownerWindow.Zving[h.ctype || this.defaultItemConfig.ctype || this.defaultItemType](h)
				}
				this.add(h)
			}
		},
		add : function (d) {
			d.ownerCt = this;
			d.parentMenu = this;
			d.render(this.getContentEl());
			this.items.push(d);
			return d
		},
		addItem : function (h, f, e) {
			var d = {
				text : h
			};
			if (f) {
				if (typeof f == "string") {
					d.onclick = f + ";return false;"
				} else {
					d.handler = f
				}
			}
			if (e) {
				d.icon = e
			}
			d.cls = "z-btn-inmenu";
			this.add(new c.Button(d))
		},
		onRender : function (f, d) {
			if (!f) {
				f = this.parentEl || document.body
			}
			this.ownerDocument = f.ownerDocument;
			this.ownerWindow = f.ownerDocument.parentWindow;
			if (this.ownerWindow == c.rootWin) {
				this.showOnRootWindow = true
			} else {
				this.showOnRootWindow = false
			}
			var e = new c.Layer({
					cls : "z-menu",
					shadow : this.shadow,
					parentEl : f,
					zindex : this.zIndex
				});
			this.el = e.el;
			this.$el = this.ownerWindow.$(this.el);
			this.$el.on("click.menu", $.proxy(this.onClick, this));
			this.$el.hover($.proxy(this.onMouseEnter, this), $.proxy(this.onMouseLeave, this));
			if (c.isArray(this.itemsConfig) && this.itemsConfig.length > 0) {
				this.addComponentsFromArray(this.itemsConfig)
			} else {
				this.add(new c.UICompBase({
						html : '<div class="z-menu-no-items"></div>'
					}))
			}
		},
		afterRender : function () {},
		onMouseEnter : function (d) {
			if (this.autoHideTimer) {
				clearTimeout(this.autoHideTimer)
			}
		},
		onMouseLeave : function (d) {
			var e = this;
			this.autoHideTimer = setTimeout(function () {
					e.hide()
				}, 100)
		},
		onClick : function (d) {
			d = this.ownerWindow.Zving.getEvent(d);
			var e = d.target || d.srcElement;
			e = c.Node.getParent(e, "A");
			if (e) {
				if (c.Node.hasClass(e, "z-btn")) {
					if (c.Node.hasClass(e, "z-btn-haschildmenu") && this.ignoreParentClicks) {
						e.expandMenu();
						d.preventDefault()
					} else {
						if (c.Node.hasClass(e, "z-btn-inmenu")) {
							this.hide()
						}
					}
				}
			}
		},
		show : function (f, j, e) {
			var h;
			this.parentMenu = e;
			if (!this.el) {
				this.render();
				this.doLayout(false, true)
			}
			var i = c.Node.anchorPos(this.el, f, j || this.defaultAlign, this.reAlign, this.defaultOffsets, true);
			if (this.showOnRootWindow) {
				var d = c.Dom.getFrameOffset();
				i.x += d.left;
				i.y += d.top
			}
			this.showAt(i, e)
		},
		showAt : function (e, d) {
			if (this.fireEvent("beforeshow", this) !== false) {
				this.parentMenu = d;
				if (!this.el) {
					this.render()
				}
				c.Node.setPosition(this.el, e);
				this.$el.show();
				this.hidden = false;
				this.fireEvent("show", this)
			}
		},
		doLayout : function (e, d) {
			if (this.rendered) {
				this.onLayout(e, d)
			}
			this.hasLayout = true
		},
		onLayout : function (d, e) {
			this.doAutoSize()
		},
		doAutoSize : function () {},
		hide : function (d) {
			if (!this.isDestroyed) {
				this.deepHide = d;
				if (this.fireEvent("beforehide", this) !== false) {
					this.doHide();
					this.fireEvent("hide", this)
				}
				delete this.deepHide
			}
		},
		doHide : function () {
			this.hidden = true;
			if (this.rendered) {
				this.onHide()
			}
		},
		onHide : function () {
			if (this.el && this.floating) {
				this.$el.hide()
			}
			var d = this.parentMenu;
			if (this.deepHide === true && d) {
				if (d.floating) {
					d.hide(true)
				}
			}
		},
		getVisibilityEl : function () {
			return this.hideParent ? this.container : this.el
		},
		isVisible : function () {
			return this.rendered && c.Node.isVisible(this.getVisibilityEl())
		},
		remove : function (d, e) {
			this.initItems();
			var f = this.getItemComponent(d);
			if (f) {
				this.doRemove(f, e)
			}
			return f
		},
		onRemove : function (d) {},
		doRemove : function (e, d) {
			this.items.remove(e);
			if (e.onRemoved) {
				e.onRemoved()
			}
			this.onRemove(e);
			if (d === true || (d !== false && this.autoDestroy)) {
				e.destroy(true)
			}
		},
		removeAll : function (f) {
			this.initItems();
			var j,
			k = [],
			e = [];
			this.items.each(function (l) {
				k.push(l)
			});
			for (var h = 0, d = k.length; h < d; ++h) {
				j = k[h];
				this.remove(j, f);
				if (j.ownerCt !== this) {
					e.push(j)
				}
			}
			return e
		},
		getItemComponent : function (e) {
			if (typeof e == "string") {
				for (var f = 0, d = this.items.length, h; f < d; f++) {
					h = this.items[f];
					if (h.id == e) {
						return h
					}
				}
			}
			if (c.isObject(e)) {
				return e
			}
		},
		getItemComponentByIndex : function (d) {
			return this.items[d]
		},
		beforeDestroy : function () {},
		onDestroy : function () {
			EventManager.removeResizeListener(this.hide, this);
			b.unregister(this);
			if (this.rendered) {
				this.$el.remove()
			}
		},
		destroy : function () {
			if (!this.isDestroyed) {
				this.destroying = true;
				this.beforeDestroy();
				this.onDestroy();
				this.fireEvent("destroy", this);
				this.purgeListeners();
				this.destroying = false;
				this.isDestroyed = true
			}
		}
	});
	b = function () {
		var j,
		h,
		f = {},
		d = false,
		n = new Date();
		function p() {
			j = b.menus = {};
			h = b.active = []
		}
		function l() {
			if (h && h.length > 0) {
				h.each(function (q) {
					q.hide()
				});
				return true
			}
			return false
		}
		function i(q) {
			var r = this;
			h.remove(q);
			if (h.length < 1) {
				if (this.showOnRootWindow) {
					c.AllDocumentsEvent.un("mousedown", o, r)
				} else {
					$(document).off("mousedown.menu")
				}
				d = false
			}
		}
		function m(q) {
			var r = this;
			var s = h[h.length - 1];
			n = new Date();
			h.push(q);
			if (!d) {
				if (this.showOnRootWindow) {
					c.AllDocumentsEvent.on("mousedown", o, r);
					$(window).on("unload", function () {
						if (c.AllDocumentsEvent) {
							c.AllDocumentsEvent.un("mousedown", o, r)
						}
					})
				} else {
					$(document).on("mousedown.menu", $.proxy(o, r))
				}
				d = true
			}
			if (q.parentMenu) {
				q.el.style.zIndex = parseInt(q.parentMenu.el.style.zIndex, 10) + 3;
				q.parentMenu.activeChild = q
			} else {
				if (s && !s.isDestroyed && s.isVisible()) {
					q.el.style.zIndex = parseInt(s.el.style.zIndex, 10) + 3
				}
			}
		}
		function e(q) {
			if (q.activeChild) {
				q.activeChild.hide()
			}
			if (q.autoHideTimer) {
				clearTimeout(q.autoHideTimer);
				delete q.autoHideTimer
			}
		}
		function k(q) {
			var r = q.parentMenu;
			if (!r && !q.allowOtherMenus) {
				l()
			} else {
				if (r && r.activeChild) {
					r.activeChild.hide()
				}
			}
		}
		function o(q) {
			if (new Date().getTime() - n.getTime() > 50 && h.length > 0) {
				q = c.getEvent(q);
				var r = q.target || q.srcElement;
				if (r.ownerDocument != this.ownerDocument && r.ownerDocument != c.rootDoc) {
					return l()
				}
				while (r) {
					if (c.Node.hasClass(r, "z-menu")) {
						return
					}
					r = r.parentNode
				}
				l()
			}
		}
		return {
			hideAll : function () {
				return l()
			},
			destroyAll : function () {
				c.iterate(j, function (r, q) {
					q.destroy()
				})
			},
			register : function (q) {
				if (!j) {
					p()
				}
				j[q.id] = q;
				q.on({
					beforehide : e,
					hide : i,
					beforeshow : k,
					show : m
				})
			},
			get : function (q) {
				return j[q]
			},
			unregister : function (q) {
				delete j[q.id];
				q.un("beforehide", e);
				q.un("hide", i);
				q.un("beforeshow", k);
				q.un("show", m)
			}
		}
	}
	();
	$(window).on("unload", b.destroyAll);
	c.DropMenu = a;
	c.DropMenuManager = b
})();
(function () {
	var c = window.Zving,
	a = c.Node,
	b;
	b = function (d) {
		b.superclass.constructor.apply(this, arguments);
		c.Page.onLayout(this.fitToSize, this);
		c.EventManager.onWindowResize(this.fitToSize, this)
	};
	c.Class.extend(b, c.UICompBase, {
		ctype : "Toolbar",
		contentElClass : "z-toolbar-nowrap",
		buttonElClass : "z-btn-flat",
		enableOverflow : true,
		triggerWidth : 22,
		hiddenItems : [],
		initComponent : function () {
			var d = this;
			this.addEvents("overflowchange");
			this.frameBody = $("." + this.contentElClass, this.el)[0];
			if (!this.frameBody) {
				c.Console.error("Toolbar.js - 初始化错误，找不到参数对应的页面元素")
			}
			var e = c.toArray(this.frameBody.children);
			this.items = [];
			e.each(function (h) {
				if (a.hasClass(h, d.buttonElClass)) {
					var f;
					if (h.compId) {
						f = c.ComponentManager.get(h.compId)
					} else {
						f = new c.Button(h)
					}
					f.ownerCt = d;
					f.parentToolbar = d;
					this.items.push(f)
				}
			}, this)
		},
		hideItem : function (d) {
			this.hiddenItems.push(d);
			d.xtbHidden = true;
			d.xtbWidth = d.el.offsetWidth;
			a.addClass(d.el, "z-hidden")
		},
		unhideItem : function (d) {
			a.removeClass(d.el, "z-hidden");
			d.xtbHidden = false;
			this.hiddenItems.remove(d)
		},
		getItemWidth : function (d) {
			return d.xtbHidden ? (d.xtbWidth || 0) : d.el.offsetWidth
		},
		fitToSize : function () {
			if (this.enableOverflow === false) {
				return
			}
			var e = this.frameBody.offsetWidth,
			o = e - this.triggerWidth,
			d = this.lastWidth || 0,
			m = 0,
			f = this.hiddenItems,
			j = f.length !== 0,
			p = e > d;
			this.lastWidth = e;
			if (e == d) {
				return
			}
			var n = this.items,
			l = n.length,
			h = 0,
			q;
			for (var k = 0; k < l; k++) {
				q = n[k];
				if (!q.isFill) {
					h += this.getItemWidth(q);
					if (h > o) {
						if (!(q.hidden || q.xtbHidden)) {
							this.hideItem(q)
						}
					} else {
						if (q.xtbHidden) {
							this.unhideItem(q)
						}
						m += this.getItemWidth(q)
					}
				}
			}
			j = f.length !== 0;
			if (j) {
				this.initMore();
				this.more.el.style.marginLeft = o - m + "px";
				if (!this.lastOverflow) {
					this.fireEvent("overflowchange", this.el, true);
					this.lastOverflow = true
				}
			} else {
				if (this.more) {
					this.clearMenu();
					this.more.destroy(true);
					delete this.more;
					if (this.lastOverflow) {
						this.fireEvent("overflowchange", this.el, false);
						this.lastOverflow = false
					}
				}
			}
		},
		initMore : function () {
			if (!this.more) {
				this.moreMenu = new c.DropMenu({
						ownerCt : this,
						listeners : {
							beforeshow : this.beforeMoreShow,
							scope : this
						}
					});
				this.more = new c.Button({
						text : "&nbsp;",
						type : "menu",
						cls : "z-toolbar-more",
						menu : this.moreMenu,
						ownerCt : this
					});
				this.more.render(this.frameBody)
			}
		},
		beforeMoreShow : function (j) {
			var e = this.items,
			d = e.length,
			h;
			this.clearMenu();
			j.removeAll(true);
			for (var f = 0; f < d; f++) {
				h = e[f];
				if (h.xtbHidden) {
					this.addComponentToMenu(j, h)
				}
			}
			if (j.items.length < 1) {
				j.add(new c.UICompBase({
						html : '<div class="z-menu-no-items">(None)</div>'
					}))
			}
		},
		addComponentToMenu : function (h, e) {
			if (e.ctype == "Button") {
				var d = "z-btn-inmenu";
				if (e.el && (e.el.disabled === true || e.el.disabled === "true")) {
					d += " z-btn-disabled"
				}
				var f = c.extraIf({
						el : null,
						cls : d,
						onclick : ""
					}, e.initialConfig);
				h.add(new c.Button(f))
			}
		},
		clearMenu : function () {
			var d = this.moreMenu;
			if (d && d.items) {
				d.items.each(function (e) {
					delete e.menu
				})
			}
		}
	});
	b.pageOnReady = function () {
		var e = $("div.z-toolbar");
		var d = {};
		if (e.length) {
			e.each(function () {
				d[c.id(this)] = new b(this)
			})
		}
	};
	c.Toolbar = b
})();
(function () {
	if (!(Zving.isIE6 || Zving.isIE7)) {
		return
	}
	var K = window.Zving,
	s = K.isIE,
	V = K.isIE6;
	if (location.toString().indexOf("file:///") === 0) {
		return
	}
	if (document.compatMode != "CSS1Compat") {
		return
	}
	var m = document;
	var A = m.documentElement;
	var X = u();
	var y;
	var W = [];
	var C = 0;
	var d = true;
	var M = "z";
	var b = /(\/\*[^*]*\*+([^\/][^*]*\*+)*\/)\s*/g;
	var q = /@import\s*(?:(?:(?:url\(\s*(['"]?)(.*)\1)\s*\))|(?:(['"])(.*)\3))[^;]*;/g;
	var E = /\burl\(\s*(["']?)(?!data:)([^"')]+)\1\s*\)/g;
	var F = /^:(empty|(first|last|only|nth(-last)?)-(child|of-type))$/;
	var T = /:(:first-(?:line|letter))/g;
	var G = /(^|\})\s*([^\{]*?[\[:][^{]+)/g;
	var D = /([ +~>])|(:[a-z\-]+(?:\(.*?\)+)?)|(\[.*?\])/g;
	var L = /(:not\()?:(hover|enabled|disabled|focus|checked|target|active|visited|first-line|first-letter)\)?/g;
	var Z = /[^\w\-]/g;
	var r = /^(INPUT|SELECT|TEXTAREA|BUTTON)$/;
	var p = /^(checkbox|radio)$/;
	var x = K.ieVersion > 6 ? /[\$\^*]=(['"])\1/ : null;
	var f = /([(\[+~])\s+/g;
	var N = /\s+([)\]+~])/g;
	var t = /\s+/g;
	var c = /^\s*((?:[\S\s]*\S)?)\s*$/;
	var w = "";
	var o = " ";
	var Y = "$1";
	function U(z) {
		return z.replace(T, Y).replace(G, function (ab, ag, af) {
			var ac = af.split(",");
			for (var ah = 0, ae = ac.length; ah < ae; ah++) {
				var aa = i(ac[ah]) + o;
				var ad = [];
				ac[ah] = aa.replace(D, function (aj, al, am, ak, ai) {
						if (al) {
							if (ad.length > 0) {
								Q(aa.substring(0, ai), ad);
								ad = []
							}
							return al
						} else {
							var an = (am) ? B(am) : S(ak);
							if (an) {
								ad.push(an);
								return "." + an.className
							}
							return aj
						}
					})
			}
			return ag + ac.join(",")
		})
	}
	function S(z) {
		return (!x || x.test(z)) ? {
			className : H(z),
			applyClass : true
		}
		 : null
	}
	function B(ae) {
		var ad = true;
		var ac = H(ae.slice(1));
		var ab = ae.substring(0, 5) == ":not(";
		var aa;
		var af;
		if (ab) {
			ae = ae.slice(5, -1)
		}
		var z = ae.indexOf("(");
		if (z > -1) {
			ae = ae.substring(0, z)
		}
		if (ae.charAt(0) == ":") {
			switch (ae.slice(1)) {
			case "root":
				ad = function (ag) {
					return ab ? ag != document.documentElement : ag == document.documentElement
				};
				break;
			case "checked":
				ad = function (ag) {
					if (p.test(ag.type)) {
						n(ag, "propertychange", function () {
							if (event.propertyName == "checked") {
								I(ag, ac, ag.checked !== ab)
							}
						})
					}
					return ag.checked !== ab
				};
				break;
			case "disabled":
				ab = !ab;
			case "enabled":
				ad = function (ag) {
					if (r.test(ag.tagName)) {
						n(ag, "propertychange", function () {
							if (event.propertyName == "$disabled") {
								I(ag, ac, ag.$disabled === ab)
							}
						});
						W.push(ag);
						ag.$disabled = ag.disabled;
						return ag.disabled === ab
					}
					return ae == ":enabled" ? ab : !ab
				};
				break;
			case "focus":
				aa = "focus";
				af = "blur";
			case "hover":
				if (!aa) {
					aa = "mouseenter";
					af = "mouseleave"
				}
				ad = function (ag) {
					n(ag, ab ? af : aa, function () {
						I(ag, ac, true)
					});
					n(ag, ab ? aa : af, function () {
						I(ag, ac, false)
					});
					return ab
				};
				break;
			default:
				if (!F.test(ae)) {
					return false
				}
				break
			}
		}
		return {
			className : ac,
			applyClass : ad
		}
	}
	function Q(z, aa) {
		var ac;
		var ah = z.replace(L, w);
		if (ah == w || ah.charAt(ah.length - 1) == o) {
			ah += "*"
		}
		try {
			ac = y(ah)
		} catch (aj) {
			Console.error("Selector '" + z + "' threw exception '" + aj + "'")
		}
		if (ac) {
			for (var ai = 0, ad = ac.length; ai < ad; ai++) {
				var ag = ac[ai];
				var af = ag.className;
				for (var ae = 0, ak = aa.length; ae < ak; ae++) {
					var ab = aa[ae];
					if (!O(ag, ab)) {
						if (ab.applyClass && (ab.applyClass === true || ab.applyClass(ag) === true)) {
							af = h(af, ab.className, true)
						}
					}
				}
				ag.className = af
			}
		}
	}
	function O(aa, z) {
		return new RegExp("(^|\\s)" + z.className + "(\\s|$)").test(aa.className)
	}
	function H(z) {
		return M + "-" + ((V && d) ? C++ : z.replace(Z, function (aa) {
				return aa.charCodeAt(0)
			}))
	}
	function a(z) {
		return z.replace(c, Y)
	}
	function l(z) {
		return a(z).replace(t, o)
	}
	function i(z) {
		return l(z.replace(f, Y).replace(N, Y))
	}
	function I(ad, ac, z) {
		var ab = ad.className;
		var aa = h(ab, ac, z);
		if (aa != ab) {
			ad.className = aa;
			ad.parentNode.className += w
		}
	}
	function h(ac, ab, z) {
		var aa = RegExp("(^|\\s)" + ab + "(\\s|$)");
		var ad = aa.test(ac);
		if (z) {
			return ad ? ac : ac + o + ab
		} else {
			return ad ? a(ac.replace(aa, Y)) : ac
		}
	}
	function n(ab, z, aa) {
		ab.attachEvent("on" + z, aa)
	}
	function u() {
		if (window.XMLHttpRequest) {
			return new XMLHttpRequest()
		}
		try {
			return new ActiveXObject("Microsoft.XMLHTTP")
		} catch (z) {
			return null
		}
	}
	function k(z) {
		X.open("GET", z, false);
		X.send();
		return (X.status == 200) ? X.responseText : w
	}
	function J(ab, aa) {
		function ac(ad) {
			return ad.substring(0, ad.indexOf("/", 8))
		}
		if (/^https?:\/\//i.test(ab)) {
			return ac(aa) == ac(ab) ? ab : null
		}
		if (ab.charAt(0) == "/") {
			return ac(aa) + ab
		}
		var z = aa.split(/[?#]/)[0];
		if (ab.charAt(0) != "?" && z.charAt(z.length - 1) != "/") {
			z = z.substring(0, z.lastIndexOf("/") + 1)
		}
		return z + ab
	}
	function P(z) {
		if (z) {
			return k(z).replace(b, w).replace(q, function (ad, ae, aa, ac, ab) {
				return P(J(aa || ab, z))
			}).replace(E, function (ab, ac, aa) {
				ac = ac || w;
				return " url(" + ac + J(aa, z) + ac + ") "
			})
		}
		return w
	}
	var e;
	function j(z) {
		if (!e) {
			e = document.createElement("style");
			e.type = "text/css";
			document.getElementsByTagName("head")[0].appendChild(e)
		}
		if (e.styleSheet) {
			e.styleSheet.cssText += z
		} else {
			z = document.createTextNode(z);
			e.appendChild(z)
		}
		return e
	}
	function R() {
		var z,
		aa;
		var ab = document.getElementsByTagName("BASE");
		var ac = (ab.length > 0) ? ab[0].href : document.location.href;
		for (var ae = 0; ae < document.styleSheets.length; ae++) {
			aa = document.styleSheets[ae];
			if (aa.href && aa.href != w) {
				z = J(aa.href, ac);
				var ad;
				if (z) {
					ad = U(P(z));
					if (s) {
						aa.cssText = ad
					} else {
						j("\n/* " + z + " */\n" + ad)
					}
				}
			}
		}
		if (W.length > 0) {
			setInterval(function () {
				for (var ah = 0, af = W.length; ah < af; ah++) {
					var ag = W[ah];
					if (ag.disabled !== ag.$disabled) {
						if (ag.disabled) {
							ag.disabled = false;
							ag.$disabled = true;
							ag.disabled = true
						} else {
							ag.$disabled = ag.disabled
						}
					}
				}
			}, 250)
		}
	}
	y = jQuery;
	K.Page.onReady(function () {
		R()
	})
})();
(function () {
	var d = window.Zving;
	if (!d.isIE) {
		return
	}
	d.Misc.inputFocus = function () {
		if (!d.isIE) {
			return
		}
		if (document.getElementsByTagName("input").length + document.getElementsByTagName("textarea").length === 0) {
			return
		}
		var l,
		f,
		m,
		j;
		var h = document.links;
		if (h.length) {
			for (l = 0, f = h.length; l < f; l++) {
				if (h[l].tabIndex > -1 && h[l].onfocus === null && h[l].offsetWidth > 0 && h[l].offsetHeight > 0) {
					try {
						h[l].focus()
					} catch (k) {}

					m = h[l];
					break
				}
			}
		}
		if (m) {
			document.documentElement.scrollTop = 0;
			document.body.scrollTop = 0
		} else {
			j = document.createElement("A");
			j.href = "#";
			if (document.body.firstChild) {
				document.body.insertBefore(j, document.body.firstChild)
			} else {
				document.body.insertAdjacentElement("afterBegin", j)
			}
			try {
				j.focus()
			} catch (n) {}

			m = j
		}
		h = j = m = null
	};
	if (d.restricted) {
		return
	}
	if (window.frameElement && d.isIE6 && !d.isQuirks) {
		var c = document.getElementsByTagName("HTML")[0];
		if (c.style.overflow === "") {
			if (c.style.overflow === "") {
				c.style.overflow = "auto"
			}
			if (c.style.overflowY === "") {
				c.style.overflowY = "auto"
			}
			if (c.style.overflowX === "") {
				c.style.overflowX = "hidden"
			}
		} else {
			window._noScrollFix = true
		}
	}
	d.Misc.scrollFixOnresize = false;
	d.Misc.ie6ScrollFix = function () {
		if (d.isIE6 && !d.isQuirks) {
			if (window._noScrollFix) {
				return
			}
			var h = document.getElementsByTagName("HTML")[0];
			var e = Math.max(document.documentElement.scrollWidth, document.body.scrollWidth);
			if ((window.frameElement && e < window.frameElement.offsetWidth + 30) || (!window.frameElement && e < document.documentElement.clientWidth + 30)) {
				h.style.overflowX = "hidden";
				if (!d.Misc.scrollFixOnresize) {
					if (window.frameElement) {
						d.EventManager.onWindowResize(d.Misc.runIe6ScrollFix)
					}
					d.Misc.scrollFixOnresize = true
				}
			} else {
				h.style.overflowX = "auto"
			}
			var f = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
			if ((window.frameElement && f > window.frameElement.offsetHeight) || (!window.frameElement && f > document.documentElement.clientHeight)) {
				h.style.overflowY = "scroll";
				h.style.overflowX = "hidden"
			} else {
				h.style.overflowY = "auto"
			}
		}
	};
	var b = null;
	var a = 0;
	d.Misc.runIe6ScrollFix = function () {
		if (d.isIE6) {
			if (a > 9) {
				clearTimeout(b)
			} else {
				b = setTimeout(d.Misc.ie6ScrollFix, 100);
				a++
			}
		}
	};
	if (d.isIE6) {
		d.Page.onLoad(function () {
			d.Misc.ie6ScrollFix();
			d.Misc.runIe6ScrollFix()
		}, 1)
	}
})();
(function () {
	var e = window.Zving,
	c = e.getDom,
	a = e.Node,
	b = e.Lang,
	d;
	d = function (f) {
		if (!(this instanceof d)) {
			return new d(f)
		}
		d.superclass.constructor.apply(this, arguments)
	};
	e.Class.extend(d, e.UICompBase, {
		ctype : "PageBar",
		cls : "z-pagebar",
		autoEl : "div",
		renderTpl : '<div onclick="{onclick}" id="{id}-body" class="{cls}">{items}</div>',
		itemTpl : '<a class="{cls}" page="{page}" target="_self" href="{href}">{label}</a>',
		hrefTpl : "#{page}",
		labelTpl : "[{page}]",
		currentLabelTpl : "{page}",
		specialLabelMap : {
			first : "首页",
			last : "尾页",
			previous : "上一页",
			next : "下一页"
		},
		pageSize : undefined,
		beginPage : 1,
		endPage : 100,
		currentPage : undefined,
		rowHeight : 23,
		itemCount : 10,
		leftItemCount : 4,
		initComponent : function () {
			this.addEvents("beforeupdate", "update", "ongotopage");
			d.superclass.initComponent.apply(this)
		},
		htmlParser : function (h) {
			var f = c(h);
			return {
				el : f
			}
		},
		update : function (f) {
			var h = this;
			f = f || {};
			if (h.checkOptions(f)) {
				if (f.hasOwnProperty("currentPage") && f.currentPage != h.currentPage) {
					if (!h._notifyGotoPage(f.currentPage, false)) {
						delete f.currentPage
					}
				}
				h._updateNoCheck(f);
				return true
			}
			return false
		},
		_updateNoCheck : function (f) {
			var h = this;
			e.extra(h, f);
			if (h.getBodyEl()) {
				h._refresh()
			}
		},
		checkOptions : function (h) {
			var j = this;
			var i = h.beginPage || j.beginPage;
			var f = h.endPage || j.endPage;
			if (f <= i) {
				return false
			}
			if (h.hasOwnProperty("beginPage") && j.currentPage < i) {
				j.currentPage = i
			}
			if (h.hasOwnProperty("endPage") && j.currentPage >= f) {
				j.currentPage = f - 1
			}
			var k = h.currentPage || j.currentPage;
			if (k < i || k >= f) {
				return false
			}
			return true
		},
		_genItem : function (i, f) {
			var h = this;
			return e.String.tmpl(h.itemTpl, {
				cls : f ? f : "",
				page : i,
				href : e.String.tmpl(h.hrefTpl, {
					page : i
				}),
				label : function () {
					return (f ? (f == "current" ? e.String.tmpl(h.currentLabelTpl, {
								page : i
							}) : h.specialLabelMap[f]) : e.String.tmpl(h.labelTpl, {
							page : i
						}))
				}
			})
		},
		_genBody : function () {
			var f = this,
			h = f.initRenderData();
			return e.String.tmpl(f.renderTpl, f.renderData)
		},
		initRenderData : function () {
			var o = this,
			f = o.beginPage,
			j = o.endPage,
			m = o.currentPage,
			q = Math.min(Math.max(j - f + 1, 1), o.itemCount),
			p = Math.min(m - f, o.leftItemCount);
			p = Math.max(q - (j + 1 - m), p);
			var l = m - p,
			h = {
				first : f,
				last : j,
				previous : m - 1,
				next : m + 1
			},
			r = {};
			o.renderData = o.renderData || {};
			e.iterate(h, function (i, t) {
				r[i] = o._genItem(t, i);
				console.log(t, i, r[i])
			});
			r.previous = h.previous < f ? "" : r.previous;
			r.next = h.next > j ? "" : r.next;
			r.first = l == f ? "" : r.first;
			r.last = l + q > j ? "" : r.last;
			var s = [];
			for (var k = 0; k < q; k++) {
				var n = l + k;
				s[k] = o._genItem(n, n == m ? "current" : null)
			}
			o.renderData = {
				id : o.getId(),
				cls : o.cls,
				items : r.first + r.previous + s.join("") + r.next + r.last,
				onclick : "$(this).parents('.z-pagebar').getComponent()._handleOnClick(event, this);"
			};
			return o.renderData
		},
		_refresh : function () {
			var f = this;
			f.el.innerHTML = f.getString()
		},
		_handleOnClick : function (f) {
			f = e.getEvent(f);
			var i = this,
			h = f.target,
			j = Number(h.getAttribute("page"));
			if (j && i._notifyGotoPage(j, true)) {
				i._updateNoCheck({
					currentPage : j
				})
			} else {
				f.preventDefault()
			}
		},
		_notifyGotoPage : function (f, h) {
			return this.fireEvent("ongotopage", {
				page : f,
				fromClick : h
			})
		},
		ongotopage : function (f) {
			f.returnValue = false
		},
		getString : function () {
			var f = this;
			if (f.currentPage === undefined) {
				f.currentPage = f.beginPage
			}
			return f._genBody()
		}
	});
	e.PageBar = d
})();
(function () {
	var h = window.Zving,
	d = h.Server,
	e = h.Node,
	k = h.Page,
	a = h.Constant,
	c = h.Lang,
	j = h.CONTEXTPATH,
	b = h.Misc,
	i = {};
	i.BackendMethod = "com.zving.framework.ui.controls.DataGridUI.doWork";
	i.ToExcelAction = j + "com.zving.framework.ui.controls.DataGridUI.toExcel.zaction";
	i.SelectedBgColor = "#D8F79D";
	i.MouseOverBgColor = "#EDFBD2";
	i.rowHeight = 25;
	a.SortString = "_ZVING_SORTSTRING";
	a.PageIndex = "_ZVING_PAGEINDEX";
	a.PageTotal = "_ZVING_PAGETOTAL";
	a.TagBody = "_ZVING_TAGBODY";
	a.ID = "_ZVING_ID";
	a.Method = "_ZVING_METHOD";
	a.Page = "_ZVING_PAGE";
	a.Size = "_ZVING_SIZE";
	a.Null = "_ZVING_NULL";
	a.InsertRow = "_ZVING_INSERTROW";
	a.DataTable = "_ZVING_DATATABLE";
	function f() {
		if (i.EditingRow !== null) {
			i.changeStatus(i.EditingRow)
		}
	}
	i.onAllCheckClick = function (l) {
		l = h.getDom(l);
		var m = l.id;
		if (h.getDom(m + "_AllCheck").checked) {
			i.selectAll(l)
		} else {
			i.unselectAll(l)
		}
	};
	i.selectAll = function (n) {
		var o = n.id;
		var l = h.getByName(o + "_RowCheck");
		var m;
		n = h.getDom(n);
		for (m = 0; l && m < l.length; m++) {
			if (!l[m].disabled) {
				l[m].checked = true;
				i.onSelectorClick(l[m])
			}
		}
	};
	i.unselectAll = function (n) {
		n = h.getDom(n);
		var o = n.id;
		var l = h.getByName(o + "_RowCheck");
		var m;
		for (m = 0; l && m < l.length; m++) {
			if (!l[m].disabled) {
				l[m].checked = false;
				i.onSelectorClick(l[m])
			}
		}
	};
	i.getSelectedValue = function (l) {
		l = h.getDom(l);
		return h.getValues(l.id + "_RowCheck")
	};
	i.getSelectedTreeValue = function (l) {
		l = h.getDom(l);
		return h.getValues(l.id + "_TreeRowCheck")
	};
	i.getSelectedRows = function (n) {
		n = h.getDom(n);
		var l = [];
		var m;
		for (m = 1; m < n.rows.length; m++) {
			if (n.rows[m].Selected) {
				l.push(n.rows[m])
			}
		}
		return l
	};
	i.getSelectedData = function (n) {
		n = h.getDom(n);
		var p = n.DataSource;
		var l = [];
		var m;
		for (m = 1; m < n.rows.length; m++) {
			if (n.rows[m].Selected) {
				l.push(p.Values[m - 1])
			}
		}
		var o = new DataTable();
		var q = [];
		for (m = 0; m < p.Columns.length; m++) {
			q.push([p.Columns[m].Name, p.Columns[m].Type])
		}
		o.init(q, l);
		return o
	};
	i.select = function (o, m) {
		if (!m) {
			return
		}
		o = h.getDom(o);
		if (h.isArray(m)) {
			m.each(function (p) {
				i.select(o, p)
			})
		}
		var l = h.getByName(o.id + "_RowCheck");
		var n;
		if (!l) {
			return
		}
		for (n = 0; n < l.length; n++) {
			if (l[n].value === m) {
				l[n].checked = true;
				i.onSelectorClick(l[n]);
				break
			}
		}
	};
	i.onSelectorClick = function (m, l) {
		var n = h.Node.getParent(m, "TR");
		var p = n.parentNode.parentNode;
		if (m.tagName.toLowerCase() === "input") {
			n.Selected = m.checked
		} else {
			n.Selected = !n.Selected;
			h.getDom(p.id + "_RowCheck" + n.rowIndex).checked = n.Selected
		}
		i.onRowSelected(n, l);
		var o = p.getAttribute("multiselect") !== "false";
		if (l && o) {
			n.SelectorFlag = true
		}
	};
	i.onRowSelected = function (m, l) {
		if (typeof(m.DefaultBgColor) === "undefined") {
			m.DefaultBgColor = m.style.backgroundColor
		}
		if (m.Selected) {
			m.style.backgroundColor = i.SelectedBgColor
		} else {
			m.style.backgroundColor = m.DefaultBgColor
		}
	};
	i.onRowClick = function (o, l) {
		l = getEvent(l);
		var q = o.parentNode.parentNode;
		var p = q.getAttribute("multiselect") !== "false";
		var n,
		m,
		r;
		for (n = 1; n < q.rows.length; n++) {
			r = q.rows[n];
			if (l) {
				if (!l.ctrlKey || !p) {
					if (r !== o && r.Selected) {
						if (o.SelectorFlag) {
							continue
						}
						r.Selected = false;
						m = h.getDom(q.id + "_RowCheck" + r.rowIndex);
						if (m) {
							m.checked = false
						}
						i.onRowSelected(r)
					}
				}
			}
		}
		if (l && !o.SelectorFlag) {
			if (l.ctrlKey) {
				if (o.Selected) {
					o.Selected = false;
					m = h.getDom(q.id + "_RowCheck" + r.rowIndex);
					if (m) {
						m.checked = false
					}
					i.onRowSelected(o);
					o.SelectorFlag = false;
					return
				}
			}
		}
		m = h.getDom(q.id + "_RowCheck" + o.rowIndex);
		if (m) {
			if (l && !o.SelectorFlag) {
				m.checked = true
			}
			o.Selected = m.checked
		} else {
			o.Selected = true
		}
		i.onRowSelected(o, l);
		o.SelectorFlag = false
	};
	i.onSort = function (l) {
		var t = $(l);
		var r = t.attr("direction");
		if (!r) {
			r = ""
		}
		if (r.toUpperCase() === "ASC") {
			r = ""
		} else {
			if (r === "") {
				r = " DESC"
			} else {
				if (r.toUpperCase() === "DESC") {
					r = " ASC"
				}
			}
		}
		var q = t.attr("sortField");
		var s = t.closest("table");
		var m = s.attr("SortString");
		var o = [];
		if (!m) {
			m = ""
		}
		var p = m.split(",");
		var n;
		if (r !== "") {
			o.push(q + r)
		}
		for (n = 0; n < p.length; n++) {
			if (!p[n] || p[n].toLowerCase() === q.toLowerCase() || p[n].indexOf(q + " ") >= 0) {
				continue
			}
			o.push(p[n])
		}
		m = o.join();
		if (!m) {
			m = a.Null
		}
		if (s.hasClass("dg_headTable")) {
			s = s.parent().next().find("div.dg_body > table")
		}
		i.setParam(s[0], a.SortString, m);
		i.loadData(s[0]);
		t.attr("direction", r.trim());
		t.find("img.fr")[0].className = "fr icon_sort" + r.trim()
	};
	i.sort = function (m, n, l) {
		if (!l) {
			l = "DESC"
		} else {
			l = l.toUpperCase()
		}
		i.setParam(m, a.SortString, n + " " + l);
		i.loadData(m)
	};
	i.init = function (l) {
		l = h.getDom(l);
		h.Statable(l);
		i.setParam(l, a.ID, l.id);
		i.setParam(l, a.Method, l.getAttribute("method"));
		i.setParam(l, a.Page, l.getAttribute("page"));
		i.setParam(l, a.TagBody, l.TagBody);
		var n = l.id;
		l.clear = function () {
			i.clear(n)
		};
		l.loadData = function (p, o) {
			i.loadData(n, p, o)
		};
		l._insertRow = l.insertRow;
		l._deleteRow = l.deleteRow;
		l.insertRow = function (o, q, p) {
			i.insertRow(n, o, q, p)
		};
		l.deleteRow = function (o) {
			i.deleteRow(n, o)
		};
		l.edit = function (o) {
			i.edit(o, n)
		};
		l.filter = function (o) {
			i.filter(n, o)
		};
		l.getParam = function (o) {
			return i.getParam(n, o)
		};
		l.setParam = function (o, p) {
			i.setParam(n, o, p)
		};
		l.toExcel = function (o) {
			i.toExcel(n, o)
		};
		l.allToExcel = function () {
			i.allToExcel(n)
		};
		l.save = function (p, o) {
			i.save(n, p, o)
		};
		l.select = function (o) {
			i.select(n, o)
		};
		l.sort = function (p, o) {
			i.sort(n, p, o)
		};
		l.showLoading = function () {
			i.showLoading(n)
		};
		l.selectAll = function () {
			i.selectAll(n)
		};
		l.unselectAll = function () {
			i.unselectAll(n)
		};
		l.getSelectedData = function () {
			return i.getSelectedData(n)
		};
		l.getSelectedRows = function () {
			return i.getSelectedRows(n)
		};
		l.getSelectedTreeValue = function () {
			return i.getSelectedTreeValue(n)
		};
		l.getSelectedValue = function () {
			return i.getSelectedValue(n)
		};
		l.getSelectors = function () {
			return i.getSelectors(n)
		};
		l.getColumnInfo = function () {
			return i.getColumnInfo(n)
		};
		l.selectedRowToExcel = function () {
			i.selectedRowToExcel(n)
		};
		l.setFixedHeight = function (o) {
			i.setFixedHeight(n, o)
		};
		l.setFixedWidth = function (o) {
			i.setFixedWidth(n, o)
		};
		l.getPageSize = function () {
			return i.getParam(n, a.PageSize)
		};
		l.getPageIndex = function () {
			return i.getParam(n, a.PageIndex)
		};
		l.setPageSize = function (o) {
			i.setParam(n, a.PageSize, o)
		};
		l.setPageIndex = function (o) {
			i.setParam(n, a.PageIndex, o)
		};
		l.isPageFlag = function () {
			return h.getDom(n).getAttribute("page") === "true"
		};
		l.isScrollFlag = function () {
			return h.getDom(n).getAttribute("scroll") === "true"
		};
		var m = l.isPageFlag();
		if (m && l.rows.length <= 3) {
			l.RowHeight = 23
		} else {
			if (!m && l.rows.length === 1) {
				l.RowHeight = 23
			} else {
				if (m && l.rows.length > 1) {
					l.RowHeight = e.getSize(l.rows[1]).height
				} else {
					l.RowHeight = 23
				}
			}
		}
		if (!l.RowHeight) {
			l.RowHeight = 23
		}
		i.resumePagebar(l);
		if (h.getDom(n).getAttribute("autofill") === "true") {
			h.Page.onLayout(function () {
				i.layout(n);
				i.initScroll(n);
				i.computePageSize(l);
				i.resumePagebar(l)
			})
		}
		i.sortableInit(l)
	};
	i.sortableInit = function (n) {
		n = h.getDom(n);
		if (n.getAttribute("sortend")) {
			var m = window["eval"](n.getAttribute("sortend"));
			var l = "> .z-draggable";
			i.sortable(n, l, m)
		}
	};
	i.resumePagebar = function (q) {
		q = h.getDom(q);
		var o = q.id;
		var r = h.getDom("_PageBar_" + o);
		if (r) {
			var l = $(r);
			var s = Number(i.getParam(o, a.PageIndex));
			var t = Number(i.getParam(o, a.PageTotal));
			var y = Number(i.getParam(o, a.Size));
			var u = Math.floor(t / y);
			if (t % y === 0) {
				u--
			}
			var w = l.find(".first")[0];
			var n = l.find(".previous")[0];
			var m = l.find(".next")[0];
			var p = l.find(".last")[0];
			l.find(".js_total").html(t);
			l.find(".js_pageSize").html(y);
			l.find(".js_totalPages").html(1 + u);
			l.find(".js_pageIndex").html(1 + s);
			var z = l.find("input.gotopage");
			if (z.length) {
				z.val(1 + s).width(Math.max(String(1 + s).length * 7 + 1, 15))
			}
			if (l.attr("pagebartype") == "1") {
				var x = l.find(".tfoot-fl");
				x.attr("title", x.attr("title").replace(/共 \d+ 条记录/, "共 " + t + " 条记录").replace(/共 \d+ 條記錄/, "共 " + t + " 條記錄").replace(/每页 \d+ 条/, "每页 " + y + " 条").replace(/当前第 \d+ 页/, "当前第 " + (1 + s) + " 页").replace(/每頁 \d+ 條/, "每页 " + y + " 条").replace(/當前第 \d+ 頁/, "当前第 " + (1 + s) + " 页").replace(/Total \d+ Records/, "Total " + t + " Records").replace(/\d+ per Page/, y + " per Page").replace(/Current Page is \d+\/\d+/, "Current Page is " + (1 + s) + "/" + t))
			}
			w._innerHTML_bak = w._innerHTML_bak || w.innerHTML;
			n._innerHTML_bak = n._innerHTML_bak || n.innerHTML;
			m._innerHTML_bak = m._innerHTML_bak || m.innerHTML;
			p._innerHTML_bak = p._innerHTML_bak || p.innerHTML;
			if (!/^<.*>$/.test(w._innerHTML_bak)) {
				w._innerHTML_bak = "<a onclick=\"Zving.DataGrid.firstPage('" + o + '\');" href="javascript:void(0);">' + c.get("DataGrid.FirstPage") + "</a>";
				n._innerHTML_bak = "<a onclick=\"Zving.DataGrid.previousPage('" + o + '\');" href="javascript:void(0);">' + c.get("DataGrid.PrevPage") + "</a>"
			}
			if (!/^<.*>$/.test(p._innerHTML_bak)) {
				m._innerHTML_bak = "<a onclick=\"Zving.DataGrid.nextPage('" + o + '\');" href="javascript:void(0);">' + c.get("DataGrid.NextPage") + "</a>";
				p._innerHTML_bak = "<a onclick=\"Zving.DataGrid.lastPage('" + o + '\');" href="javascript:void(0);">' + c.get("DataGrid.LastPage") + "</a>"
			}
			if (s <= 0) {
				w.innerHTML = w.innerText;
				n.innerHTML = n.innerText
			} else {
				if (w.innerHTML.trim() == w.innerText.trim()) {
					w.innerHTML = w._innerHTML_bak;
					n.innerHTML = n._innerHTML_bak
				}
			}
			if (s >= u) {
				m.innerHTML = m.innerText;
				p.innerHTML = p.innerText
			} else {
				if (m.innerHTML.trim() == m.innerText.trim()) {
					m.innerHTML = m._innerHTML_bak;
					p.innerHTML = p._innerHTML_bak
				}
			}
		}
	};
	i.DataCache = {};
	i.setParam = function (m, l, n) {
		var o = h.id(h.getDom(m));
		if (!i.DataCache[o]) {
			i.DataCache[o] = {}

		}
		if (!i.DataCache[o].Params) {
			i.DataCache[o].Params = new DataCollection()
		}
		i.DataCache[o].Params.add(l, n)
	};
	i.getParam = function (m, l) {
		var n = h.id(h.getDom(m));
		if (!i.DataCache[n] || !i.DataCache[n].Params) {
			return
		}
		return i.DataCache[n].Params.get(l)
	};
	i.layout = function (m) {
		m = h.getDom(m);
		if (!h.Node.isVisible(m)) {
			return
		}
		var p = m.id;
		m.Wrapper = h.getDom(p + "_Wrap");
		m.Wrapper.body = h.getDom(p + "_Wrap_body");
		m.Wrapper.style.height = "99%";
		if (m.Wrapper.parentNode.clientHeight > 500) {
			m.Wrapper.style.height = "99.4%"
		}
		var l = m.Wrapper.clientHeight;
		var o = l - 29 - (m.isPageFlag() ? 29 : 0);
		try {
			m.Wrapper.body.style.height = o + "px"
		} catch (n) {
			h.Console.error(m.Wrapper.body, "设置高度不成功")
		}
		i.resumeScrollPanel(m)
	};
	i.computePageSize = function (o) {
		o = h.getDom(o);
		if (!o || !o.parentNode) {
			o = null;
			return
		}
		if (o.getAttribute("autopagesize") == "false" || o.getAttribute("autofill") == "false") {
			return false
		}
		if (o.style.height != "100%") {
			var m = o.parentNode.clientHeight;
			var n = Math.floor(m / i.rowHeight);
			var l = o.rows.length;
			if (l <= n + 1) {
				return
			}
			while (l > n + 1) {
				if (typeof o._deleteRow == "function") {
					o._deleteRow(l - 1)
				} else {
					o.deleteRow(l - 1)
				}
				if (h.isIE6) {
					l--
				} else {
					l = o.rows.length
				}
			}
			i.setParam(o, a.Size, n)
		}
	};
	i.initScroll = function (p) {
		p = h.getDom(p);
		if (p.getAttribute("autopagesize") == "true") {
			return false
		}
		var q = p.id;
		p.Wrapper = h.getDom(q + "_Wrap");
		p.Wrapper.head = h.getDom(q + "_Wrap_head");
		p.Wrapper.head.table = p.Wrapper.head.children[0];
		p.Wrapper.body = h.getDom(q + "_Wrap_body");
		p.Wrapper.body.table = p.Wrapper.body.children[0];
		p.Wrapper.onfocus = function () {
			$(this).addClass("dt_focus")
		};
		p.Wrapper.onblur = function () {
			$(this).removeClass("dt_focus")
		};
		p.Wrapper.body.onscroll = function () {
			var r = Math.floor(p.scrollLeft * p.Wrapper.head.table.scrollWidth / p.Wrapper.head.table.scrollWidth);
			if (p.Wrapper.head.scrollLeft !== r) {
				p.Wrapper.head.scrollLeft = r
			}
		};
		var n = p.Wrapper.head.table.rows[0].cells;
		if (p.getAttribute("autofill") !== "true" || Number(p.getAttribute("size")) === 0 || Number(p.getAttribute("size")) > 20) {
			if (h.ScrollPanel && !h.isIE && !h.isChrome) {
				if (!$(p.Wrapper).data("scrollpanelId")) {
					if (p.offsetHeight > p.Wrapper.body.offsetHeight) {
						$(p.Wrapper).data("scrollpanelId", new h.ScrollPanel({
								target : p.Wrapper.body
							}).getId());
						var o = n[n.length - 1];
						if (h.isIE) {
							var m = o.getAttribute("width");
							if (m && m.indexOf("%") > 0) {
								m = parseInt(m, 10);
								m += Math.round(15 * 100 / p.Wrapper.head.offsetWidth);
								o.width = m + "%"
							}
						} else {
							o.style.paddingRight = "22px"
						}
					}
				} else {
					var l = h.ComponentManager.get($(p.Wrapper).data("scrollpanelId"));
					if (l) {
						l.resume({
							target : p.Wrapper.body
						})
					}
				}
			}
		}
	};
	i.resumeScrollPanel = function (m) {
		m = h.getDom(m);
		var n = m.id;
		m.Wrapper = h.getDom(n + "_Wrap");
		m.Wrapper.body = h.getDom(n + "_Wrap_body");
		if ($(m.Wrapper).data("scrollpanelId")) {
			var l = h.ComponentManager.get($(m.Wrapper).data("scrollpanelId"));
			if (l) {
				l.resume({
					target : m.Wrapper.body
				})
			}
		}
	};
	i.getColumnInfo = function (p) {
		p = h.getDom(p);
		var q = p.rows[0];
		var m = [];
		var o;
		for (o = 0; o < q.cells.length; o++) {
			var r = q.cells[o];
			var l = r.getAttribute("ztype");
			l = l ? l.toLowerCase() : null;
			if (l === "rowno") {
				continue
			}
			if (l === "selector") {
				continue
			}
			if (l === "edit") {
				continue
			}
			if (r.innerText) {
				var n = h.isIE ? r.currentStyle.width : r.offsetWidth;
				n = n + "";
				if (n.indexOf("%") > 0) {
					n = h.Node.getSize(p).width * parseInt(n.replace(/\D/gi, ""), 10) / 100
				} else {
					if (n.indexOf("px") !== -1) {
						n = n.replace("px", "")
					} else {
						if (n === "auto") {
							n = 0
						}
					}
				}
				m.push([r.innerText, o, n])
			}
		}
		return m
	};
	i.selectedRowToExcel = function (n) {
		n = h.getDom(n);
		var o = i.getSelectedRows(n);
		var l = [];
		var m;
		for (m = 0; m < o.length; m++) {
			l.push(o[m].rowIndex)
		}
		i.toExcel(n, n.getParam(a.Page) === "true", l)
	};
	i.toExcel = function (m, l, n) {
		m = h.getDom(m);
		var o = new h.Dialog(c.get("DataGrid.SelectCol"), d.ContextPath + "Framework/Components/DataGridToExcelDialog.html?DataGridID=" + m.id, 500, 150);
		o.onOk = function () {
			var s = o.innerWin.Zving.getByName("Column");
			var p = [],
			q = [],
			r;
			for (r = 0; r < s.length; r++) {
				if (s[r].checked) {
					p.push(s[r].value);
					q.push(s[r].getAttribute("columnWidth"))
				}
			}
			i.toExcelSubmit(m, l, p, q, n);
			$D.close()
		};
		o.show()
	};
	i.allToExcel = function (q, n) {
		q = h.getDom(q);
		var m = [],
		o = [],
		p;
		var l = q.getColumnInfo();
		for (p = 0; p < l.length; p++) {
			m.push(l[p][1]);
			o.push(l[p][2])
		}
		i.toExcelSubmit(q, n, m, o)
	};
	i.toExcelSubmit = function (m, s, t, l, w) {
		m = h.getDom(m);
		var q = "_Excel_";
		var o = window.document.body;
		var r = h.getDom(q + "_Form");
		if (r) {
			r.outerHTML = ""
		}
		r = document.createElement("form");
		o.appendChild(r);
		r.id = q + "_Form";
		r.method = "post";
		r.action = i.ToExcelAction;
		var p = i.DataCache[m.id].Params.keys;
		var n,
		u;
		for (n = 0; n < p.length; n++) {
			u = h.getDom(q + p[n]);
			if (!u) {
				u = document.createElement("input")
			}
			u.type = "hidden";
			u.id = q + p[n];
			u.name = q + p[n];
			u.value = i.getParam(m, p[n]);
			r.appendChild(u)
		}
		u = h.getDom(q + "_ZVING_ToExcelPageFlag");
		if (!u) {
			u = document.createElement("input")
		}
		u.type = "hidden";
		u.id = q + "_ZVING_ToExcelPageFlag";
		u.name = q + "_ZVING_ToExcelPageFlag";
		u.value = s ? "1" : "0";
		r.appendChild(u);
		u = h.getDom(q + "_ZVING_Widths");
		if (!u) {
			u = document.createElement("input")
		}
		u.type = "hidden";
		u.id = q + "_ZVING_Widths";
		u.name = q + "_ZVING_Widths";
		u.value = l.join();
		r.appendChild(u);
		u = h.getDom(q + "_ZVING_Indexes");
		if (!u) {
			u = document.createElement("input")
		}
		u.type = "hidden";
		u.id = q + "_ZVING_Indexes";
		u.name = q + "_ZVING_Indexes";
		u.value = t.join();
		r.appendChild(u);
		if (w) {
			u = h.getDom(q + "_ZVING_Rows");
			if (!u) {
				u = document.createElement("input")
			}
			u.type = "hidden";
			u.id = q + "_ZVING_Rows";
			u.name = q + "_ZVING_Rows";
			u.value = w.join();
			r.appendChild(u)
		}
		r.submit()
	};
	i.showLoading = function (m) {
		m = h.getDom(m);
		var l = h.getDom("_LoadingBGDiv");
		var n = h.getDom("_LoadingIconDiv");
		if (!l) {
			l = document.createElement("div");
			l.id = "_LoadingBGDiv";
			e.hide(l);
			l.style.cssText = "background-color:#333;position:absolute;z-index:800;opacity:0.01;filter:alpha(opacity=1);";
			document.body.appendChild(l);
			n = document.createElement("div");
			n.id = "_LoadingIconDiv";
			e.hide(n);
			n.innerHTML = "　<img src='" + j + "Framework/Images/loadingGreen15px.gif'><font color=green> " + c.get("DataGrid.Loading") + "　</font>";
			n.style.cssText = "padding-top:5px;background-color:#ffc;position:absolute;z-index:801;height:20px;width:120px";
			document.body.appendChild(n)
		}
		var p = $(m).parent().offset();
		var o = {
			width : $(m).parent().width(),
			height : $(m).parent().height()
		};
		l.style.top = p.top + "px";
		l.style.left = p.left + "px";
		l.style.width = o.width + "px";
		l.style.height = o.height + "px";
		if (isGecko) {
			n.style.top = (p.top) + "px";
			n.style.left = (p.left) + "px"
		} else {
			n.style.top = (p.top + 2) + "px";
			n.style.left = (p.left + 2) + "px"
		}
		e.show(l);
		e.show(n)
	};
	i.closeLoading = function () {
		$("#_LoadingBGDiv").hide();
		$("#_LoadingIconDiv").hide()
	};
	i.loadData = function (m, n, u) {
		m = g(m);
		if (m.isDataGridLoading) {
			return
		}
		m.isDataGridLoading = true;
		try {
			m = h.getDom(m);
			var l = m.id;
			if (!i.getParam(m, a.TagBody)) {
				m.isDataGridLoading = false;
				return
			}
			if (!u) {
				u = new DataCollection()
			}
			var p;
			for (p = 0; p < i.DataCache[l].Params.size(); p++) {
				var t = i.DataCache[l].Params.getKey(p);
				u.add(t, i.DataCache[l].Params.get(t))
			}
			var q = m.getSelectedValue();
			if (q) {
				window.currentSelected = q;
				var o = i.DataCache[m.id].Params.get(a.PageIndex);
				o = String(o);
				var s = m.getState(o);
				s = s || {};
				s.selectedValue = q;
				m.setState(o, s)
			}
			i.showLoading(m)
		} catch (r) {
			m.isDataGridLoading = false;
			alert(r.message)
		}
		d.sendRequest(i.BackendMethod, u, function (z) {
			var D = h.Node.getParentByAttr(m, "ztype", "_DataGrid");
			if (D) {
				m = D
			}
			if (!m.parentNode) {
				return
			}
			if (z.get("_ZVING_STATUS") == 0 && z.get("_ZVING_MESSAGE")) {
				Dialog.alert(z.get("_ZVING_MESSAGE"));
				return
			}
			if (!z.get("BodyHTML") || z.get("BodyHTML").length < 10) {
				h.Console.error("用于渲染数据表格的数据错误：" + z);
				return
			}
			var G = null;
			if (h.isIE) {
				var C = i.getRowsContainer(m);
				if ($(C).data("sortable")) {
					$(C).sortable("destroy")
				}
			}
			var F = m.tagName.toLowerCase() === "table" ? m : h.getDom(l);
			var E = F.afterEdit;
			var w = F.cancelEdit;
			var x = F.beforeEdit;
			var B = F.onContextMenu;
			try {
				if (i.getParam(l, "_ZVING_SCROLL") === "true") {
					m.outerHTML = z.get("BodyHTML");
					G = h.getDom(l)
				} else {
					G = document.createElement("div");
					G.setAttribute("ztype", "_DataGrid");
					G.innerHTML = z.get("BodyHTML");
					m.parentNode.replaceChild(G, m)
				}
				m = null;
				F = h.getDom(l);
				F.afterEdit = E;
				F.cancelEdit = w;
				F.beforeEdit = x;
				F.onContextMenu = B;
				h.ComponentManager.initChildren(F);
				var y = F.getElementsByTagName("script");
				var A;
				for (A = 0; A < y.length; A++) {
					h.Util.globalEval(y[A].text)
				}
				window["DataGrid_" + l + "_Init"]();
				if (window.currentSelected) {
					i.select(F, window.currentSelected)
				}
				if (n) {
					n(z)
				}
				setTimeout(i.closeLoading, 200);
				if (F.getAttribute("autofill") == "true") {
					i.layout(l)
				}
				if (F.getAttribute("autopagesize") != "true") {
					i.resumeScrollPanel(F)
				}
				i.getBackState(F);
				i.resumePagebar(F);
				i.sortableInit(F);
				F = null;
				G = null;
				m = null;
				n = null
			}
			finally {
				if (m) {
					m.isDataGridLoading = false
				}
			}
		})
	};
	i.getBackState = function (o) {
		o = h.getDom(o);
		var l = i.DataCache[o.id].Params.get(a.PageIndex);
		l = String(l);
		var n = o.getState(l);
		if (n) {
			var m = n.selectedValue;
			if (m) {}

		}
	};
	i.filter = function (n, o) {
		n = h.getDom(n);
		var p = n.DataSource;
		var m;
		for (m = 0; m < p.Rows.length; m++) {
			try {
				if (o(p.Rows[m])) {
					h.Node.show(n.rows[m + 1])
				} else {
					h.Node.hide(n.rows[m + 1])
				}
			} catch (l) {
				alert(l.message)
			}
		}
	};
	i.clear = function (m) {
		m = h.getDom(m);
		var l;
		for (l = m.rows.length - 2; l > 0; l--) {
			m._deleteRow(l)
		}
		if (!m.isPageFlag()) {
			if (m.rows.length > 1) {
				m._deleteRow(1)
			}
		} else {
			if (m.getAttribute("scroll") === "true") {
				if (m.rows.length > 1) {
					m._deleteRow(1)
				}
			}
			if (h.getDom(m.id + "_PageBar")) {
				h.getDom(m.id + "_PageBar").innerHTML = "<div style='float:right;font-family:Tahoma'>" + c.get("DataGrid.FirstPage") + "&nbsp;|&nbsp;" + c.get("DataGrid.PrevPage") + "&nbsp;|&nbsp;" + c.get("DataGrid.NextPage") + "&nbsp;|&nbsp;" + c.get("DataGrid.LastPage") + "&nbsp;&nbsp;" + c.get("DataGrid.GotoThe") + "&nbsp;<input id='_PageBar_Index' type='text' class='inputText' style='width:40px'>&nbsp;页&nbsp;&nbsp;<input type='button' class='inputButton' value='" + c.get("DataGrid.Goto") + "'></div><div style='float:left;font-family:Tahoma'>" + c.get("DataGrid.Total0") + c.get("DataGrid.10Records") + c.get("DataGrid.Current0") + "</div>"
			}
		}
		i.autoFillBlank(m);
		m.DataSource.Rows = [];
		m.DataSource.Values = []
	};
	i.autoFillBlank = function (q) {
		q = h.getDom(q);
		if (q.getAttribute("autofill") !== "false") {
			var p = 15;
			if (q.getAttribute("page") === "true") {
				p = Number(q.getParam(a.Size))
			}
			p = p - q.DataSource.Rows.length;
			var o,
			n;
			for (o = q.rows.length - 1; o > 0; o--) {
				if (q.rows[o].getAttribute("ztype") === "blank") {
					if (p <= 0) {
						h.Node.hide(q.rows[o])
					} else {
						h.Node.show(q.rows[o]);
						q.rows[o].style.height = q.RowHeight * (p) + "px"
					}
					return
				}
			}
			if (p <= 0) {
				return
			}
			var m = q.rows[0].cells.length;
			var r = q._insertRow(q.rows.length - 1);
			for (n = 0; n < m; n++) {
				var l = r.insertCell(-1);
				l.innerHTML = "&nbsp;"
			}
			r.style.height = q.RowHeight * (p) + "px";
			r.setAttribute("ztype", "blank")
		}
	};
	i.firstPage = function (l) {
		l = h.getDom(l);
		i.setParam(l, a.PageIndex, 0);
		i.loadData(l)
	};
	i.lastPage = function (n) {
		n = h.getDom(n);
		var o = i.getParam(n, a.PageTotal);
		var m = i.getParam(n, a.Size);
		var l = Math.ceil(Number(o) / Number(m));
		i.setParam(n, a.PageIndex, l - 1);
		i.loadData(n)
	};
	i.previousPage = function (m) {
		m = h.getDom(m);
		var l = i.getParam(m, a.PageIndex);
		i.setParam(m, a.PageIndex, Number(l) - 1);
		i.loadData(m)
	};
	i.nextPage = function (m) {
		m = h.getDom(m);
		var l = i.getParam(m, a.PageIndex);
		i.setParam(m, a.PageIndex, Number(l) + 1);
		i.loadData(m)
	};
	i.gotoPage = function (m, l) {
		m = h.getDom(m);
		i.setParam(m, a.PageIndex, l);
		i.loadData(m)
	};
	i._onContextMenu = function (m, l) {
		if (!m.Selected) {
			i.onRowClick(m, l)
		}
		l = getEvent(l);
		var n = m.parentNode.parentNode;
		Menu.close();
		if (n.onContextMenu) {
			n.onContextMenu(m, l)
		} else {
			l = getEvent(l);
			var q = n.id;
			var p = new Menu();
			p.Width = 150;
			p.setEvent(l);
			var o = l.srcElement.innerText;
			p.addItem(c.get("DataGrid.CopyToClipboard"), function () {
				b.copyToClipboard(o)
			}, "Icons/icon003a2.png");
			p.addItem(c.get("DataGrid.SelectedRowToExcel"), function () {
				i.selectedRowToExcel(q)
			}, "Icons/icon003a2.png");
			p.addItem(c.get("DataGrid.ToExcel"), function () {
				i.toExcel(q)
			}, "Icons/icon003a4.png");
			p.addItem(c.get("DataGrid.AllToExcel"), function () {
				i.toExcel(q, true)
			}, "Icons/icon003a3.png");
			p.show()
		}
		stopEvent(l)
	};
	i.treeClick = function (o) {
		var n = o.parentNode;
		var w,
		x,
		u;
		while (n) {
			var q = n.tagName.toLowerCase();
			if (q === "tr") {
				w = n
			}
			if (q === "table") {
				x = n;
				break
			}
			n = n.parentNode
		}
		var s = false;
		if (o.src.indexOf("butExpand") > 0) {
			o.src = j + "Framework/Images/butCollapse.gif";
			s = true
		} else {
			o.src = j + "Framework/Images/butExpand.gif"
		}
		var y = x.rows;
		var m = parseInt(w.getAttribute("level"), 10);
		for (u = 0; u < y.length; u++) {
			if (y[u] === w) {
				var t;
				for (t = u + 1; t < y.length; t++) {
					var l = y[t];
					if (parseInt(l.getAttribute("level"), 10) > m) {
						if (s) {
							if (e.isVisible(l)) {
								l.setAttribute("_TreeHideLevel", m);
								e.hide(l)
							}
						} else {
							if (parseInt(l.getAttribute("_TreeHideLevel"), 10) === m) {
								e.show(l);
								l.setAttribute("_TreeHideLevel", null)
							}
						}
					} else {
						break
					}
				}
				break
			}
		}
	};
	i.getSelectors = function (l) {
		l = h.getDom(l);
		return h.getByName(l.id + "_RowCheck")
	};
	i.deleteRow = function (p, n) {
		p = h.getDom(p);
		var r;
		if (n < 1) {
			n = 1
		}
		if (!p.isScrollFlag()) {
			if (p.isPageFlag()) {
				if (p.rows.length <= 3 || n >= p.rows.length - 2) {
					return
				}
			}
			if (!p.isPageFlag()) {
				if (p.rows.length <= 2 || n >= p.rows.length - 1) {
					return
				}
			}
		}
		if (n === 1) {
			var m = null;
			var q = p.rows[0];
			var o;
			for (o = 0; o < q.cells.length; o++) {
				var l = q.cells[o].getAttribute("ztype");
				if (l && l.toLowerCase() === "rowno") {
					m = o;
					break
				}
			}
			if (m !== null) {
				r = p.rows[1].cells[m].innerText
			}
		}
		p._deleteRow(n);
		p.DataSource.deleteRow(n - 1);
		i.resetRowEx(p, r)
	};
	i.insertRow = function (p, m, s, r) {
		if (i.EditingRow !== null) {
			if (!i.changeStatus(i.EditingRow)) {
				return
			}
		}
		if (p.isDataGridLoading) {
			return
		}
		p.isDataGridLoading = true;
		try {
			p = h.getDom(p);
			if ((m !== 0 && !m) || m > p.DataSource.Rows.length) {
				m = p.DataSource.Rows.length
			}
			var q = new DataTable();
			var o;
			q.Columns = p.DataSource.Columns;
			if (p.DataSource.Rows.length === 0) {
				q.Rows = [];
				q.Values = [];
				q.insertRow(0, new Array(q.Columns.length));
				for (o = 0; o < q.getColCount(); o++) {
					q.Rows[0].set2(o, "")
				}
			} else {
				q.Rows = [p.DataSource.Rows[0]];
				q.Values = [p.DataSource.Values[0]];
				for (o = 0; o < q.getColCount(); o++) {
					q.Rows[0].set2(o, "")
				}
			}
			var l = new DataCollection();
			for (o = 0; o < i.DataCache[p.id].Params.size(); o++) {
				var n = i.DataCache[p.id].Params.getKey(o);
				l.add(n, i.DataCache[p.id].Params.get(n))
			}
			l.add(a.DataTable, q);
			l.add(a.InsertRow, 1);
			i.showLoading(p);
			d.sendRequest(i.BackendMethod, l, function (u) {
				var y = p._insertRow(m + 1);
				var t = u.get("TRAttr");
				var x;
				i.setAttr(y, t);
				for (x = 0; x < p.rows[0].cells.length; x++) {
					var z = y.insertCell(-1);
					var w = u.get("TDAttr" + x);
					i.setAttr(z, w);
					z.innerHTML = u.get("TDHtml" + x)
				}
				p.DataSource.insertRow(m, new Array(p.DataSource.getColCount()));
				for (x = 0; x < p.DataSource.getColCount(); x++) {
					p.DataSource.Rows[m].set2(x, "")
				}
				i.resetRowEx(p);
				if (s) {
					i.changeStatus(h.getDom(id).rows[m + 1])
				} else {
					ComponentManager.initChildren(y)
				}
				if (r) {
					r(u)
				}
				i.autoFillBlank(p);
				setTimeout(i.closeLoading, 200)
			})
		}
		finally {
			p.isDataGridLoading = false
		}
	};
	i.resetRowEx = function (q, s) {
		q = h.getDom(q);
		var n = null;
		var r = q.rows[0];
		if (!r) {
			return
		}
		var p;
		for (p = 0; p < r.cells.length; p++) {
			var m = r.cells[p].getAttribute("ztype");
			if (m && m.toLowerCase() === "rowno") {
				n = p;
				break
			}
		}
		if (n !== null) {
			if (!s) {
				s = q.rows[1].cells[n].innerText;
				if (!s) {
					s = q.rows[2].cells[n].innerText
				}
			}
			s = Number(s);
			var l = q.DataSource.Rows.length;
			for (p = 1; p <= l; p++) {
				q.rows[p].cells[n].innerText = "" + (s++)
			}
		}
		var o = q.getSelectors();
		if (o) {
			for (p = 0; p < o.length; p++) {
				o[p].id = q.id + "_RowCheck" + (p + 1)
			}
		}
	};
	i.setAttr = function (n, l) {
		var o;
		for (o in l) {
			if (l.hasOwnProperty(o) && o !== "prototype") {
				o = o.toLowerCase();
				var m = l[o];
				if (o === "style") {
					n.style.cssText = m;
					continue
				}
				if (o.startsWith("on")) {
					window["eval"]("el." + o + " = function(event){window['eval'](\"" + m + '")}');
					continue
				}
				n[o] = m
			}
		}
	};
	i.changeStatus = function (q, w) {
		q = h.getDom(q);
		var R = q.parentNode.parentNode;
		var G = R.DataSource;
		var F = q.rowIndex - 1;
		if (i.EditingRow && q !== i.EditingRow) {
			i.changeStatus(i.EditingRow)
		}
		var J,
		Q,
		I,
		M;
		try {
			for (M = 0; M < R.rows.length; M++) {
				var A = R.rows[M];
				if (A.getAttribute("ztype") === "edit") {
					J = A
				}
				if (A.getAttribute("ztype") === "template") {
					Q = A
				}
				if (A.getAttribute("ztype") === "head") {
					I = A
				}
			}
			if (!I) {
				I = table.rows[0]
			}
		} catch (P) {
			alert(P.message)
		}
		var H = new DataRow(G, F);
		if (!R.OldValues) {
			R.OldValues = []
		}
		if (!q.EditStatus) {
			q.EditStatus = true;
			i.EditingRow = q
		} else {
			q.EditStatus = false;
			if (!R.OldValues[F]) {
				var r = G.Values[F].clone();
				R.OldValues[F] = r
			}
			if (w !== "Cancel" && R.afterEdit) {
				if (!R.afterEdit(q, H)) {
					return false
				}
			}
			i.EditingRow = null
		}
		var s = R.OldValues[F];
		var E;
		for (M = 0; M < I.cells.length; M++) {
			var o = I.cells[M];
			E = o.getAttribute("ztype");
			var p = o.getAttribute("field");
			var z = false;
			if (E && E.toLowerCase() === "selector") {
				h.getDom(R.id + "_RowCheck" + q.rowIndex).disabled = q.EditStatus ? true : false
			} else {
				if (E && E.toLowerCase() === "rowno") {
					q.cells[M].innerHTML = q.cells[M].getAttribute("rowno")
				} else {
					if (E && E.toLowerCase() === "checkbox") {
						var O = q.cells[M].getAttribute("checkedvalue");
						if (O === null) {
							O = "Y"
						}
						if (s) {
							z = s[G.ColMap[p.toLowerCase()]] !== H.get(p)
						}
						var B = O === H.get(p) ? "checked" : "";
						h.getDom(R.id + "_" + p + "_Checkbox" + q.rowIndex).disabled = q.EditStatus ? false : true
					} else {
						if (E && E.toLowerCase() === "dropdownlist") {
							if (s) {
								z = s[G.ColMap[p.toLowerCase()]] !== H.get(p)
							}
							h.getDom(R.id + "_" + p + "_DropDownList" + q.rowIndex).disabled = q.EditStatus ? false : true
						} else {
							var m = [];
							if (E && E.toLowerCase() === "tree") {
								var l = parseInt(q.getAttribute("level"), 10);
								var t = 0;
								var n = true;
								if (q.rowIndex !== R.rows.length - 1) {
									t = parseInt(R.rows[q.rowIndex + 1].getAttribute("level"), 10);
									n = R.rows[q.rowIndex + 1].style.display !== "none"
								}
								var K;
								for (K = 0; K < l; K++) {
									m.push("<q style='padding:0 10px'></q>")
								}
								if (l < t) {
									if (n) {
										m.push("<img src='" + j + "Framework/Images/butExpand.gif' onclick='Zving.DataGrid.treeClick(this)'/>&nbsp;")
									} else {
										m.push("<img src='" + j + "Framework/Images/butCollapse.gif' onclick='Zving.DataGrid.treeClick(this)'/>&nbsp;")
									}
								} else {
									m.push("<img src='" + j + "Framework/Images/butNoChild.gif'/>&nbsp;")
								}
							}
							var D = unescape(q.EditStatus ? R.EditArray[M] : R.TemplateArray[M]);
							var y = /\$\{(\w+?)\}/gi;
							var C = 0;
							m.push(D.replace(y, function (U, T) {
									if (s) {
										if (s[G.ColMap[T.toLowerCase()]] !== H.get(T)) {
											z = true
										}
									}
									var V = H.get(T);
									if ((V === "" || V === null) && !q.EditStatus) {
										V = "&nbsp;"
									}
									return V
								}));
							q.cells[M].innerHTML = m.join("")
						}
					}
				}
			}
			if (z) {
				q.cells[M].style.backgroundColor = "#FEB34E"
			} else {
				q.cells[M].style.backgroundColor = ""
			}
			if (!q.ModifyFlag && z) {
				q.ModifyFlag = true
			}
		}
		var S = q.getElementsByTagName("DIV");
		var N = S.length;
		var L;
		for (M = N; M > 0; M--) {
			var x = S[M - 1];
			E = x.getAttribute("ztype");
			if (E && E.toLowerCase() === "select") {
				Selector.initCtrl(x)
			}
		}
		if (h.isIE) {
			q.onselectstart = q.EditStatus ? null : stopEvent
		} else {
			for (L = 0; L < q.cells.length; L++) {
				q.cells[L].style.MozUserSelect = q.EditStatus ? "" : "none"
			}
		}
		if (q.EditStatus) {
			$(document).on("mousedown", f);
			q.oldClickEvent = q.onclick;
			q.onclick = function (T) {
				T = getEvent(T);
				cancelEvent(T)
			}
		} else {
			$(document).off("mousedown", f);
			q.onclick = q.oldClickEvent
		}
		var u = q.getElementsByTagName("INPUT");
		for (M = 0; M < u.length; M++) {
			if (u[M].type === "text" && (u[M].value === unescape("%A0") || u[M].value === " ")) {
				u[M].value = ""
			}
			u[M].ondblclick = stopEvent
		}
		ComponentManager.initChildren(q);
		if (!q.EditStatus && R.cancelEdit) {
			R.cancelEdit(q, H)
		}
		if (q.EditStatus && R.beforeEdit) {
			R.beforeEdit(q, H)
		}
		return true
	};
	i.edit = function (n, m) {
		m = h.getDom(m);
		if (!m) {
			alert(c.get("DataGrid.MustDataGrid"))
		}
		var l = i.getSelectedRows(m);
		if (l.length < 1) {
			h.Dialog.alert(c.get("DataGrid.MustSelected"));
			return
		}
		var o = l[0];
		o.ondblclick.apply(o, []);
		stopEvent(n)
	};
	i.editRow = function (q, m) {
		if (m) {
			var p = e.getParent(q, "table");
			var n = p.DataSource;
			var l = q.rowIndex - 1;
			var o = new DataRow(n, l);
			m(o)
		} else {
			i.changeStatus(q)
		}
	};
	i.cancel = function (l) {
		var m = e.getParent("tr", l);
		i.changeStatus(m, "Cancel")
	};
	i.save = function (m, l, p) {
		if (i.EditingRow !== null) {
			if (!i.changeStatus(i.EditingRow)) {
				return
			}
		}
		var r = h.getDom(m);
		var o = r.DataSource;
		var s = [],
		q;
		for (q = 1; q < r.rows.length; q++) {
			if (r.rows[q].ModifyFlag) {
				s.push(o.Values[q - 1])
			}
		}
		if (s.length === 0) {
			h.Dialog.alert(c.get("DataGrid.NoChange"));
			return
		}
		var n = new DataTable();
		n.Columns = o.Columns;
		n.Values = s;
		var t = new DataCollection();
		t.add("DT", n, "DataTable");
		d.sendRequest(l, t, function (u) {
			if (u && u.Status === 0) {
				h.Dialog.alert(u.Message, p)
			} else {
				h.Dialog.alert(c.get("DataGrid.UpdateSuccess"), function () {
					var x;
					for (x = 1; x < r.rows.length; x++) {
						if (r.rows[x].ModifyFlag) {
							r.rows[x].ModifyFlag = false;
							var w;
							for (w = 0; w < r.rows[x].cells.length; w++) {
								r.rows[x].cells[w].style.backgroundColor = ""
							}
						}
					}
					r.OldValues = [];
					if (p) {
						p()
					}
				})
			}
		})
	};
	i.discard = function (l, m) {
		i.loadData(l, m)
	};
	i.getRowDragProxy = function (q) {
		var o = e.getParent(q, "table");
		var l = [];
		var m;
		var p = e.getSize(o);
		var n = o.outerHTML.split(">")[0];
		n = n.replace(/width\=[\'\"].*?[\"\']/gi, "width='" + p.width + "'");
		n = n.replace(/align\=[\'\"].*?[\"\']/gi, "");
		l.push(n);
		l.push(q.outerHTML.split(">")[0] + " style='background-color:" + i.SelectedBgColor + "' >");
		for (m = 0; m < q.cells.length; m++) {
			l.push(q.cells[m].outerHTML.split(">")[0]);
			l.push(" width='" + o.rows[0].cells[m].width + "' style='background-color:" + i.SelectedBgColor + "'");
			l.push(">");
			l.push(q.cells[m].innerHTML);
			l.push("</td>")
		}
		l.push("</tr></table>");
		return l.join("")
	};
	i.moveRow = function (p, m) {
		var l = p.parentNode,
		n = l.parentNode;
		if (h.isIE) {
			n.moveRow(p.rowIndex, m)
		} else {
			var o = m + 1 >= n.rows.length;
			if (o) {
				l.appendChild(p)
			} else {
				l.insertBefore(p, n.rows[m + 1])
			}
		}
	};
	i.dragStart = function (l) {
		var p = this.tagName == "TD" ? this.parentNode : this;
		var n = e.getParent(p, "table");
		var o = n.rows;
		i.onRowClick(p, l);
		var m = p.innerHTML.replace(/<td[^>]+>/igm, "<td>").replace(/ id=[^ >]/igm, "");
		$("#_DragProxy").css("width", "auto").css("height", "auto");
		$("#_DragProxy").html('<table bgcolor="#ffffff" border="1" bordercolor="#eeeeee" cellPadding="3"><tr>' + m + "</tr></table>")
	};
	i.dragEnd = function (x) {
		var C = h.getDom(this);
		var w = DragManager.DragSource.tagName.toLowerCase();
		if (w !== "tr" && w !== "td") {
			return
		}
		var m = h.getDom(w == "td" ? DragManager.DragSource.parentNode : DragManager.DragSource);
		if (h.Node.getParent(C, "table") !== h.Node.getParent(m, "table")) {
			return
		}
		var z = e.getParent(C, "table");
		var r = m.rowIndex;
		var l = C.rowIndex;
		if (l > z.DataSource.Rows.length) {
			l = z.DataSource.Rows.length
		}
		i.moveRow(m, l);
		var q;
		var o = z.DataSource;
		var y = o.Values;
		var n = y[r - 1];
		y.splice(r - 1, 1);
		y.insert(l - 1, n);
		for (q = 0; q < y.length; q++) {
			o.Rows[q] = new DataRow(o, q)
		}
		var t = z.rows;
		for (q = 1; q < t.length; q++) {
			h.toArray(t[q].getElementsByTagName("INPUT")).each(function (D) {
				if (D.id && D.id.toString().indexOf("_RowCheck") > 0) {
					D.id = z.id + "_RowCheck" + q
				}
			})
		}
		C = z.rows[l];
		i.onRowClick(C, x);
		C.DefaultBgColor = "#fff";
		var s = z.getAttribute("afterDrag");
		if (l !== r && s) {
			var p = window[s];
			var u = "After";
			var B;
			if (l === 1) {
				u = "Before";
				B = o.Rows[1]
			} else {
				B = o.Rows[l - 2]
			}
			var A = o.Rows[l - 1];
			p.apply(C, [u, B, A, l, r])
		}
	};
	i.dragOver = function (l, n) {
		if (isGecko) {}

		var p = h.getDom(n || this);
		var o = DragManager.DragSource.tagName.toLowerCase();
		if (o !== "tr" && o !== "td") {
			return
		}
		var m;
		h.Node.addClass(p, "dragover")
	};
	i.dragOut = function (l) {
		if (isGecko) {}

		var o = h.getDom(this);
		var n = DragManager.DragSource.tagName.toLowerCase();
		if (n !== "tr" && n !== "td") {
			return
		}
		var m;
		h.Node.removeClass(o, "dragover")
	};
	i.setFixedHeight = function (n, m) {
		if (isNull(m)) {
			return
		}
		if (!/\D/.test("" + m)) {
			m = m + "px"
		}
		n = h.getDom(n);
		if (n.getAttribute("scroll") !== "true") {
			return
		}
		h.getDom(n.id + "_Wrap_body").style.height = m;
		var l = n.getParam(a.TagBody).replace(/fixedheight\s*=\s*(\&.*?;).*?\1/gi, "fixedheight=$1" + m + "$1");
		n.setParam(a.TagBody, l);
		n.setAttribute("fixedHeight", m)
	};
	i.setFixedWidth = function (n, m) {
		if (isNull(m)) {
			return
		}
		if (!/\D/.test("" + m)) {
			m = m + "px"
		}
		n = h.getDom(n);
		if (n.getAttribute("scroll") !== "true") {
			return
		}
		h.getDom(n.id + "_Wrap").style.width = m;
		var l = n.getParam(a.TagBody).replace(/fixedwidth\s*=\s*(\&.*?;).*?\1/gi, "fixedwidth=$1" + m + "$1");
		n.setParam(a.TagBody, l);
		n.setAttribute("fixedWidth", m);
		i.resetWidth(n)
	};
	i.resetWidth = function (o) {
		o = h.getDom(o);
		if (o.Wrapper.scrollWidth > o.Wrapper.body.table.offsetWidth) {
			var p = o.Wrapper.body.table.rows[0].cells;
			headTHs = o.Wrapper.head.table.rows[0].cells;
			var l = o.Wrapper.body.table.width;
			var n,
			m;
			if (!l) {
				l = 0;
				for (m = 0, len = p.length; m < len; m++) {
					l += p[m].width
				}
			}
			for (n = 0, len = p.length; n < len; n++) {
				p[n].width = Math.round(p[n].width * (this.element.scrollWidth - 13 * len - 23) / (l));
				headTHs[n].width = p[n].width;
				if (h.isIE && n === len - 1) {
					headTHs[n].style.paddingRight = "22px"
				}
			}
		}
	};
	i.destroy = function (l) {
		l = h.getDom(l);
		l.DataSource = null;
		l.EditArray = null;
		l.TemplateArray = null;
		l.TagBody = null;
		l.insertRow = l._insertRow;
		l.deleteRow = l._deleteRow;
		l._insertRow = l._deleteRow = l.clear = l.loadData = l.edit = l.filter = l.getParam = l.setParam = l.toExcel = l.allToExcel = l.save = l.select = l.sort = l.showLoading = l.selectAll = l.unselectAll = l.getSelectedData = l.getSelectedRows = l.getSelectedTreeValue = l.getSelectedValue = l.getSelectors = l.getColumnInfo = l.selectedRowToExcel = l.setFixedHeight = l.setFixedWidth = l.getPageSize = l.getPageIndex = l.setPageSize = l.setPageIndex = l.isPageFlag = null;
		delete i.DataCache[h.id(l)]
	};
	i.sortable = function (n, l, m) {
		var p = i.getRowsContainer(n);
		var o = {};
		if (l) {
			o.handle = l
		}
		if (m) {
			o.start = function (q, r) {
				r.item.data("originalIndex", i.getRowIndex(n, r.item))
			};
			o.stop = function () {
				m.apply(this, Array.prototype.slice.call(arguments).concat(n))
			}
		}
		o.helper = function (q, s) {
			var r = s[0].outerHTML;
			r = r.replace(/^(<\w+)([^>]*)>/igm, '$1 style="background-color:#ffe; border: 1px solid #ddd">').replace(/ id=[^ >]/igm, "");
			r = $(r);
			s.children().each(function (t) {
				r.children().eq(t).width($(this).width())
			});
			return r
		};
		o.axis = "y";
		$(p).sortable(o)
	};
	i.getRowsContainer = function (l) {
		l = h.getDom(l);
		if (l.getElementsByTagName("tbody").length == 1) {
			return l.getElementsByTagName("tbody")[0]
		}
		return l
	};
	i.getRowIndex = function (l, m) {
		if (arguments.length == 1) {
			m = l
		}
		return $(m).prop("rowIndex") - 1
	};
	h.DataGrid = i
})();
(function () {
	var c = window.Zving,
	b = c.g,
	a = c.Page,
	d;
	d = function (j, i) {
		this.pos = i || "bottom";
		this.el = b(j);
		if (this.el.tagName === "TD") {
			var f = document.createElement("div");
			var e = this.el.children;
			e = toArray(e);
			e.each(function (k) {
				f.appendChild(k)
			});
			this.el.appendChild(f);
			this.el = b(f)
		}
		this.init();
		var h = this;
		$(window).on("scroll", h.setPosition);
		$(window).on("unload", function () {
			$(window).off("scroll", h.setPosition)
		})
	};
	d.prototype = {
		init : function () {
			this.el.style.position = "static";
			var e = c.Node.getPosition(this.el);
			this.fixX = Math.round(e.x);
			this.fixY = Math.round(e.y);
			this.fixWidth = this.el.offsetWidth;
			this._width = this.el.style.width;
			this.fixHeight = this.el.offsetHeight;
			this.el.style.left = this.fixX + "px";
			this.viewportH = Dom.getViewport().height
		},
		setPosition : function () {
			if (this.fixY === 0 || this.fixWidth === 0) {
				this.init()
			}
			var e = Math.max(document.body.scrollTop, document.documentElement.scrollTop);
			if ((this.pos === "bottom" && e + this.viewportH < this.fixY) || (this.pos === "top" && e > this.fixY)) {
				if (isIE6) {
					this.el.style.position = "absolute";
					this.el.style.top = this.pos === "bottom" ? e + this.viewportH - this.fixHeight + "px" : e + "px"
				} else {
					this.el.style.position = "fixed";
					this.el.style[this.pos] = "0"
				}
				this.el.style.width = this.fixWidth + "px"
			} else {
				this.el.style.position = "static";
				this.el.style.width = this._width
			}
		}
	};
	c.Afloat = d
})();
(function () {
	var d = window.Zving,
	b = d.isIE,
	a = d.Page;
	var c = function () {
		this.X = null;
		this.Y = null;
		this.Param = null;
		this.Items = [];
		this.Event = null
	};
	c.prototype.setEvent = function (e) {
		var f = d.Event.getEventPosition(e);
		this.X = f.x;
		this.Y = f.y;
		this.Event = e
	};
	c.prototype.setPosition = function (e, f) {
		this.X = e;
		this.Y = f
	};
	c.prototype.setParam = function (e) {
		this.Param = e
	};
	c.prototype.addItem = function (i, h, f, e) {
		this.Items.push([i, h, f, e])
	};
	c.prototype.onClick = function (e) {
		if (!this.Items[e][3]) {
			var f = this.Items[e][1];
			c.close();
			f.apply(this, [this.Param])
		}
	};
	c.prototype.getHtmlString = function () {
		var f = [];
		f.push("<html><head><style>");
		f.push("body {margin: 0px;background: #FFFFFF;color: #444444}");
		f.push("td {font-size: 12px;}");
		f.push(".imgdisabled img{opacity: 0.5; filter: gray Alpha(Opacity=50);}");
		f.push("</style></head><body>");
		f.push("<table border='0' id='_ContextMenu_Table' cellspacing='1' cellpadding='0' oncontextmenu='TopWindow.Zving.stopEvent(event);' onselectstart='TopWindow.Zving.stopEvent(event);' style='-moz-user-select:none;border:1px solid #8F8F73;background:#FFFFFF;'><tr><td>");
		for (var e = 0; e < this.Items.length; e++) {
			if (this.Items[e][0] === "-") {
				f.push("<table width='100%' border='0' cellspacing='0' cellpadding='0' height='1' style='padding-top:0px;padding-bottom:0px;height:1px; font-size:0px;background:#B9B99D;'><tr><td style='background:#D6DFF7; width:24px;' width='24'></td><td style='background:#B9B99D; width:66px;'></td></tr></table>");
				continue
			}
			if (true === this.Items[e][3]) {
				f.push("<table width='100%' border='0' cellspacing='0' cellpadding='0' class='imgdisabled' style='font-size:12px'><tr>");
				if (this.Items[e][2]) {
					f.push("<td height='22' width='24' align='center' valign='middle' style='background:#DDF;'><img src='" + Server.ContextPath + this.Items[e][2] + "' width='20' height='20' hspace='2' vspace='1'/></td>")
				} else {
					f.push("<td height='22' width='24' align='center' valign='middle' style='background:#DDF;'><img src='" + Server.ContextPath + "Framework/Images/blank.gif' width='20' height='20' hspace='2' vspace='1'/></td>")
				}
				f.push("<td style='background:#F7F8FD; color:#999999; padding-left:10px;' nowrap='true'>" + this.Items[e][0] + "</td>");
				f.push("<td style='background:#F7F8FD; width:15px; text-align:center' width='15'>&nbsp;</td>")
			} else {
				f.push("<table width='100%' border='0' cellspacing='0' cellpadding='0' style='cursor:pointer;font-size:12px' onclick='TopWindow.Zving.Menu.getInstance().onClick(" + e + ")' onmouseout='TopWindow.Zving.Menu.onMouseOut(this)' onmouseover='TopWindow.Zving.Menu.onMouseOver(this)'><tr>");
				if (this.Items[e][2]) {
					f.push("<td height='22' width='24' align='center' valign='middle' style='background:#DDF;'><img src='" + Server.ContextPath + this.Items[e][2] + "' width='20' height='20' hspace='2' vspace='1'/></td>")
				} else {
					f.push("<td height='22' width='24' align='center' valign='middle' style='background:#DDF;'><img src='" + Server.ContextPath + "Framework/Images/blank.gif' width='20' height='20' hspace='2' vspace='1'/></td>")
				}
				f.push("<td style='background:#F7F8FD; padding-left:10px;cursor:pointer;' nowrap='true'>" + this.Items[e][0] + "</td>");
				f.push("<td style='background:#F7F8FD; width:15px; text-align:center' width='15'>&nbsp;</td>")
			}
			f.push("</tr></table>")
		}
		f.push("</td></tr></table>");
		f.push("<script>g = function(ele){return typeof ele == 'string' ? document.getElementById(ele) : ele;};window.init=function(){TopWindow.Zving.Menu.adjustSize();};<\/script></body></html>");
		return f.join("\n")
	};
	c.prototype.setPosition = function () {
		var m = Zving.rootWin;
		var e = m.Zving.getDom("_DivContextMenu");
		Node.show(e);
		var k = m.Zving.getDom("_ContextMenu_Frame").contentWindow;
		var o = k.g("_ContextMenu_Table").offsetHeight;
		var j = k.g("_ContextMenu_Table").offsetWidth;
		var h = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
		var n = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
		var i = 0;
		var f = 0;
		var l = d.Dom.computePosition(this.X, this.Y, this.X, this.Y, null, j, o, m);
		i = l.x + h;
		f = l.y + n;
		m.Zving.getDom("_DivContextMenu").style.width = j + "px";
		m.Zving.getDom("_DivContextMenu").style.height = o + "px";
		i = i < 0 ? 0 : i;
		e.style.left = i + "px";
		e.style.top = f + "px"
	};
	c.prototype.show = function () {
		if (this.Items.length === 0) {
			return
		}
		var f = Zving.rootWin;
		var i;
		var e,
		h;
		if (!f.Zving.getDom("_DivContextMenu")) {
			i = f.document.createElement("div");
			i.id = "_DivContextMenu";
			i.style.position = "absolute";
			i.style.zIndex = "10300";
			i.style.left = "-1000px";
			i.style.top = "-1000px";
			i.style.backgroundColor = "#890";
			i.innerHTML = "<iframe id='_ContextMenu_Frame' frameborder='0' scrolling='no' width='100'></iframe>";
			f.document.body.appendChild(i)
		} else {
			i = f.Zving.getDom("_DivContextMenu");
			d.Node.show(i);
			var j = f.Zving.getDom("_ContextMenu_Frame");
			d.Node.show(j)
		}
		e = f.Zving.getDom("_ContextMenu_Frame").contentWindow;
		h = e.document;
		h.open();
		h.write(this.getHtmlString());
		h.close();
		e.TopWindow = f;
		e.init();
		i.onclick = stopEvent;
		d.AllDocumentsEvent.on("click", c.close);
		i.Instance = this;
		this.setPosition()
	};
	c.adjustSize = function () {
		var f = Zving.rootWin;
		var e = f.Zving.getDom("_ContextMenu_Frame").contentWindow;
		var h = d.Node.getSize(e.g("_ContextMenu_Table"));
		e.frameElement.height = h.height;
		e.frameElement.width = h.width
	};
	c.close = function () {
		var e = d.rootWin.Zving.getDom("_DivContextMenu");
		if (e) {
			d.Node.hide(e)
		}
		d.AllDocumentsEvent.un("click", c.close)
	};
	c.getInstance = function () {
		var e = d.rootWin.Zving.getDom("_DivContextMenu");
		if (e) {
			return e.Instance
		}
	};
	c.onMouseOver = function (f) {
		var e = f.rows[0].cells;
		e[0].style.backgroundColor = "#466CA6";
		e[1].style.backgroundColor = "#7096FA";
		e[1].style.color = "#FFFFFF";
		e[2].style.backgroundColor = "#7096FA"
	};
	c.onMouseOut = function (f) {
		var e = f.rows[0].cells;
		e[0].style.backgroundColor = "#D6DFF7";
		e[1].style.backgroundColor = "#F7F8FD";
		e[1].style.color = "";
		e[2].style.backgroundColor = "#F7F8FD"
	};
	$(window).on("unload", c.close);
	d.Menu = c
})();
(function () {
	var z = window.Zving,
	Constant = z.Constant,
	Node = z.Node,
	Tree = {};
	Tree.BackendMethod = "com.zving.framework.ui.controls.TreeUI.doWork";
	Constant.TreeLevel = "_ZVING_TREE_LEVEL";
	Constant.TreeStyle = "_ZVING_TREE_STYLE";
	Constant.Icon_Branch_NotLast_NotExpand = "Icons/treeicon01.gif";
	Constant.Icon_Branch_NotLast_Expand = "Icons/treeicon02.gif";
	Constant.Icon_Branch_Last_NotExpand = "Icons/treeicon04.gif";
	Constant.Icon_Branch_Last_Expand = "Icons/treeicon05.gif";
	Constant.Class_Branch_NotLast_NotExpand = "branch-notlast-collapse";
	Constant.Class_Branch_Last_NotExpand = "branch-last-collapse";
	Constant.Class_Branch_NotLast_Expand = "branch-notlast-expand";
	Constant.Class_Branch_Last_Expand = "branch-last-expand";
	Constant.Branch_NotLast_NotExpand = "1";
	Constant.Branch_NotLast_Expand = "2";
	Constant.Branch_Last_NotExpand = "3";
	Constant.Branch_Last_Expand = "4";
	Tree.CurrentItem = null;
	Tree.onItemClick = function (evt, item) {
		if (Tree.CurrentItem) {
			Node.removeClass(Tree.CurrentItem, "current")
		}
		Tree.CurrentItem = z.getDom(item);
		Node.addClass(item, "current")
	};
	Tree.onItemDblClick = function (evt, item) {
		evt = getEvent(evt);
		Tree.CurrentItem = z.getDom(item);
		if (Tree.hasChild(item) && !Tree.isRoot(item)) {
			Tree.onBranchIconClick(evt, Tree.getLastBranchIcon(item))
		}
	};
	Tree.getLastBranchIcon = function (item) {
		var arr = item.getElementsByTagName("IMG");
		for (var i = 0; i < arr.length; i++) {
			var ele = arr[i];
			if (/branch-/.test(ele.className)) {
				return ele
			}
		}
	};
	Tree.onContextMenu = function (evt) {
		evt = getEvent(evt);
		Tree.CurrentItem = evt.target || evt.srcElement
	};
	Tree.isRoot = function (ele) {
		return z.getDom(ele).getAttribute("level") === "0"
	};
	Tree.hasChild = function (ele) {
		ele = z.getDom(ele);
		if (ele.getAttribute("lazy") == "1") {
			return true
		}
		var nextEl = Node.nextElement(ele);
		if (nextEl && nextEl.tagName.toLowerCase() == "div") {
			return true
		}
		return false
	};
	Tree.onBranchIconClick = function (evt, ele) {
		evt = getEvent(evt);
		if (!ele) {
			ele = evt.target || evt.srcElement
		}
		var imgEle = ele;
		ele = $(ele).closest("p")[0];
		var lazy = ele.getAttribute("lazy");
		if (lazy == "1") {
			Tree.lazyLoad(ele)
		} else {
			if (Tree.hasChild(ele)) {
				Node.toggle(Node.nextElement(ele))
			}
		}
		Tree.changeIcon(imgEle, ele);
		stopEvent(evt)
	};
	Tree.changeIcon = function (imgEle, ele) {
		var expand = ele.getAttribute("expand");
		var imgPath;
		if (expand == Constant.Branch_NotLast_NotExpand) {
			Node.replaceClass(imgEle, Constant.Class_Branch_NotLast_NotExpand, Constant.Class_Branch_NotLast_Expand);
			expand = Constant.Branch_NotLast_Expand
		} else {
			if (expand == Constant.Branch_NotLast_Expand) {
				Node.replaceClass(imgEle, Constant.Class_Branch_NotLast_Expand, Constant.Class_Branch_NotLast_NotExpand);
				expand = Constant.Branch_NotLast_NotExpand
			} else {
				if (expand == Constant.Branch_Last_NotExpand) {
					Node.replaceClass(imgEle, Constant.Class_Branch_Last_NotExpand, Constant.Class_Branch_Last_Expand);
					expand = Constant.Branch_Last_Expand
				} else {
					if (expand == Constant.Branch_Last_Expand) {
						Node.replaceClass(imgEle, Constant.Class_Branch_Last_Expand, Constant.Class_Branch_Last_NotExpand);
						expand = Constant.Branch_Last_NotExpand
					}
				}
			}
		}
		ele.setAttribute("expand", expand)
	};
	Tree.init = function (ele, customscrollbar) {
		ele = z.getDom(ele);
		var container = z.getDom(ele.id + "_container");
		Tree.setParam(ele, Constant.ID, ele.id);
		Tree.setParam(ele, Constant.Method, ele.getAttribute("method"));
		Tree.setParam(ele, Constant.TagBody, ele.TagBody);
		z.Page.onLayout(function () {
			if (customscrollbar) {
				Tree.initScroll(ele.id)
			}
		});
		$(window).on("unload", function () {
			Tree.destroy(ele)
		})
	};
	Tree.initResizeable = function (ele) {
		ele = z.getDom(ele);
		var container = z.getDom(ele.id + "_container");
		if (!$(container).data("resize")) {
			if (window.Resize) {
				$(container).data("resize", new Resize(container, {
						Max : true,
						mxContainer : {
							clientWidth : 500,
							clientHeight : 700
						}
					}))
			}
		}
	};
	Tree.initScroll = function (ele) {
		ele = z.getDom(ele);
		if (!ele) {
			return
		}
		var container = z.getDom(ele.id + "_container");
		if (z.ScrollPanel && !z.isIE6 && !z.isChrome) {
			container.setAttribute("customscrollbar", "true");
			if (!$(container).data("scrollpanelId")) {
				if (ele.offsetHeight > container.offsetHeight || ele.offsetWidth > container.offsetWidth) {
					$(container).data("scrollpanelId", new z.ScrollPanel({
							target : container,
							overflow : "auto"
						}).getId())
				}
			} else {
				var scrollpanelInstance = z.ComponentManager.get($(container).data("scrollpanelId"));
				if (scrollpanelInstance) {
					scrollpanelInstance.resume({
						target : container
					})
				}
			}
		}
	};
	Tree.resumeScrollPanel = function (ele) {
		ele = z.getDom(ele);
		var container = z.getDom(ele.id + "_container");
		if ($(container).data("scrollpanelId")) {
			var scrollpanelInstance = z.ComponentManager.get($(container).data("scrollpanelId"));
			if (scrollpanelInstance) {
				scrollpanelInstance.resume({
					target : container
				})
			}
		}
	};
	Tree.DataCache = {};
	Tree.setParam = function (ele, name, value) {
		var id = z.id(z.getDom(ele));
		if (!Tree.DataCache[id]) {
			Tree.DataCache[id] = {}

		}
		if (!Tree.DataCache[id].Params) {
			Tree.DataCache[id].Params = new DataCollection()
		}
		Tree.DataCache[id].Params.add(name, value)
	};
	Tree.getParam = function (ele, name) {
		var id = z.id(z.getDom(ele));
		if (!Tree.DataCache[id] || !Tree.DataCache[id].Params) {
			return
		}
		return Tree.DataCache[id].Params.get(name)
	};
	var tempDiv;
	Tree.loadData = function (ele, func) {
		ele = z.getDom(ele);
		var id = ele.id;
		var currentID = null;
		var container = z.getDom(id + "_container");
		var ctAttrs = {
			customscrollbar : container.getAttribute("customscrollbar"),
			width : container.style.width,
			height : container.style.height
		};
		if (Tree.CurrentItem) {
			currentID = Tree.CurrentItem.getAttribute("cid")
		}
		Server.sendRequest(Tree.BackendMethod, Tree.DataCache[id].Params, function (response) {
			Tree.CurrentItem = null;
			var html = response.get("HTML");
			if (!html) {
				z.Console.error("用于渲染树结构的数据错误：" + response)
			}
			html = html.replace(/^<div [^>]+>/, "").replace(/<\/td><\/tr><\/table><\/div><\/div>/, "</td></tr></table></div>");
			if (!tempDiv) {
				tempDiv = document.createElement("div")
			}
			tempDiv.innerHTML = html;
			var newEl = tempDiv.firstChild;
			ele.parentElement.replaceChild(newEl, ele);
			if (tempDiv.getElementsByTagName("script")[0]) {
				if (window.execScript) {
					execScript(tempDiv.getElementsByTagName("script")[0].text)
				} else {
					window["eval"](tempDiv.getElementsByTagName("script")[0].text)
				}
			}
			if (currentID !== null) {
				Tree.select(newEl, "cid", currentID, false)
			}
			if (func) {
				func()
			}
			var container = z.getDom(id + "_container");
			container.style.width = ctAttrs.width;
			container.style.height = ctAttrs.height;
			if (ctAttrs.customscrollbar == "true") {
				Tree.resumeScrollPanel(newEl)
			}
			container = ele = null
		})
	};
	Tree.lazyLoad = function (ele, func) {
		ele = z.getDom(ele);
		var tree = Node.getParentByAttr(ele, "ztype", "_Tree");
		var id = tree.id;
		var onLazyLoad = tree.onLazyLoad;
		Tree.setParam(tree, "ParentLevel", ele.getAttribute("level"));
		Tree.setParam(tree, "ParentID", ele.getAttribute("cid"));
		Tree.setParam(tree, "LevelStr", ele.getAttribute("levelstr"));
		Server.sendRequest(Tree.BackendMethod, Tree.DataCache[id].Params, function (response) {
			if (ele.getAttribute("lazy") == "1") {
				ele.setAttribute("lazy", "0");
				var newEle = document.createElement("div");
				newEle.innerHTML = response.get("HTML");
				if (newEle.firstChild == newEle.lastChild && newEle.firstChild.tagName == "DIV") {
					newEle = newEle.firstChild
				}
				ele.insertAdjacentElement("afterEnd", newEle);
				Tree.setParam(tree, "ParentLevel", "");
				Tree.setParam(tree, "ParentID", "");
				Tree.setParam(tree, "LevelStr", "");
				if (func) {
					func.call(newEle)
				}
				if (typeof onLazyLoad == "function") {
					onLazyLoad.call(tree, newEle)
				}
			}
			tree = ele = null
		})
	};
	Tree.select = function (tree, attr, val, execEventFlag) {
		tree = z.getDom(tree);
		var arr = tree.getElementsByTagName("p");
		for (var i = 0; i < arr.length; i++) {
			var p = arr[i];
			if (p.getAttribute(attr) == val) {
				Tree.selectNode(p, execEventFlag);
				break
			}
		}
	};
	Tree.selectRoot = function (tree, execEventFlag) {
		tree = z.getDom(tree);
		var arr = tree.getElementsByTagName("p");
		Tree.selectNode(arr[0], execEventFlag)
	};
	Tree.selectNode = function (ele, execEventFlag) {
		ele = z.getDom(ele);
		Tree.onItemClick(null, ele);
		if (execEventFlag) {
			ele.onclick.apply(ele)
		}
		var p = Tree.getParentNode(ele);
		while (p != null && !Tree.isRoot(p)) {
			Node.show(Node.nextElement(p));
			p.setAttribute("expand", "1");
			Tree.changeIcon(Tree.getLastBranchIcon(p), p);
			p = Tree.getParentNode(p)
		}
	};
	Tree.getParentNode = function (ele) {
		ele = z.getDom(ele);
		if (Tree.isRoot(ele)) {
			return null
		}
		var div = Node.getParent(ele, "div");
		var p = Node.prevElement(div);
		return p
	};
	Tree.getNode = function (tree, attr, val) {
		tree = z.getDom(tree);
		var arr = tree.getElementsByTagName("p");
		for (var i = 0; i < arr.length; i++) {
			var p = arr[i];
			if (p.getAttribute(attr) == val) {
				return p
			}
		}
		return null
	};
	Tree.scrollToNode = function (ele) {
		ele = z.getDom(ele);
		var tree = Node.getParentByAttr(ele, "ztype", "_Tree");
		var h = $(tree).height();
		if (ele.offsetTop > h) {
			tree.scrollTop = ele.offsetTop - 100
		}
	};
	Tree.filter = function (tree, val) {
		tree = z.getDom(tree);
		var arr = tree.getElementsByTagName("p");
		val = val.toLowerCase();
		var ss = [];
		var i;
		for (i = 0; i < arr.length; i++) {
			var p = arr[i];
			if (i === 0 && Tree.isRoot(p)) {
				continue
			}
			var str = p.innerText;
			str = str.replace(/　/g, "").trim().toLowerCase();
			if (str.indexOf(val) >= 0) {
				ss.push(p);
				var level = p.getAttribute("level");
				for (var k = level - 1; k > 0; k--) {
					for (var j = i - 1; j >= 1; j--) {
						if (arr[j].getAttribute("level") == k) {
							ss.push(arr[j]);
							break
						}
					}
				}
			}
			Node.hide(p)
		}
		for (i = 0; i < ss.length; i++) {
			Node.show(ss[i])
		}
	};
	Tree.clear = function (ele) {
		ele = z.getDom(ele);
		ele.innerHTML = "";
		Tree.CurrentItem = null
	};
	Tree.dragEnd = function (evt) {
		var afterDrag = z.getDom(this).getAttribute("afterDrag");
		if (!afterDrag) {
			return
		}
		var func = eval(afterDrag);
		func.apply(this, arguments);
		func = null
	};
	Tree.dragOver = function (evt) {
		this.style.fontWeight = "bold";
		this.style.backgroundColor = "#EDFBD2"
	};
	Tree.dragOut = function (evt) {
		this.style.fontWeight = "normal";
		this.style.backgroundColor = "#FFF"
	};
	Tree.destroy = function (ele) {
		ele = z.getDom(ele);
		ele.onLazyLoad = null;
		var container = z.getDom(ele.id + "_container");
		var scrollpanelInstance = z.ComponentManager.get($(container).data("scrollpanelId"));
		if (scrollpanelInstance) {
			scrollpanelInstance.destroy()
		}
		$(container).removeData();
		ele.TagBody = null;
		delete Tree.DataCache[z.id(ele)]
	};
	z.Tree = Tree
})();
(function () {
	var f = window.Zving,
	c = f.getDom,
	b = f.Page,
	e = {};
	e.$selectedIframe = null;
	e.onTabClick = function (h) {
		h = c(h);
		$(h).siblings("a").removeClass("z-tab-current");
		$(h).addClass("z-tab-current")
	};
	e.initTab = function (h) {};
	var a,
	d;
	e.onChildTabClick = function (m) {
		m = c(m);
		var l;
		var o = $(m);
		var h = o.siblings("a");
		for (var k = 0; k < h.length; k++) {
			var j = h[k];
			l = $("#_ChildTabFrame_" + j.getAttribute("id"))[0];
			if ($(j).hasClass("z-tab-current")) {
				a = $(l).width();
				d = $(l).height();
				$(j).removeClass("z-tab-current")
			}
			l.style.position = "absolute";
			try {
				l.style.width = a + "px";
				l.style.height = d + "px"
			} catch (n) {}

		}
		o.addClass("z-tab-current");
		l = $("#_ChildTabFrame_" + m.id)[0];
		if (/^(javascript:void|#;|about:blank)/i.test(l.src)) {
			if ($(l).attr("targetURL")) {
				l.src = $(l).attr("targetURL");
				$(l).removeAttr("targetURL")
			} else {
				l.src = o.attr("src")
			}
		}
		l.style.position = "static";
		l.style.width = "100%";
		l.style.height = "100%";
		e.$selectedIframe = $(l)
	};
	e.tryReload = function (j) {
		if (!j) {
			return
		}
		var l = e.getCurrentTab();
		var i = l.src || l.getAttribute("targetURL") || l.getAttribute("_src");
		if (!i) {
			alert("error: TabPage.js # TabPage.tryReload()" + l.outerHTML)
		}
		var h = i.indexOf("?");
		if (h < 0) {
			l.src = i + "?" + j
		} else {
			var k = i.substring(h + 1);
			if (k == j) {
				return
			}
			l.src = i.substring(0, h) + "?" + j
		}
	};
	e.init = function (j) {
		if (!j || !$("a.z-tab-current")[0]) {
			$("a.z-tab").first().click();
			j = $("a.z-tab")[0].id
		}
		var i = e.$selectedIframe = $("#" + j);
		if (i.attr("targetURL")) {
			i.removeAttr("targetURL")
		}
		var h = i.siblings("iframe");
		b.onLayout(function () {
			var k = i.width(),
			l = i.height();
			h.not(e.$selectedIframe).each(function () {
				this.style.width = k + "px";
				this.style.height = l + "px"
			})
		});
		$(window).on("unload", function () {
			i = e.$selectedIframe = h = null
		})
	};
	e.getChildTab = function (h) {
		return c("_ChildTabFrame_" + h)
	};
	e.isChildLoaded = function (i) {
		var h = c("_ChildTabFrame_" + i);
		if (/^(javascript:void|about:)/i.test(h.src)) {
			return false
		}
		if (h.contentWindow && h.contentWindow.document && h.contentWindow.document.body) {
			if (h.contentWindow.Zving && h.contentWindow.Zving.Page) {
				return h.contentWindow.Zving.Page.isReady
			}
			return true
		}
		return false
	};
	e.getCurrentTab = function () {
		var h = $("a.z-tab-current");
		if (h.length) {
			return c("_ChildTabFrame_" + h[0].id)
		}
	};
	e.setSrc = function (i, h) {
		c(i).setAttribute("targetURL", h);
		if (e.getCurrentTab() == e.getChildTab(i)) {
			c("_ChildTabFrame_" + i).src = h
		} else {
			c("_ChildTabFrame_" + i).setAttribute("targetURL", h)
		}
	};
	e.disableTab = function (h) {
		h = c(h);
		$(h).addClass("z-tab-disabled");
		h._onclickbak = h.onclick;
		h.onclick = null;
		h.onmouseover = null;
		h.onmouseout = null
	};
	e.enableTab = function (h) {
		h = c(h);
		$(h).removeClass("z-tab-disabled");
		if (h._onclickbak) {
			h.onclick = h._onclickbak;
			h._onclickbak = null
		} else {
			h.onclick = function () {
				e.onChildTabClick(this)
			}
		}
	};
	f.TabPage = e
})();
(function () {
	var c = window.Zving;
	var b = {};
	var a = {};
	a = function (d) {
		this.defaultConfig = {};
		if (!(this instanceof a)) {
			return new a(d)
		}
		a.superclass.constructor.apply(this, arguments);
		this.addEvents("beforecollapse", "collapse", "beforeexpand", "expand");
		this.getBodyEl();
		this.$el.on("click", $.proxy(this.toggleCollapse, this));
		if (this.collapsed) {
			this.$el.click()
		}
	};
	c.Class.extend(a, c.UICompBase, {
		ctype : "PanelHeader",
		collapsed : false,
		getBodyEl : function () {
			var f = this.$el;
			var e = f.next().next();
			var d;
			while (!e[0]) {
				if (!f.parent()[0]) {
					break
				}
				if (f.parent()[0].nodeName == "TD") {
					d = f.parent().parent()
				} else {
					d = f.parent()
				}
				e = d.next()
			}
			if (e[0]) {
				this.body = e[0]
			}
		},
		collapse : function () {
			$(this.body).hide();
			this.$el.addClass("z-toggle-collapsed")
		},
		expand : function () {
			$(this.body).show();
			this.$el.removeClass("z-toggle-collapsed")
		},
		toggleCollapse : function () {
			$(this.body).toggle();
			this.$el[(c.Node.isVisible(this.body) ? "removeClass" : "addClass")]("z-toggle-collapsed")
		}
	});
	c.PanelHeader = a
})();
(function () {
	var i = window.Zving,
	f = i.isIE,
	b = i.isGecko,
	e = i.Page,
	h = i.Lang,
	a = i.Dialog,
	c = i.CONTEXTPATH;
	var d = function (k, m, j, l) {
		this.TaskID = k;
		this.Title = m;
		if (l) {
			this.Height = l
		} else {
			this.Height = 150
		}
		if (j) {
			this.Width = j
		} else {
			this.Width = 400
		}
	};
	d.BackendMethod = "com.zving.framework.messages.LongTimeTaskUI.getInfo";
	d.prototype.show = function (l) {
		var k = i.rootWin;
		var q = this.TaskID;
		var o = new a({
				id : "DialogProgress" + this.TaskID,
				width : this.Width,
				height : this.Height,
				title : this.Title,
				url : "about:blank",
				onOk : function () {
					d.stop(q)
				},
				onCancel : function () {}

			});
		o.show();
		var n = o.innerWin;
		var m = n.document;
		m.open();
		m.write("<style>.progressBox{border:#ddd 1px solid}");
		m.write(".progressBg{ background:#ddd url(" + c + "Framework/Images/progressBg.gif);}");
		m.write(".progressLight{font-size:5px; line-height:5px; color:#99bb00; background:#99bb00}");
		m.write(".progressShadow{font-size:5px; line-height:6px; color:#779911; background:#779911}");
		m.write("table,td{border-collapse: collapse; border-spacing: 0;}</style>");
		m.write("<body oncontextmenu='return false;'></body>");
		var j = [];
		j.push("<table width='100%' height='100%' border='0'><tr>");
		j.push("  <td align='center' valign='middle'>");
		j.push("	<div id='Info' style='text-align:left;width:100%;font-size:12px'>&nbsp;</div><br>");
		j.push("      <table width='100%' border='1' cellpadding='1' cellspacing='0' class='progressBox'>");
		j.push("      <tr><td class='progressBg'>");
		j.push("				<table width='1%' border='0' cellpadding='0' cellspacing='0' id='tableP'>");
		j.push("          <tr><td class='progressLight'>-</td></tr>");
		j.push("          <tr><td class='progressShadow'>-</td></tr>");
		j.push("        </table></td></tr></table></td></tr></table>");
		var p = m.createElement("div");
		p.innerHTML = j.join("");
		m.body.appendChild(p);
		m.close();
		o.okButton.innerText = h.get("Common.Cancel");
		o.cancelButton.innerText = h.get("Common.Close");
		this.Dialog = o;
		this.Dialog.onComplete = l;
		d.getInfo(this.TaskID)
	};
	d.getInfo = function (k) {
		var j = new DataCollection();
		j.add("TaskID", k);
		Server.sendRequest(d.BackendMethod, j, function (l) {
			if (l.Status === 0 || l.Status === "0") {
				a.alert(l.Message)
			} else {
				if (!a.getInstance("DialogProgress" + k)) {
					return
				}
				var o = l.get("CurrentInfo");
				if (o) {
					$DW.document.getElementById("Info").innerHTML = o
				}
				if (l.get("CompleteFlag") == "1") {
					$DW.document.getElementById("tableP").width = "100%";
					var p = a.getInstance("DialogProgress" + k);
					i.Node.hide(p.okButton);
					if (l.get("ErrorFlag") != "1") {
						if (p.onComplete) {
							try {
								p.onComplete()
							} catch (m) {
								alert(m.message)
							}
						}
					}
				} else {
					var n = l.get("Percent");
					if (n == "0") {
						n = "1"
					}
					$DW.document.getElementById("tableP").width = n + "%";
					window.setTimeout(function () {
						d.getInfo(k)
					}, 1000)
				}
			}
		})
	};
	d.stop = function (k) {
		var j = new DataCollection();
		j.add("TaskID", k);
		Server.sendRequest("com.zving.framework.messages.LongTimeTaskUI.stop", j, function (l) {
			function m() {
				Server.sendRequest("com.zving.framework.messages.LongTimeTaskUI.stop", j, function (n) {
					if (n.Status == 1) {
						a.alert(h.get("Progress.HasCanceled"));
						a.getInstance("DialogProgress" + k).close()
					} else {
						window.setTimeout(function () {
							m(k)
						}, 1000)
					}
				})
			}
			a.getInstance("DialogProgress" + k).cancelButton.innerHTML = h.get("Progress.HasCancelling");
			i.Node.disable(a.getInstance("DialogProgress" + k).cancelButton);
			m()
		})
	};
	i.Progress = d
})();
(function () {
	var z = window.Zving,
	Layout = {};
	z.Page = z.Page || {};
	var layoutTableClassName = "js_layoutTable";
	Layout.haslayout = 0;
	Layout.layoutTables = [];
	Layout.isAutoResizeBodyHeight = false;
	var layoutEvent = new z.CustEvent();
	z.Page.onLayout = function (fn, scope, options) {
		layoutEvent.addListener(fn, scope, options)
	};
	Layout.initLayoutTable = function () {
		var $tables = $("table." + layoutTableClassName);
		if ($tables.length < 1) {
			z.Page.onLoad(function () {
				Layout.haslayout = -1;
				layoutEvent.fire()
			});
			return
		} else {
			$tables.each(function () {
				Layout.layoutTables.push(new Layout.LayoutTable({
						el : this
					}));
				var pNode = this.parentNode;
				if (pNode.tagName == "FORM") {
					pNode.style.height = "100%";
					pNode = pNode.parentNode
				}
				if (pNode.tagName == "BODY") {
					var tHeight = this.getAttribute("height");
					if (tHeight == "*" || tHeight.indexOf("%") > 0) {
						Layout.isAutoResizeBodyHeight = true
					}
				}
			})
		}
		if (Layout.isAutoResizeBodyHeight) {
			$(window).on("load.layout", Layout.resizeBodyHeight);
			$(window).on("unload", function () {
				$(window).off("load.layout")
			});
			if (window != window.top) {
				z.EventManager.onWindowResize(Layout.resizeBodyHeight);
				$(window).on("unload", function () {
					z.EventManager.removeResizeListener(Layout.resizeBodyHeight)
				})
			}
		}
	};
	Layout.resizeBodyHeight = function (evt) {
		evt = z.getEvent(evt);
		if (evt && evt.type == "load") {
			var LT = Layout.layoutTables;
			document.body._onloadHeight = document.body.offsetHeight;
			if (window == window.top) {
				document.body._style_overflow = document.body.style.overflow;
				document.body.style.overflow = "hidden";
				document.body.style.height = document.body._onloadHeight + "px";
				document.body.style.overflow = document.body._style_overflow
			}
		}
		if (window != window.parent) {
			if (window.parent.Zving && !window.parent.Zving.Page.loadComplete || !Zving.rootWin.Zving.Page.loadComplete) {
				window.setTimeout(Layout.resizeBodyHeight, 40);
				return
			}
			if (window.parent.Zving && !window.parent.Zving.Layout.haslayout) {
				window.setTimeout(Layout.resizeBodyHeight, 20);
				return
			}
		}
		var ch = z.isIE ? (z.isStrict ? document.documentElement.clientHeight : document.body.clientHeight) : self.innerHeight;
		if (window == window.top && ch < 400) {
			ch = 400
		}
		if (!document.body.currentStyle) {
			window.setTimeout(Layout.resizeBodyHeight, 50);
			return
		}
		var bodyStyleHeight = parseInt(document.body.currentStyle.height, 10);
		if (bodyStyleHeight != ch) {
			if (window == window.top && ch < bodyStyleHeight) {}
			else {
				document.body.style.overflow = "hidden";
				document.body.style.height = ch + "px";
				document.body.style.overflow = ""
			}
		}
		var list = Layout.layoutTables;
		for (var j = 0; j < list.length; j++) {
			list[j].onLayout()
		}
		Layout.haslayout++;
		layoutEvent.fire();
		if (z.isIE6) {}

	};
	Layout.LayoutTable = function (config) {
		z.extra(this, config);
		if (!this.el) {
			alert("Layout.js#LayoutTable: 参数错误，没有传入dom对象")
		}
		if (!this.container) {
			this.container = this.el.parentNode
		}
		if (!this.layoutTarget) {
			this.layoutTarget = this.container
		}
		this.fixHeightCells = [];
		this.percentHeightCells = [];
		this.autoHeightCells = [];
		this.getId();
		this.rendered = true;
		z.Observable(this);
		this.addEvents("beforelayout", "layout", "afterlayout");
		z.ComponentManager.add(this);
		this.on("layout", this._evalOnloayout);
		this.configureItem()
	};
	Layout.LayoutTable.prototype = {
		ctype : "LayoutTable",
		getId : function () {
			if (!this.id) {
				var ctype = this.ctype.toLocaleLowerCase(),
				idSeed = z.ComponentManager.idSeed;
				if (idSeed[ctype] == undefined) {
					idSeed[ctype] = 0
				}
				this.id = "z-" + ctype + "-" + (++idSeed[ctype])
			}
			return this.id
		},
		configureItem : function () {
			var me = this;
			var cells = [],
			rows = me.el.rows;
			if (z.isGecko && me.el.getAttribute("height") == "100%") {
				me.el.setAttribute("height", "*")
			}
			for (var r = 0; r < rows.length; r++) {
				cells.push(rows[r].cells[0])
			}
			for (var i = 0; i < cells.length; i++) {
				var height = cells[i].getAttribute("height");
				if (height == "*" || height == "auto") {
					me.autoHeightCells.push(new Layout.LayoutCell({
							el : cells[i],
							type : "autoHeight"
						}))
				} else {
					if (height !== null && height.indexOf("%") > 0) {
						me.percentHeightCells.push(new Layout.LayoutCell({
								el : cells[i],
								type : "percentHeight",
								originalHeight : height
							}))
					} else {
						if (height == "" || height == null) {
							var cell = cells[i];
							var boxfix = z.isBorderBox ? 0 : z.Node.getOuterH(cell);
							me.fixHeightCells.push(new Layout.LayoutCell({
									el : cells[i],
									type : "fixHeight"
								}))
						} else {
							me.fixHeightCells.push(new Layout.LayoutCell({
									el : cells[i],
									type : "fixHeight"
								}))
						}
					}
				}
			}
		},
		getLayoutTargetHeight : function () {
			var me = this;
			var height;
			if ((me.layoutTarget.tagName == "TD" || me.layoutTarget.tagName == "BODY") && /^[0-9.]+px$/i.test(me.layoutTarget.style.height)) {
				height = parseInt(me.layoutTarget.style.height, 10)
			} else {
				height = me.layoutTarget.clientHeight;
				height -= z.isBorderBox ? 0 : z.Node.getOuterH(me.layoutTarget)
			}
			return height
		},
		onLayout : function () {
			var me = this;
			me.fireEvent("beforelayout", me);
			var fixHeightCellsH = 0,
			percentHeightCellsH = 0,
			fixHC = me.fixHeightCells,
			perHC = me.percentHeightCells,
			autoHC = me.autoHeightCells;
			var surplus,
			boxfix;
			var tableHeight = me.el.getAttribute("height");
			if (tableHeight === null) {
				return
			}
			if (tableHeight == "" || tableHeight == "*") {
				tableHeight = "100%"
			}
			if (tableHeight.indexOf("%") != -1) {
				surplus = tableHeight = me.getLayoutTargetHeight() * parseInt(tableHeight, 10) * 0.01
			}
			for (var i = 0; i < fixHC.length; i++) {
				surplus -= fixHC[i].el.offsetHeight
			}
			for (var j = 0; j < perHC.length; j++) {
				var newHeight = parseInt(perHC[j].originalHeight, 10) * tableHeight * 0.01;
				if (newHeight > surplus) {
					newHeight = surplus
				}
				surplus -= newHeight;
				boxfix = z.isBorderBox ? 0 : z.Node.getOuterH(perHC[j].el);
				perHC[j].setHeight(newHeight - boxfix)
			}
			for (var k = 0, autoHCLength = autoHC.length; k < autoHCLength; k++) {
				boxfix = z.isBorderBox ? 0 : z.Node.getOuterH(autoHC[k].el);
				try {
					autoHC[k].setHeight(parseInt(surplus / autoHCLength, 10) - boxfix)
				} catch (e) {
					z.Console.error(autoHC[k].el, "设置高度不成功")
				}
				autoHC[k].fireEvent("layout", autoHC[k])
			}
			if (z.isIE6) {
				var iframes = me.el.getElementsByTagName("IFRAME");
				iframes = z.toArray(iframes);
				iframes.each(function (iframe) {
					var innerWin = iframe.contentWindow,
					innerDoc = innerWin.document;
					if (!innerDoc || !innerWin.Zving) {
						return
					}
					if (innerWin.Zving.Layout.isAutoResizeBodyHeight == true) {
						innerDoc.body.style.overflow = "hidden";
						innerDoc.body.style.height = (innerWin.isStrict ? innerDoc.documentElement.clientHeight : innerDoc.body.clientHeight) + "px";
						innerDoc.body.style.overflow = ""
					}
				})
			}
			me.fireEvent("layout", me)
		},
		_evalOnloayout : function () {
			var el = this.el;
			if (typeof el.onLayout == "function") {
				el.onLayout.call(el)
			} else {
				if (el.getAttribute("onlayout")) {
					eval.call(el, el.getAttribute("onlayout"))
				}
			}
		},
		destroy : function () {
			this.fixHeightCells = this.percentHeightCells = this.autoHeightCells = null;
			this.layoutTarget = null;
			UICompBase.prototype.destroy.call(this)
		}
	};
	Layout.LayoutCell = function (config) {
		z.extra(this, config);
		this.getId();
		z.Observable(this);
		this.addEvents("beforelayout", "layout", "afterlayout");
		z.Statable(this);
		z.ComponentManager.add(this);
		this.on("layout", this._evalOnloayout);
		this.getBackState()
	};
	Layout.LayoutCell.prototype = {
		ctype : "LayoutCell",
		getId : function () {
			if (!this.id) {
				var ctype = this.ctype.toLocaleLowerCase(),
				idSeed = z.ComponentManager.idSeed;
				if (idSeed[ctype] == undefined) {
					idSeed[ctype] = 0
				}
				this.id = "z-" + ctype + "-" + (++idSeed[ctype])
			}
			return this.id
		},
		getBackState : function () {
			if (this.type == "fixHeight") {
				return
			}
			var h = this.getState("height");
			if (h) {
				this.setHeight(h, true)
			}
		},
		setHeight : function (h, dontSaveState) {
			this.el.style.height = h + "px";
			var nextCell = $(this.el).next()[0];
			while (nextCell && nextCell.tagName == "TD" && nextCell.rowSpan == 1) {
				nextCell.style.height = h + "px";
				nextCell.style.zoom = 1;
				nextCell = $(nextCell).next()[0]
			}
			if (dontSaveState == undefined) {
				this.setState("height", h)
			}
		},
		_evalOnloayout : function () {
			var el = this.el;
			if (typeof el.onLayout == "function") {
				el.onLayout.call(el)
			} else {
				if (el.getAttribute("onlayout")) {
					eval.call(el, el.getAttribute("onlayout"))
				}
			}
		},
		destroy : function () {
			UICompBase.prototype.destroy.call(this)
		}
	};
	z.Page.onReady(Layout.initLayoutTable);
	$(window).on("unload", function () {
		Layout.layoutTables = []
	});
	z.Layout = Layout
})();
(function () {
	var c = window.Zving,
	a = c.Dom,
	b;
	b = function (d) {
		this.constructor.superclass.constructor.apply(this, arguments);
		this.addEvents("dragstart", "drag", "dragend")
	};
	c.Class.extend(b, c.UICompBase, {
		ctype : "Splitter",
		initComponent : function () {
			var d = this;
			this.previousSibling = this.previousSibling ? c.getDom(this.previousSibling) : c.Node.prevElement(this.el);
			this.nextSibling = this.nextSibling ? c.getDom(this.nextSibling) : c.Node.nextElement(this.el);
			this.orientation = this.orientation || "v";
			this.$el = $(this.el);
			this.startX = this.$el.offset().left;
			this.startY = this.$el.offset().top;
			this.startStyleLeft = this.el.style.left;
			this.startStyleTop = this.el.style.top;
			this.initDragObject();
			this.initOverlay();
			this.dragObject.on("dragstart", this.dragstart, this);
			this.dragObject.on("drag", this.drag, this);
			this.dragObject.on("dragend", this.dragend, this);
			var e = false;
			this.$el.on("mouseover", function () {
				if (e) {
					return
				}
				d.resetStartXY();
				e = true
			})
		},
		resetStartXY : function () {
			var d = this.orientation == "h" ? true : false,
			e = this.orientation == "v" ? true : false;
			this.startX = this.$el.offset().left;
			this.startY = this.$el.offset().top;
			this.dragObject.minXAttr = e ? this.startX + this.minXAttr : null;
			this.dragObject.maxXAttr = e ? this.startX + this.maxXAttr : null;
			this.dragObject.minYAttr = d ? this.startY + this.minYAttr : null;
			this.dragObject.maxYAttr = d ? this.startY + this.maxYAttr : null
		},
		initDragObject : function () {
			var d = this.orientation == "h" ? true : false,
			e = this.orientation == "v" ? true : false;
			if (!c.SimpleDrag) {
				c.Console.error("没有引用到Drag相关的js类，Slider（滑块）控件无法初始化！");
				this.dragObject = {
					on : c.noopFn
				};
				return
			}
			this.dragObject = new c.SimpleDrag({
					dragEl : this.el,
					withProxy : true,
					minXAttr : e ? this.startX + this.minXAttr : null,
					maxXAttr : e ? this.startX + this.maxXAttr : null,
					minYAttr : d ? this.startY + this.minYAttr : null,
					maxYAttr : d ? this.startY + this.maxYAttr : null,
					xFixed : d ? true : false,
					yFixed : e ? true : false
				});
			this.dragObject.dragend = function (f) {
				this.proxyEl.style.display = "none";
				this.fireEvent("dragend")
			}
		},
		initOverlay : function () {
			var d;
			d = this.overlay ? c.getDom(this.overlay) : c.getDom("_dragOverlay");
			if (!d) {
				d = this.overlay = a.createNodeByHtml('<div id="_dragOverlay" class="z-dragOverlay" style="position:absolute;top:0;left:0;">&#160;</div>');
				document.body.appendChild(d);
				c.Node.unselectable(d);
				c.Node.setSize(d, a.getViewport());
				c.Node.hide(d)
			}
		},
		getPreviousSibling : function () {
			return this.previousSibling
		},
		getNextSibling : function () {
			return this.nextSibling
		},
		dragstart : function () {
			this.fireEvent("dragstart");
			c.Node.show(this.overlay)
		},
		drag : function () {
			this.fireEvent("drag")
		},
		dragend : function () {
			var d,
			e;
			d = this.dragObject.proxyEl.__deltaX;
			e = this.dragObject.proxyEl.__deltaY;
			this.performResize(d, e);
			c.Node.hide(this.overlay);
			this.el.style.left = this.startStyleLeft;
			this.el.style.top = this.startStyleTop;
			this.updateChildCompLayout();
			this.fireEvent("dragend")
		},
		performResize : function (o, k) {
			var h = this.previousSibling,
			i = this.nextSibling;
			var n = this.orientation == "v" ? true : false;
			var l = this.orientation == "h" ? true : false;
			var p = c.Node.getSize(h);
			var d = c.Node.getSize(i);
			var e = n && (h.width || h.style.width);
			var m = l && (h.height || h.style.height);
			var j = n && (i.width || i.style.width);
			var f = l && (i.height || i.style.height);
			c.Node.setSize(h, e ? p.width + o : undefined, m ? p.height + k : undefined);
			c.Node.setSize(i, j ? d.width - o : undefined, f ? d.height - k : undefined)
		},
		updateChildCompLayout : function () {
			this.updateToolbarLayout()
		},
		updateToolbarLayout : function () {
			var h,
			d,
			k,
			j = [],
			f = $("div.z-toolbar", this.previousSibling).get(),
			e = $("div.z-toolbar", this.nextSibling).get();
			j = j.concat(f, e);
			for (h = 0, d = j.length; h < d; h++) {
				if (j[h].compId) {
					k = c.ComponentManager.get(j[h].compId);
					if (k) {
						k.fitToSize()
					}
				}
			}
		}
	});
	c.Splitter = b
})();
(function () {
	var b = window.Zving,
	a;
	a = function (c) {
		this.defaultConfig = {};
		if (!(this instanceof a)) {
			return new a(c)
		}
		a.superclass.constructor.apply(this, arguments)
	};
	a.htmlTemplate = '<div class="z-progressbar-bar"></div>';
	b.Class.extend(a, b.UICompBase, {
		ctype : "ProgressBar",
		orientation : "h",
		cls : "z-progressbar",
		renderTpl : a.htmlTemplate,
		value : 0,
		_min : 0,
		_max : 100,
		axis : {
			h : {
				offsetSize : "offsetWidth",
				size : "width"
			},
			v : {
				offsetSize : "offsetHeight",
				size : "height"
			}
		},
		initComponent : function () {
			this.orientation = this.orientation.toLowerCase();
			this.addEvents("beforeupdate", "update");
			a.superclass.initComponent.apply(this)
		},
		afterRender : function () {
			this.update()
		},
		update : function (d) {
			var e = this;
			d = d || {};
			b.extra(e, d);
			e.value = Math.max(Math.min(e.value, e._max), e._min);
			if (e.value == e._lastValue) {
				return
			}
			var c = e.axis[e.orientation].size;
			b.Node.setStyle(e.getBar(), c, e._calcPos(e.value));
			e._lastValue = e.value;
			e.fireEvent("update")
		},
		getValue : function () {
			var c = this;
			return c.value
		},
		_calcPos : function (e) {
			var d = this;
			var c = d.el[d.axis[d.orientation].offsetSize];
			return e * (c) / (d._max - d._min)
		},
		disable : function () {
			this.disabled = true
		},
		enable : function () {
			this.disabled = false
		},
		getTarget : function () {
			return b.getDom(this.targetId)
		},
		getBar : function () {
			return this.el.firstChild
		}
	});
	b.ProgressBar = a
})();
(function () {
	var b = window.Zving,
	a;
	a = function (c) {
		this.defaultConfig = {};
		if (!(this instanceof a)) {
			return new a(c)
		}
		this.autoEl = {
			tag : "div",
			cls : "z-slider",
			style : {
				position : "relative"
			},
			ztype : "slider",
			onselectstart : "return false"
		};
		a.superclass.constructor.apply(this, arguments)
	};
	a.htmlTemplate = '<div style="position: absolute;" class="{thumbCls}" id="{id}-thumb"><!--progressbar--><div class="z-thumb-{orientation}-btn"><div class="z-thumb-{orientation}-prev"></div><div class="z-thumb-{orientation}-track"></div><div class="z-thumb-{orientation}-next"></div></div></div>';
	b.Class.extend(a, b.UICompBase, {
		ctype : "Slider",
		orientation : "h",
		cls : "slider",
		thumbCls : "z-slider-thumb",
		renderTpl : a.htmlTemplate,
		value : 0,
		min : 0,
		max : 100,
		onslide : function () {},
		onslideclick : function () {},
		_dragOpt : {},
		_axis : {
			h : {
				mousePos : "pageX",
				pos : "left",
				size : "width",
				clientSize : "clientWidth",
				offsetSize : "offsetWidth",
				dragFixed : "yFixed"
			},
			v : {
				mousePos : "pageY",
				pos : "top",
				size : "height",
				clientSize : "clientHeight",
				offsetSize : "offsetHeight",
				dragFixed : "xFixed"
			}
		},
		initComponent : function () {
			this.orientation = this.orientation.toLowerCase();
			this.range = [this.min || 0, this.max || 100];
			this.addEvents("slidestart", "slide", "slidestop", "beforeupdate", "update", "slideclick");
			a.superclass.initComponent.apply(this);
			if (this.el) {
				this.initDom()
			}
		},
		initDom : function () {
			var c = this;
			c.dom = c.dom || {};
			c.dom.thumb = c.getThumb();
			c.$el.on("mousedown.slider", $.proxy(c.onMouseDown, c));
			c.initDraggable()
		},
		onMouseDown : function (c) {
			var h = this,
			f = h._axis[h.orientation],
			e = h.$el.offset(),
			d = h.dom.thumb,
			i = c.target || c.srcElement;
			if (i == d || d.contains(i) || h.disabled) {
				return
			}
			h._calcValue(c[f.mousePos] - e[f.pos] - d[f.offsetSize] / 2);
			h.update();
			h.fireEvent("slideclick", c);
			h.onslideclick()
		},
		initRenderData : function () {
			return b.extraIf(this.renderData, {
				id : this.id,
				cls : this.cls,
				thumbCls : this.thumbCls,
				orientation : this.orientation
			})
		},
		afterRender : function () {
			this.initDom()
		},
		initDraggable : function () {
			var c = this;
			c._dragRange = [0, 0, 0, 0];
			if (!b.SimpleDrag) {
				b.Console.error("没有引用到Drag相关的js类，Slider（滑块）控件无法初始化！");
				return
			}
			c._dragOpt = {
				dragEl : c.dom.thumb,
				withProxy : false
			};
			c._dragOpt[c._axis[c.orientation].dragFixed] = true;
			c.dragObject = new b.SimpleDrag(c._dragOpt);
			c._updateDragRange();
			c.dragObject.on("dragstart", this.dragstart, this);
			c.dragObject.on("drag", this.drag, this);
			c.dragObject.on("dragend", this.dragend, this)
		},
		dragend : function () {
			this.fireEvent("slidestop")
		},
		dragstart : function () {
			this.fireEvent("slidestart")
		},
		drag : function () {
			var e = this,
			d = e._axis[e.orientation],
			c = e.dom.thumb.style[d.pos];
			e._calcValue(parseInt(c, 10));
			this.fireEvent("slide");
			e.onslide()
		},
		_updateDragRange : function (j) {
			var i = this,
			e = i.$el.offset(),
			h = i._axis[i.orientation],
			d = j || i.range,
			f = i._dragRange,
			c = i.dom.thumb;
			d = [Math.max(Math.min(d[0], i.max), i.min), Math.max(Math.min(d[1], i.max), i.min)];
			if (i.orientation == "h") {
				f[1] = i._parseValue(d[1], "fix") + c[h.offsetSize];
				f[3] = i._parseValue(d[0], "fix");
				f[2] = c.clientHeight;
				i.dragObject.minYAttr = i.dragObject.maxYAttr = e.top;
				i.dragObject.minXAttr = f[3] + e[h.pos];
				i.dragObject.maxXAttr = f[1] + e[h.pos] - c[h.offsetSize]
			} else {
				f[0] = i._parseValue(d[0], "fix");
				f[2] = i._parseValue(d[1], "fix") + c[h.offsetSize];
				f[1] = c.clientWidth;
				i.dragObject.minXAttr = i.dragObject.maxXAttr = e.left;
				i.dragObject.minYAttr = f[0] + e[h.pos];
				i.dragObject.maxYAttr = f[2] + e[h.pos] - c[h.offsetSize]
			}
		},
		update : function (d) {
			var f = this,
			e = f._axis[f.orientation],
			c = f.el;
			d = d || {};
			b.extra(f, d);
			f._updateDragRange();
			f._adjustValue();
			if (f.fireEvent("beforeupdate", f) !== false) {
				f.getThumb().style[e.pos] = f._parseValue(f.value, "pix") + "px";
				f.fireEvent("update")
			}
		},
		_adjustValue : function () {
			var d = this,
			c = d.range;
			d.value = Math.max(Math.min(d.value, c[1]), c[0])
		},
		_calcValue : function (d) {
			var c = this;
			c.value = c._parseValue(d, "value");
			c._adjustValue()
		},
		_parseValue : function (f, d) {
			var e = this,
			c = e._axis[e.orientation];
			len = e.el[c.clientSize] - e.dom.thumb[c.offsetSize];
			if (d == "value") {
				f = (e.max - e.min) / len * f + e.min
			} else {
				f = Math.round(len / (e.max - e.min) * (f - e.min))
			}
			return f
		},
		getValue : function () {
			return this.value
		},
		getThumb : function () {
			var c = this;
			c.dom = c.dom || {};
			c.dom.thumb = c.dom.thumb || c.$el.find("." + this.thumbCls)[0];
			return c.dom.thumb
		},
		disable : function () {
			var c = this;
			c.disabled = true;
			c._updateDragRange([c.value, c.value])
		},
		enable : function () {
			var c = this;
			c.disabled = false;
			c._updateDragRange(c.range)
		},
		beforeDestroy : function () {
			var c = this;
			c.$el.off("mousedown.slider")
		}
	});
	b.Slider = a
})();
(function () {
	var a = window.Zving;
	a.Slider$progressBar = {
		progressbarTpl : '<div style="position:absolute;" class="z-slider-progressbar" id="{id}-progressbar-wrap"></div>',
		init : function (c) {
			var b = this;
			c._adjustProgressbar = this._adjustProgressbar;
			c.on("afterrender", function () {
				c.getThumb().insertAdjacentHTML("beforeBegin", a.String.tmpl(b.progressbarTpl, {
						id : c.id
					}));
				c.progressBar = new a.ProgressBar({
						id : c.id + "_progressbar",
						orientation : c.orientation,
						baseCls : "z-slider-followProgressbar"
					});
				c.progressBar.render(a.getDom(c.id + "-progressbar-wrap"));
				c._adjustProgressbar();
				c.on("distroy", function () {
					c.progressBar.distroy()
				})
			});
			c.on("slide", function () {
				c._adjustProgressbar()
			});
			c.on("slideclick", function () {
				c._adjustProgressbar()
			});
			c.on("update", function () {
				c._adjustProgressbar()
			})
		},
		_adjustProgressbar : function () {
			var f = this,
			c = f.orientation,
			d = f._axis[c],
			b = f.getThumb(),
			e = parseInt(b.style[d.pos], 10);
			if (!f.progressBar) {
				return
			}
			f.progressBar.getBar().style[f.progressBar.axis[c].size] = (isNaN(e) ? 0 : e) + b[d.offsetSize] / 2 + "px"
		}
	}
})();
(function () {
	var a = window.Zving;
	a.Slider$tip = a.Class.extend(a.Tip, {
			minWidth : 10,
			offsets : [0, -10],
			init : function (b) {
				b.on("slidestart", this.onSlide, this);
				b.on("slide", this.onSlide, this);
				b.on("slidestop", this.hide, this);
				b.on("destroy", this.destroy, this)
			},
			onSlide : function (b) {
				this.show();
				this.body.innerHTML = this.getText(b);
				this.doAutoWidth();
				this.el.alignTo(b.thumb, "b-t?", this.offsets)
			},
			getText : function (b) {
				return String(b.getValue())
			}
		})
})();
(function () {
	var b = window.Zving,
	a;
	a = function (c) {
		this.defaultConfig = {
			_scrollBarSize : {
				width : 0,
				height : 0
			}
		};
		if (!(this instanceof a)) {
			return new a(c)
		}
		this.autoEl = {
			tag : "div",
			cls : "scrollbar-" + (c.orientation || this.orientation),
			ztype : "ScrollBar",
			onselectstart : "return false"
		};
		a.superclass.constructor.apply(this, arguments);
		this.addEvents("scrollstart", "scroll", "scrollstop", "beforeupdate", "update");
		this.orientation = this.orientation.toLowerCase()
	};
	a.htmlTemplate = '<div class="z-scrollbar-prev scrollbar-{orientation}-prev"></div><div class="z-scrollbar-track scrollbar-{orientation}-track" id="{id}_track">    <div style="position:relative;" class="z-scrollbar-slider scrollbar-{orientation}-slider" id="{id}_slider">        <div style="position: absolute;" class="z-scrollbar-slider-thumb scrollbar-{orientation}-slider-thumb" id="{id}_slider_thumb">            <div class="z-scrollbar-thumb-btn scrollbar-{orientation}-thumb-btn">                <div class="z-scrollbar-thumb-prev scrollbar-{orientation}-thumb-prev"></div>                <div class="z-scrollbar-thumb-track scrollbar-{orientation}-thumb-track"></div>                <div class="z-scrollbar-thumb-next scrollbar-{orientation}-thumb-next"></div>            </div>        </div>    </div></div><div class="z-scrollbar-next scrollbar-{orientation}-next"></div>';
	b.Class.extend(a, b.UICompBase, {
		ctype : "ScrollBar",
		cls : "z-scrollbar",
		renderTpl : a.htmlTemplate,
		orientation : "v",
		value : 0,
		dimension : 10,
		step : 4,
		onscroll : null,
		_axis : {
			h : {
				size : "width",
				unSize : "height",
				offsetSize : "offsetWidth",
				unOffsetSize : "offsetHeight",
				clientSize : "clientWidth",
				scrollPos : "scrollLeft",
				scrollSize : "scrollWidth"
			},
			v : {
				size : "height",
				unSize : "width",
				offsetSize : "offsetHeight",
				unOffsetSize : "offsetWidth",
				clientSize : "clientHeight",
				scrollPos : "scrollTop",
				scrollSize : "scrollHeight"
			}
		},
		initRenderData : function () {
			return b.extraIf(this.renderData, {
				id : this.id,
				cls : this.cls,
				orientation : this.orientation
			})
		},
		afterRender : function () {
			var j = this,
			f = j._axis[j.orientation],
			c = j.el,
			i,
			h,
			e;
			j.dom = j.dom || {};
			j.dom.prev = j.$el.find(".z-scrollbar-prev")[0];
			j.dom.next = j.$el.find(".z-scrollbar-next")[0];
			var d = function () {
				var l = this,
				k = Math.round(l.getValue());
				if (j.target) {
					j.scrollTarget(k)
				}
				j.fireEvent("scroll", k);
				if (j.onscroll) {
					j.onscroll.call(j, k)
				}
			};
			h = j._slider = new b.Slider({
					thumbCls : "z-scrollbar-slider-thumb",
					orientation : j.orientation,
					el : b.getDom(j.id + "_track"),
					initFromExistEl : true
				});
			h.on("slidestart", function () {
				j.fireEvent("scrollstart")
			});
			h.on("slide", d);
			h.on("slidestop", function () {
				j.fireEvent("scrollstop")
			});
			h.on("slideclick", d);
			j._scrollBarSize[f.unSize] = j.dom.next[f.unOffsetSize];
			j.dom.thumbButton = j.$el.find(".z-scrollbar-thumb-btn")[0];
			j.flushUI(j.value, j.dimension);
			j.initTarget()
		},
		initTarget : function () {
			var c = this,
			d = c.getTarget();
			if (!d) {
				return
			}
			c.update();
			if (c.orientation == "v") {
				c._registMouseWheelEvt(d)
			}
		},
		scrollTarget : function (e) {
			var d = this,
			f = d.getTarget(),
			c = d._axis[d.orientation];
			f[c.scrollPos] = e / 100 * (f[c.scrollSize] - f[c.clientSize])
		},
		flushUI : function (l, h) {
			if (!isNumber(h)) {
				return
			}
			var k = this,
			f = k._axis[k.orientation],
			j = k.dom.prev[f.offsetSize] + k.dom.next[f.offsetSize],
			i = k.el,
			d = k._slider,
			c = d.getThumb(),
			e;
			k.$el.hide();
			e = k.getContainerEl()[f.clientSize];
			k._scrollBarSize[f.size] = (e <= 0) ? j : e;
			d.getContainerEl().style[f.size] = (e <= 0 ? 0 : e - j) + "px";
			c.style[f.size] = Math.max(Math.min(h, 100), 0) + "%";
			k.$el.show();
			k._scrollTo(l)
		},
		_scrollTo : function (c) {
			this._slider.update({
				value : c
			})
		},
		scrollTo : function (d) {
			var c = this;
			c._scrollTo(d);
			if (c.target) {
				c.scrollTarget(d)
			}
			c.fireEvent("scroll", {
				value : d
			})
		},
		_basicScroll : function (e) {
			var d = this;
			var c = Math.pow(d.dimension / 100, d.step) * 100;
			d.scrollTo(Math.round(d._slider.getValue()) + (e == "prev" ? -c : c))
		},
		_onMouseWheelHandler : function (c) {
			var e = this,
			f = e.target;
			c = c.originalEvent || c;
			var d = c.detail || -c.wheelDelta;
			b.Event.preventEvent(c);
			e._basicScroll(d > 0 ? "next" : "prev")
		},
		_registMouseWheelEvt : function (e) {
			var d = this,
			f = function () {
				var h = navigator.userAgent.toLowerCase(),
				i = h.indexOf("compatible") < 0 && /mozilla/.test(h);
				return i ? "DOMMouseScroll" : "mousewheel"
			},
			c = d._mouseWheelEvent = {
				target : e,
				evtName : f(),
				handler : $.proxy(d._onMouseWheelHandler, d)
			};
			$(c.target).on(c.evtName, c.handler)
		},
		_cancelMouseWheelEvt : function () {
			var c = this._mouseWheelEvent;
			if (!c) {
				return
			}
			$(c.target).off(c.evtName, c.handler);
			this._mouseWheelEvent = null
		},
		setVisible : function (c) {
			this.getContainerEl().style.display = c ? "" : "none"
		},
		isVisible : function () {
			return this.getContainerEl().style.display != "none"
		},
		getSize : function () {
			return this._scrollBarSize
		},
		update : function (c) {
			var d = this;
			d.fireEvent("beforeupdate");
			b.extra(d, c);
			d.restoreTarget();
			d.flushUI(d.value, d.dimension);
			d.fireEvent("update")
		},
		restoreTarget : function () {
			var d = this,
			c = d._axis[d.orientation],
			e = d.getTarget();
			if (!e) {
				return
			}
			d.dimension = Math.round(e[c.clientSize] / e[c.scrollSize] * 100);
			d.value = e[c.scrollSize] - e[c.clientSize];
			if (d.value > 0) {
				d.value = Math.round(e[c.scrollPos] / (e[c.scrollSize] - e[c.clientSize]) * 100)
			}
		},
		_adjustValue : function () {
			var d = this,
			c = d.range;
			d.value = Math.max(Math.min(d.value, c[1]), c[0])
		},
		_calcValue : function (d) {
			var c = this;
			c.value = c._parseValue(d, "value");
			c._adjustValue()
		},
		_parseValue : function (f, d) {
			var e = this,
			c = e._axis[e.orientation];
			len = e.el[c.clientSize] - e.dom.thumb[c.offsetSize];
			if (d == "value") {
				f = (e.max - e.min) / len * f + e.min
			} else {
				f = Math.round(len / (e.max - e.min) * (f - e.min))
			}
			return f
		},
		getValue : function () {
			return this.value
		},
		getThumb : function () {
			return this.$el.find("." + this.thumbCls)[0]
		},
		getTarget : function () {
			var c = this;
			if (typeof c.target == "string") {
				c.target = b.getDom(c.target)
			}
			return c.target
		},
		disable : function () {
			var c = this;
			c.disabled = true;
			c._updateDragRange([c.value, c.value])
		},
		enable : function () {
			var c = this;
			c.disabled = false;
			c._updateDragRange(c.range)
		},
		destroy : function () {
			this._cancelMouseWheelEvt();
			this._slider.destroy();
			a.superclass.destroy.apply(this)
		}
	});
	b.ScrollBar = a
})();
(function () {
	var c = window.Zving,
	b = c.Node,
	a;
	if (c.isWebKit) {
		c.importCss("Components/scrollbar.css")
	}
	a = function (d) {
		if (!(this instanceof a)) {
			return new a(d)
		}
		if (c.isIE6 || c.isWebKit) {
			this.resume = function () {};
			return
		}
		if (typeof d.target == "string") {
			d.target = c.getDom(d.target)
		}
		a.superclass.constructor.apply(this, arguments);
		c.EventManager.onWindowResize(this.update, this);
		$(window).on("unload", function () {
			c.EventManager.removeResizeListener(this.update, this)
		})
	};
	a.htmlTemplate = '<div class="z-scrollpanel-wrap" id="{id}-wrap"><div class="z-scrollpanel-main" id="{id}-main">  <div class="z-scrollpanel-panel" id="{id}-panel">      <!-- content container -->      <div class="z-scrollpanel-overflow-x" id="{id}-overflow-x">          <!-- new ScrollBar h -->      </div>  </div>  <div class="z-scrollpanel-overflow-y" id="{id}-overflow-y">      <!-- new ScrollBar v -->  </div></div></div>';
	c.Class.extend(a, c.UICompBase, {
		ctype : "ScrollPanel",
		renderTpl : a.htmlTemplate,
		adaptive : true,
		overflow : "y",
		_scrollBarSize : 0,
		_yVisible : false,
		_xVisible : false,
		_axis : {
			y : {
				size : "height",
				unSize : "width",
				unScrollSize : "scrollWidth",
				unClientSize : "clientWidth",
				offsetSize : "offsetHeight",
				unOffsetSize : "offsetWidth"
			},
			x : {
				size : "width",
				unSize : "height",
				unScrollSize : "scrollHeight",
				unClientSize : "clientHeight",
				offsetSize : "offsetWidth",
				unOffsetSize : "offsetHeight"
			}
		},
		initComponent : function () {
			var d = this;
			d.addEvents("scroll", "beforeupdate", "update");
			a.superclass.initComponent.apply(this);
			if (d.el) {
				d.initDom()
			} else {
				if (d.target) {
					if (c.Page.onLayout && !c.Layout.haslayout) {
						c.Page.onLayout(function () {
							if (!d.rendered) {
								d.render(d.target.parentNode, d.target)
							} else {
								d.update()
							}
						})
					} else {
						d.render(d.target.parentNode, d.target)
					}
				}
			}
		},
		resume : function (d) {
			var e = this;
			c.extra(e, d);
			e.target = c.getDom(d.target);
			if (b.hasClass(e.target.parentNode, "z-scrollpanel-panel")) {
				e._smartVisible()
			} else {
				e.rendered = false;
				e.render(e.target.parentNode, e.target)
			}
		},
		initDom : function () {
			var h = this,
			f = h.getWrap(),
			d = h.getPanel(),
			j = h.getTarget();
			if (!h.adaptive) {
				h.el.style.width = j.offsetWidth + "px";
				h.el.style.height = j.offsetHeight + "px"
			}
			f.style.width = j.style.width = j.offsetWidth + "px";
			f.style.height = j.style.height = j.offsetHeight + "px";
			if (h.overflow == "x") {
				j.style.overflowX = "hidden"
			} else {
				if (h.overflow == "y") {
					j.style.overflowY = "hidden"
				} else {
					j.style.overflow = "hidden"
				}
			}
			var e = j.scrollTop;
			d.insertBefore(j, c.getDom(h.id + "-overflow-x"));
			j.scrollTop = e;
			function i(p) {
				var l = c.getDom(h.id + "-overflow-" + p),
				m = h._axis[p],
				k = h.getPanel(),
				n;
				if ("y" == p) {
					b.setStyle(k, "float", "left");
					b.setStyle(l, "float", "left")
				}
				h["_" + p + "Visible"] = true;
				n = h["_" + p + "ScrollBar"] = new c.ScrollBar({
						orientation : p == "y" ? "v" : "h",
						target : h.target,
						renderTo : l
					});
				l.style[m.unSize] = n.getSize()[m.unSize] + "px";
				h._scrollBarSize = n.getSize()[m.unSize];
				n.setVisible(false);
				var o;
				n.on("scrollstart", function () {
					if (o) {
						window.clearTimeout(o)
					}
					h.addClass("scrollpanel_active")
				});
				n.on("scrollstop", function () {
					o = window.setTimeout(function () {
							h.removeClass("scrollpanel_active")
						}, 200)
				});
				n.on("beforedestroy", function () {
					if (o) {
						window.clearTimeout(o)
					}
				})
			}
			if (/(x|auto)$/.test(h.overflow)) {
				i("x")
			}
			if (/(y|auto)$/.test(h.overflow)) {
				i("y")
			}
			h._smartVisible();
			return h
		},
		afterRender : function () {
			this.initDom();
			this._adaptiveInit()
		},
		_smartVisible : function () {
			var f = this,
			e = {
				yshow : false,
				xshow : false
			};
			if (!f.getTarget()) {
				return
			}
			function h(j) {
				var l = f._axis[j],
				m = f["_" + j + "ScrollBar"],
				n = f.getTarget(),
				k = {};
				if (!m || !m.isVisible()) {
					n.style[l.unSize] = Math.max(n[l.unClientSize], f._scrollBarSize) - f._scrollBarSize + "px"
				}
				k[l.unSize] = n[l.unClientSize];
				k["scroll" + l.unSize] = n[l.unScrollSize];
				return k
			}
			function i(j, k) {
				var l = f._axis[j],
				m = f.getTarget();
				if (!f["_" + j + "Visible"] || !k[j + "show"] || !f["_" + j + "ScrollBar"]) {
					m.style[l.unSize] = Math.max(m[l.unClientSize], f._scrollBarSize) + f._scrollBarSize + "px"
				}
			}
			function d(j, l) {
				var m = f._axis[j],
				n = f.getTarget(),
				o = f["_" + j + "ScrollBar"],
				k = l[j + "show"];
				if (o) {
					o.getContainerEl().style[m.size] = n[m.offsetSize] + "px";
					o.setVisible(f["_" + j + "Visible"] ? k : false);
					o.update()
				}
			}
			c.extra(e, h("y"));
			c.extra(e, h("x"));
			if (e.scrollwidth <= e.width + f._scrollBarSize && e.scrollheight <= e.height + f._scrollBarSize) {
				e.yshow = e.xshow = false
			} else {
				if (e.scrollwidth <= e.width && e.scrollheight > e.height + f._scrollBarSize) {
					e.yshow = true;
					e.xshow = false
				} else {
					if (e.scrollwidth > e.width + f._scrollBarSize && e.scrollheight <= e.height) {
						e.yshow = false;
						e.xshow = true
					} else {
						e.yshow = e.xshow = true
					}
				}
			}
			i("y", e);
			i("x", e);
			d("y", e);
			d("x", e)
		},
		setScrollBarVisible : function (e, f) {
			var d = this;
			if (f) {
				d["_" + f + "Visible"] = e
			} else {
				d._yVisible = d._xVisible = e
			}
			d._smartVisible()
		},
		isScrollBarVisible : function (e) {
			var d = this;
			return d["_" + e + "Visible"]
		},
		getScrollBar : function (f) {
			var e = this,
			d = f ? e["_" + f + "ScrollBar"] : null;
			if (!d) {
				d = (e._yScrollbar && e._xScrollbar) ? [e._yScrollbar, e._xScrollbar] : (e._yScrollbar || e._xScrollbar)
			}
			return d
		},
		_adaptiveInit : function () {
			if (!this.adaptive) {
				return
			}
			var f = this;
			var e = 100,
			d = f.el,
			h = f.getTarget(),
			i = {
				w : d.clientWidth,
				h : d.clientHeight
			};
			var j = setInterval(function () {
					var k = f.el,
					n = i,
					m;
					if (n.w == k.clientWidth && n.h == k.clientHeight) {
						return
					}
					m = i = {
						w : k.clientWidth,
						h : k.clientHeight
					};
					function l(o) {
						var q = f["_" + o + "Scrollbar"],
						p = f._axis[o],
						s = q ? q.isVisible() : false,
						r = k[p.unClientSize] - h[p.unOffsetSize];
						return (s && r == f._scrollBarSize) || (!s && r == 0)
					}
					if (l("y") && l("x")) {
						return
					}
					f.flushBounds()
				}, e);
			f.on("beforedestroy", function () {
				clearInterval(j)
			})
		},
		flushBounds : function (i) {
			var h = this,
			e = h.el,
			f = h.getWrap(),
			d = h.getPanel(),
			k = h.getTarget();
			var j = {
				y : h._yVisible,
				x : h._xVisible
			},
			l = {
				w : i && c.isNumber(i.width) ? i.width : e.clientWidth,
				h : i && c.isNumber(i.height) ? i.height : e.clientHeight
			};
			h.setScrollBarVisible(false);
			f.style.width = k.style.width = l.w + "px";
			f.style.height = k.style.height = l.h + "px";
			h._yVisible = j.y;
			h._xVisible = j.x;
			h._smartVisible()
		},
		update : function (d) {
			var e = this;
			c.extra(e, d || {});
			e._smartVisible()
		},
		getWrap : function () {
			return c.getDom(this.id + "-wrap")
		},
		getMain : function () {
			return c.getDom(this.id + "-main")
		},
		getPanel : function () {
			return c.getDom(this.id + "-panel")
		},
		getTarget : function () {
			return c.getDom(this.target)
		},
		destroy : function () {
			var e = this,
			d = e._yScrollbar,
			f = e._xScrollbar;
			if (e.el) {
				e.el.parentNode.insertBefore(e.getTarget(), e.el)
			}
			if (d) {
				d.destroy()
			}
			if (f) {
				f.destroy()
			}
			c.Dom.removeNode(e.getWrap());
			a.superclass.destroy.apply(this)
		}
	});
	c.ScrollPanel = a
})();
